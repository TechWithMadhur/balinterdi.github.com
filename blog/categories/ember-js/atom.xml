<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2015-09-28T10:47:14+02:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Select in Ember with multiple selection]]></title>
    <link href="http://balinterdi.com/2015/09/25/select-in-ember-with-multiple-selection.html"/>
    <updated>2015-09-25T14:24:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/25/select-in-ember-with-multiple-selection</id>
    <content type="html"><![CDATA[<iframe
  width="178" height="24" style="border:0px"
  src="https://mixonic.github.io/ember-community-versions/2015/09/25/select-in-ember-with-multiple-selection.html">
</iframe>


<p>A few weeks ago I wrote a blog post about <a href="http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20.html">how to do a select in Ember 2</a>,
that seemed to be popular. I also received good comments about advanced versions
of the same problem, namely how the solution would have to change to deal with
the case if the items to select from are objects and how to tackle multiple
selections. I thus decided to do a Part 2, showing a solution for these cases.
Comment are welcome, as always.</p>

<h3>Multiple selection with simple strings as items</h3>

<p>Let's tackle the easier problem first, being able to select more than one items,
but the items are simple string values. The values will serve both as the value
and the content of the options.</p>

<p>I added some extra Bootstrap markup and a list to see which items are selected:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-sm-8&quot;&gt;
      &lt;h2&gt;Select some bands&lt;/h2&gt;
      &lt;select style=&quot;height:100px&quot; class=&quot;form-control&quot; multiple onchange={{action &quot;selectBand&quot;}}&gt;
        {{#each bands as |bandChoice|}}
        &lt;option value={{bandChoice}} selected={{include selectedBands bandChoice}}&gt;{{bandChoice}}&lt;/option&gt;
        {{/each}}
      &lt;/select&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-sm-4&quot;&gt;
      {{#if selectedCount}}
        &lt;h2&gt;Selected bands ({{selectedCount}})&lt;/h2&gt;
      {{else}}
        &lt;h2&gt;Selected bands&lt;/h2&gt;
      {{/if}}
      &lt;ul class=&quot;list-group&quot;&gt;
        {{#each selectedBands as |band|}}
          &lt;li class=&quot;list-group-item&quot;&gt;{{band}}&lt;/li&gt;
        {{else}}
          &lt;li class=&quot;list-group-item&quot;&gt;No band selected.&lt;/li&gt;
        {{/each}}
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>I added the <code>multiple</code> attribute to the <code>select</code> tag to allow multiple
selections. Not much has changed from the earlier example. When the user
selects an option, whether in a way that clears the earlier selection (simple
click) or adds to it (ctrl/cmd + click), the <code>onchange</code> event is fired, and our
<code>selectBand</code> handler will handle it. We expect that handler to set
<code>selectedBands</code> so that the list of selected bands gets updated correctly. So
let's see the controller:</p>

<p><div>
  <pre><code class='html'>export default Ember.Controller.extend({
  bands: [&#39;Pearl Jam&#39;, &#39;Tool&#39;, &#39;Long Distance Calling&#39;, &#39;Led Zeppelin&#39;],&lt;/p&gt;

&lt;p&gt;  selectedBands: [],&lt;/p&gt;

&lt;p&gt;  selectedCount: Ember.computed.reads(&#39;selectedBands.length&#39;),&lt;/p&gt;

&lt;p&gt;  actions: {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selectBand(event) {
  const selectedBands = Ember.$(event.target).val();
  this.set(&#39;selectedBands&#39;, selectedBands || []);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
});</code></pre>
</div>
</p>

<p>For multiple selections, jQuery, aliased as <code>Ember.$</code>, returns an array of the
selected options values as the select's value, so all we have to do is assign
this to the <code>selectedBands</code> property. In case nothing is selected, <code>val()</code>
returns <code>null</code>, so we guard against transferring this to <code>selectedBands</code> by
defaulting to an empty array.</p>

<p>There is one more thing you might have noticed, and that is the <code>include</code> helper
in the template. We want to mark the option as selected if its value is included
in the selectedBands:</p>

<p><div>
  <pre><code class='html'>&lt;select style=&quot;height:100px&quot; class=&quot;form-control&quot; multiple onchange={{action &quot;selectBand&quot;}}&gt;
  {{#each bands as |bandChoice|}}
  &lt;option value={{bandChoice}} selected={{include selectedBands bandChoice}}&gt;{{bandChoice}}&lt;/option&gt;
  {{/each}}
&lt;/select&gt;</code></pre>
</div>
</p>

<p>The <code>include</code> helper is not provided by Ember but it is rather easy to write
ourselves:</p>

<p><div>
  <pre><code class='html'>import Ember from &#39;ember&#39;;&lt;/p&gt;

&lt;p&gt;export function include(params) {
  const [items, value] = params;
  return items.indexOf(value) &gt; -1;
}&lt;/p&gt;

&lt;p&gt;export default Ember.Helper.helper(include);</code></pre>
</div>
</p>

<p>That is all there is to it:</p>

<p><img src="/images/posts/select-in-ember-with-multiple-selections/multiple-select-with-ember.gif" alt="Multiple selection" /></p>

<h3>Multiple selection with objects as items</h3>

<p>This is just a tad more difficult, as we cannot directly have objects as options
values. Let's assume that these objects have a property that identifies them
unambiguously (which is a fair assumption to make), usually referred to as <code>id</code>:</p>

<p><div>
  <pre><code class='html'>import Ember from &#39;ember&#39;;&lt;/p&gt;

&lt;p&gt;export default Ember.Controller.extend({
  bands: [&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ember.Object.create({ id: &quot;1&quot;, name: &#39;Pearl Jam&#39;, formedIn: 1990 }),
Ember.Object.create({ id: &quot;2&quot;, name: &#39;Tool&#39;, formedIn: 1991 }),
Ember.Object.create({ id: &quot;3&quot;, name: &#39;Long Distance Calling&#39;, formedIn: 2003 }),
Ember.Object.create({ id: &quot;4&quot;, name: &#39;Led Zeppelin&#39;, formedIn: 1970 })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  ],
  (...)
});</code></pre>
</div>
</p>

<p>We'll use the <code>id</code> as the option value and display the name:</p>

<p><div>
  <pre><code class='html'>(...)
&lt;select style=&quot;height:100px&quot; class=&quot;form-control&quot; multiple onchange={{action &quot;selectBand&quot;}}&gt;
  {{#each bands as |bandChoice|}}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;option value={{bandChoice.id}} selected={{include selectedBandIds bandChoice.id}}&amp;gt;{{bandChoice.name}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  {{/each}}
&lt;/select&gt;
(...)</code></pre>
</div>
</p>

<p>On the controller, we collect the id of each selected band, and if we need to
display their names, we simply make the mapping between these two:</p>

<p><div>
  <pre><code class='html'>export default Ember.Controller.extend({
  (...)
  selectedBandIds: [],&lt;/p&gt;

&lt;p&gt;  selectedBands: Ember.computed(&#39;selectedBandIds.[]&#39;, function() {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return this.get(&#39;selectedBandIds&#39;).map((bandId) =&amp;gt; {
  return this.get(&#39;bands&#39;).findBy(&#39;id&#39;, bandId);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }),
  (...)
});</code></pre>
</div>
</p>

<p><code>bands.findBy</code> is our makeshift store service, which allows us to find an object
in a collection by its id. If we used Ember Data, it would become
<code>store.findRecord('band', bandId)</code> or <code>store.findRecord('band', bandId)</code>. The
only other difference from before is that we set <code>selectedBandIds</code> instead of
<code>selectedBands</code> in the action handler:</p>

<p><div>
  <pre><code class='html'>export default Ember.Controller.extend({
  (...)
  actions: {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;selectBand(event) {
  const selectedBandIds = Ember.$(event.target).val();
  this.set(&#39;selectedBandIds&#39;, selectedBandIds || []);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  }
});</code></pre>
</div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll With Ember 2 is coming soon!]]></title>
    <link href="http://balinterdi.com/2015/09/16/rock-and-roll-with-ember-2-is-coming-soon.html"/>
    <updated>2015-09-16T15:54:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/16/rock-and-roll-with-ember-2-is-coming-soon</id>
    <content type="html"><![CDATA[<h3>tl;dr</h3>

<p>I will publish a second, extended edition of my book, Rock and Roll with Ember
in about two weeks, at the end of September. Here is what you need to know:</p>

<ul>
<li>I make the same promise as with the current edition: you buy it once, you get
all updates for free until 3.0 comes out</li>
<li>4 extra chapters are added about advanced Ember topics, bringing the number
of chapters to 18</li>
<li>There will be a short launch period where the book packages are offered at a
discount.</li>
</ul>


<p>To be in-the-loop about the launch and know about the launch discount, <a href="http://balinterdi.com/2015/09/16/rock-and-roll-with-ember-2-is-coming-soon.html#launch-date">sign up
below</a>,
at the end of the post. Read on for more details.</p>

<h3>The short past, present and future of Rock and Roll with Ember</h3>

<p>Almost exactly 7 months ago, I published my book, Rock and Roll with Ember.js,
that helps people learn the glorious framework. Ember has since went through
quite some changes and I kept the book up-to-date with roughly an update each
month.</p>

<p>Ember 2 was released about a month ago, on the 13rd of August. True to the
"stability without stagnation" philosophy, the 2.0 release did not contain any
new features but dropped a lot of deadweight, API methods and syntaxes that had
been deprecated somewhere along the 1.x process.</p>

<p>Thanks to the transparency of the road ahead through RFCs and discussions on
other forums, it can already be clearly seen that the 2.x series will bring a
great deal of new and fascinating features. Routable components, angle-bracket
components and contextual lookup in components are some of the bigger things
that we can expect on the road to 3.0. The expected simplifications (for
example, routable components replacing controllers) will come with major changes
in how one writes an idiomatic app in Ember 2.</p>

<p>I've been following along the 1.x series with fascination and a keen eye to
apply the changes to my book and the included application. I want to do the same
along the Ember 2.x line and thus I hereby announce the second edition of the
book, Rock and Roll with Ember 2!</p>

<h3>Free updates policy</h3>

<p>To clarify, with Rock and Roll with Ember 2,  I intend to follow the "book
development and release" process of the first edition of the book that I've now
named "Buy once, get all updates for free (until the next major version)". I
assert that if you buy any of my book packages, you get all subsequent updates
for free, until 3.0 lands (which is probably 12-18 months away. Geez, do I
really want to do that? :) ).</p>

<h3>New content</h3>

<p>Keeping the book's current content up-to-date is not all. The second edition
will contain 4 extra chapters on some advanced topics (Animations, Making an
Ember CLI addon, Deployment and ES2015 &amp; computed macros) bringing the total
chapter count to 18 (the Getting ready for Ember 2.0 is retired).</p>

<p>Further content changes are expected as Ember 2 evolves (see above for what can
already be known about these changes), so the content on launch day will by no
means be the final content of the book. It will constantly improve and be kept
in-sync with the latest stable 2.x version of Ember.</p>

<h3 id="launch-date">When does it launch?</h3>


<p>Very soon, probably in two weeks, mark the date (with a pencil, for the moment):
September 30, 2015.</p>

<p>Stand ready, Rock and Roll with Ember 2 is coming to a virtual bookstore near
you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll With Ember.js v1.13.9 Is Out]]></title>
    <link href="http://balinterdi.com/2015/09/11/rock-and-roll-with-ember-dot-js-v1-dot-13-dot-9-is-out.html"/>
    <updated>2015-09-11T11:42:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/11/rock-and-roll-with-ember-dot-js-v1-dot-13-dot-9-is-out</id>
    <content type="html"><![CDATA[<p>I have just released another update to the Rock and Roll with Ember.js book,
keeping it in sync with Ember 1.13.9. On top of that (mostly on top of that,
since there weren't as many things to do for the Ember upgrade), I added some
content, removed some other ones, fixed a few wrong paths in code comments,
clarified a few code lines to help people build the app along, and the like. The
usual stuff, quoi.</p>

<p>Here are the bigger chunks:</p>

<ul>
<li>Extended the Testing chapter with a (controller) unit test. I removed the
component's unit test in an earlier update (integration tests are vastly
superior for components) but now realized unit testing was missing.</li>
<li>Switched to a dashless helper, <code>capitalize</code> instead of <code>capitalize-words</code>.
Ember 1.13.0 and up auto-register helpers with and without dashes, so there is
no need for the more verbose form.</li>
<li>Fixed a few places where the <code>updateRating</code> action was still in the route.
When I switched to a closure action, I had to move the action handler to the
controller but missed a couple of places in the subsequent chapters.</li>
<li>The epub version had two missing code snippets due to bad formatting (thanks
to <a href="https://github.com/morganick">@morganick</a>)</li>
</ul>


<p>There are a few other minor fixes, the whole list can be found in the <a href="https://github.com/balinterdi/rarwe-issues/issues?q=is%3Aissue+milestone%3A1.13.9+is%3Aclosed">Github issues repo</a></p>

<p>I want to thank <a href="http://andrew.davison-family.com">Andrew Davison</a> who did most
of the error reporting for this update. Thank you, Andrew!</p>

<p>Stay tuned for more goodies early next week, or sign up below so that you don't
miss any in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complex Component Design in Ember.js - Intro]]></title>
    <link href="http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro.html"/>
    <updated>2015-09-10T11:07:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro</id>
    <content type="html"><![CDATA[<p>The title would probably better be "Somewhat Complex Component Design in Ember.js"
but any title including 'Somewhat' rules out pompousness. I therefore don't
claim that the series of blog posts I intend to start here will represent the
paramount of component design in Ember. There definitely are and definitely will
be more complex component structures and scenarios.</p>

<p>The component developed in the series is one that autocompletes as the user
starts to write the input and allows selecting from a fixed set of options.
Nothing extraordinary but complex enough so that the design/interaction
principles can be applied and explained while developing the component.</p>

<p>Important disclaimer: I am not an expert on component design (which, it seems
to me, is quite a complex topic). I got intrigued by it thanks to <a href="https://twitter.com/ryanflorence">Ryan Florence</a>
and his talks and learned most of the basics from him. My choice of component
probably also has to do something with Ryan. He developed the ic-autocomplete
component from which I took several ideas, sometimes simply copying the
implementation.</p>

<h3>Rationale</h3>

<p>So you probably ask: why reinvent the wheel? Why develop something that is
already done and not something new?</p>

<p>First of all, I (and science says most of us) learn best by doing. I wanted to
use an example where I already have a sample implementation but also understand
why the original implementation did things as it did and see whether I can make
the component simpler or more robust. I wanted to face the problems, to feel
the pain of doing things a certain way, and find solutions for typical,
recurring problems.</p>

<p>It's also important to remember that when Ryan developed their autocomplete
component, there were no block parameters, no closure actions and no direct
attribute bindings. One still had to resort to observers in several cases.
Two-way bindings were still in, and the de-facto way of communication between
pieces of a component structure.</p>

<p>Ember has come a long way since then and its components converged toward those
of React in its reactive, "rerender everything" approach. Potentially some of
the ideas explained in the series can be applied to React and other libraries,
too, and thus might prove useful to more people.</p>

<h3>So many words, so little code</h3>

<p>To have something (almost) tangible in this first intro post, too, let me show
you how one would interact with the finished(?) component. If you have read my
<a href="/2014/06/26/ember-gotcha-controllers-are-singletons.html">earlier</a> <a href="/2014/03/05/sorting-arrays-in-ember-dot-js-by-various-criteria.html">posts</a> or <a href="http://rockandrollwithemberjs.com">my book</a>, it will come as no surprise that I use it here to
select a great musician from a defined set of them:</p>

<p><img src="/images/posts/complex-component-design-ember/ember-autocomplete-demo.gif" alt="Selecting an
artist" /></p>

<p>This short intro and the demo have hopefully whetted your appetite and you'll
join me for the next part of the series:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to do a select (dropdown) in Ember 2.0?]]></title>
    <link href="http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20.html"/>
    <updated>2015-08-29T17:43:00+02:00</updated>
    <id>http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20</id>
    <content type="html"><![CDATA[<iframe
  width="178" height="24" style="border:0px"
  src="https://mixonic.github.io/ember-community-versions/2015/08/29/how-to-do-a-select-dropdown-in-ember-2-0.html">
</iframe>


<p>When the select view was about to be removed from Ember, a lot of people
-myself included- wondered how it was going to be replaced. My bet was on a
'select component', after all, views should be transformed into components, right?</p>

<p>Then I saw <a href="https://gist.github.com/ef4/8367f996eb7b57d1f7a5">this gist</a> from Edward Faulkner:</p>

<p><div>
  <pre><code class='html'>&lt;select onchange={{action (mut vehicle) value=&quot;target.value&quot;}}&gt;
  {{#each vehicles as |vehicleChoice|}}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;option value={{vehicleChoice}} selected={{eq vehicle vehicleChoice}}&amp;gt;{{vehicleChoice}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  {{/each}}
&lt;/select&gt;</code></pre>
</div>
</p>

<p>I did not understand half of it, so I dug down to see how the pieces come
together. In this short post, I want to explain what I have found out.</p>

<h3>Solve a simpler problem</h3>

<p>A great mathematician, George Polya, wrote a book in 1945 called <a href="http://smile.amazon.com/How-Solve-It-Mathematical-Princeton/dp/069111966X/ref=smi_www_rco2_go_smi_g2147660602?_encoding=UTF8&amp;*Version*=1&amp;*entries*=0&amp;ie=UTF8">"How to Solve It"</a>,
in which he puts down a framework for solving mathematical problems. One
(probably more) of his recommendations can be applied to software development,
too: Solve a simpler problem.</p>

<p>Heeding this advice, we'll first tackle a more mundane problem and in the
second round, we'll solve the original riddle.</p>

<p>Let's assume Edward had written the following:</p>

<p><div>
  <pre><code class='html'>&lt;select onchange={{action &quot;selectVehicle&quot; value=&quot;target.value&quot;}}&gt;
  {{#each vehicles as |vehicleChoice|}}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;option value={{vehicleChoice}} selected={{eq vehicle vehicleChoice}}&amp;gt;{{vehicleChoice}}&amp;lt;/option&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  {{/each}}
&lt;/select&gt;</code></pre>
</div>
</p>

<p>```js
import Ember from 'ember';</p>

<p>export default Ember.Controller.extend({
  vehicle: null,
  vehicles: Ember.String.w('Tesla Chrysler Toyota'),
  actions: {</p>

<pre><code>selectVehicle(vehicle) {
  this.set('vehicle', vehicle);
}
</code></pre>

<p>  }
});
```</p>

<p>This is easier (as in: more familiar) but there are still a few things that
might need explanation. First, before 1.13.3, event listeners on browser
events could not trigger Ember actions like that:</p>

<p><div>
  <pre><code class='html'>&lt;select onchange={{action &quot;selectVehicle&quot; value=&quot;target.value&quot;}}&gt;</code></pre>
</div>
</p>

<p>What this does, is that when the selected value of the dropdown changes, it
fires the onchange listener we added on the <code>&lt;select&gt;</code> which results in calling
our action handler, <code>selectVehicle</code>. The handler just updates the <code>vehicle</code>
property of the controller. This will mark as selected the dropdown option the
user picked due to the <code>selected={{eq vehicle vehicleChoice}}</code> term.</p>

<p>(<code>eq</code> comes from a great little Ember addon called <a href="https://github.com/jmurphyau/ember-truth-helpers">ember-truth-helpers</a>. It
returns true if the two parameters are equal).</p>

<p>Since there is no two-way binding set up between the selected option of the
dropdown and the controller property (<code>vehicle</code>), this needs to be done using a
DOM event listener (<code>onchange</code>) and updating in the action handler. That's
exactly what happens in the <code>selectVehicle</code> action handler.</p>

<p>So far so good, let's move on.</p>

<h3>Solve the original one</h3>

<p>Wait a minute. How did <code>selectVehicle</code> receive the selected vehicle choice (e.g
Toyota) when the <code>{{action}}</code> helper did not specify any parameters?</p>

<p>When the browser calls an event listener, it passes it an event object which
would become the first parameter of <code>selectVehicle</code>. However, <code>selectVehicle</code>
does not receive the event but the actual value of the selected option, how does
that come about? The missing link is a lesser-known option of the <code>action</code>
helper, <code>value</code>. The property passed to it is read off of the first parameter of
the handler and then replaces it. In our example, <code>target.value</code> is looked up on
the event object, which is exactly the value of the select option that triggered
the <code>onchange</code> event.</p>

<p>Ok, only one thing left.</p>

<p>The original example had this line:</p>

<p><div>
  <pre><code class='html'>&lt;select onchange={{action (mut vehicle) value=&quot;target.value&quot;}}&gt;</code></pre>
</div>
</p>

<p>instead of the more familiar:</p>

<p><div>
  <pre><code class='html'>&lt;select onchange={{action &quot;selectVehicle&quot; value=&quot;target.value&quot;}}&gt;</code></pre>
</div>
</p>

<p>What mut does here is that it allows updating the passed property, so when the
action is called, <code>vehicle</code> is set to the passed value, the value of the
selected option. That is it, we solved the riddle.</p>

<p>The same implementation pattern can be used to update the properties related to
checkboxes, input fields and radio buttons. This new way of doing things takes a
while to get used to, but we'll see more and more of it with one-way bindings
becoming best practice.</p>

<p>(By the way, my PR to add a section about <a href="https://github.com/emberjs/guides/pull/670">the actions helper's <code>value</code> option</a> to
the guides was merged yesterday, so hopefully more people will know about it.)</p>
]]></content>
  </entry>
  
</feed>
