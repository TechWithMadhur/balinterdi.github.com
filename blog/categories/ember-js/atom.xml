<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2015-07-20T16:41:48+02:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js v1.13.3 is out]]></title>
    <link href="http://balinterdi.com/2015/07/17/rock-and-roll-with-ember-dot-js-v1-dot-13-3-is-out.html"/>
    <updated>2015-07-17T10:47:00+02:00</updated>
    <id>http://balinterdi.com/2015/07/17/rock-and-roll-with-ember-dot-js-v1-dot-13-3-is-out</id>
    <content type="html"><![CDATA[<p>It's Friday and if it's (every 2nd-6th) Friday, it's Rock and Roll release day!</p>

<p>Book version 1.13.3 is rolling out as we speak (ok, we don't speak and you
probably read this later, but you get the point) which contains the following
changes:</p>

<ul>
<li><strong>Upgrade to Ember version 1.13.3 (the book is in lockstep, too!)</strong></li>
<li><strong>Update to Ember CLI 1.13.1</strong></li>
<li><p><strong>Extended the Components chapter with closure actions.</strong></p>

<p><a href="http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_closure-actions">Closure actions</a> are an awesome new way to fire/handle actions introduced
in 1.13 and so it has to be in the book!</p></li>
<li><p><strong>Extended the Testing chapter with component integration tests.</strong></p>

<p>Integration tests make component tests super simple to set up and so much more
descriptive than unit tests. Our beloved star-rating component is now tested
by the shiny new integration tests.</p></li>
<li><p><strong>Get rid of <code>needs</code> in the controller.</strong></p>

<p>There was one instance where I used this to get a nice placeholder text. As a
preparation for Ember 2.0 where <code>needs</code> is going the way of the dodo, I
removed that nasty <code>needs</code>.</p></li>
<li><p><strong>Specify the band-songs relationship as sync.</strong></p>

<p>Starting from 2.0, Ember Data relationships are assumed to be asynchronous
unless otherwise specified. In the Rock &amp; Roll application, we sideload the
songs with the bands, so adding a <code>{ async: false }</code> option to the
relationship was in order.</p></li>
<li><strong>A few CSS fixes, one of them thanks to <a href="https://twitter.com/lonekorean">lonekorean</a></strong></li>
</ul>


<p>The whole change list is observable <a href="https://github.com/balinterdi/rarwe-issues/issues?q=milestone%3A1.13.3+is%3Aclosed">here</a>.</p>

<p>Hoist the sails, Ember 2.0 (and with it, Rock and Roll with Ember 2.0) is on the horizon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js v1.13 is out]]></title>
    <link href="http://balinterdi.com/2015/07/03/rock-and-roll-with-ember-dot-js-v1-dot-13-is-out.html"/>
    <updated>2015-07-03T15:25:00+02:00</updated>
    <id>http://balinterdi.com/2015/07/03/rock-and-roll-with-ember-dot-js-v1-dot-13-is-out</id>
    <content type="html"><![CDATA[<p>Today marks the sixth release of my book, <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js</a>, and
brings it in sync with Ember 1.13. The book follows along the development from
scratch of an Ember application, and chapter by chapter and explains concepts in
the process.</p>

<p>As I have promised, the book is kept up-to-date with the latest stable Ember
version. That implies both using idiomatic Ember and not using deprecated
syntaxes or APIs.</p>

<p>Now that the versioning of Ember Data is in lockstep with that of Ember, I
considered it important to update to the latest Ember Data, too, and will
strive to do so in future releases, too.</p>

<p>Here are the major things I updated for the 1.13 release:</p>

<ul>
<li>Use <code>this.route</code> instead of <code>this.resource</code> in the router map as the latter is now deprecated.</li>
<li>Use <code>Ember.computed</code> and <code>Ember.on</code> instead of the Function prototype
extensions, <code>property</code> and <code>on</code> as extending the Function prototype is
consired a poor practice.</li>
<li>Update the "Getting ready for Ember 2.0" chapter as most things are clear now
for the 2.0 release. As I give particular examples for each deprecation, this
chapter can also serve as an update guide for 1.x Ember applications.</li>
<li>Use the new Ember Data find methods, namely <code>store.findAll</code> and
<code>store.findRecord</code>. Before, both fetching a collection and a single record
used <code>store.find</code>.</li>
</ul>


<p>As usual, there are also smaller improvements and fixes and you can find the
whole list in the errata/issues repository for the book, assigned to <a href="https://github.com/balinterdi/rarwe-issues/issues?q=milestone%3A1.13+is%3Aclosed">the release milestone.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Ember Mistakes]]></title>
    <link href="http://balinterdi.com/2015/06/05/common-ember-mistakes.html"/>
    <updated>2015-06-05T00:27:00+02:00</updated>
    <id>http://balinterdi.com/2015/06/05/common-ember-mistakes</id>
    <content type="html"><![CDATA[<p>I wrote an article called <a href="http://www.toptal.com/emberjs/the-8-most-common-ember-js-developer-mistakes">"The Top 8 Most Common Ember.js Developer
Mistakes"</a> for Toptal that just went live on their blog. As the name
suggests, it describes the typical pitfalls beginner, and sometimes advanced,
Ember developers make with a mitigation strategy for each of them. I am quite
happy about how it turned out and suggest you <a href="http://www.toptal.com/emberjs/the-8-most-common-ember-js-developer-mistakes">give it a read</a>.</p>

<p>Also, it turned out to have more than 2500 words so I thought it might be
convenient for you to have it as a pdf. It spans 13 pages and you can get it
right here below by providing your email address to send the paper to:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My book, Rock and Roll with Ember.js, is now live!]]></title>
    <link href="http://balinterdi.com/2015/02/18/rock-and-roll-with-ember-js-is-live.html"/>
    <updated>2015-02-18T09:51:00+01:00</updated>
    <id>http://balinterdi.com/2015/02/18/rock-and-roll-with-ember-js-is-live</id>
    <content type="html"><![CDATA[<p>I started writing my book, Rock &amp; Roll with Ember.js, on July 18, 2014, exactly
7 months ago (More precisely, I prepared some drafts from early chapters most of
which I ended up rewriting before that, but who doesn't like a good story?).</p>

<p>Today, I am extremely happy to announce that <a href="http://rockandrollwithemberjs.com">the book is available for purchase</a>!</p>

<h2>Tame the dreaded Ember.js learning curve</h2>

<p>Ember is said to be hard to learn. Developers who are new to the framework hit
a wall and can't easily find out how all the pieces fit together.</p>

<p>My own experience tells me that Ember has a small number of core concepts that
you have to grok to be able to tame the learning curve. Once you understand
these key ideas behind the framework's design, you will fly over that wall and
see the green meadow filled with flowers and bunnies.</p>

<p>You will build Ember applications with confidence and - if you are like me -
you will love building them.</p>

<h2>Read it and build it!</h2>

<p>My book also has a concept, and a very pragmatic one at that.</p>

<p>In the book, we are building an application, chapter by chapter. As we
progress, we are adding new features to the application, introducing new
Ember concepts that are needed for implementing the feature.</p>

<p>When a list of bands need to be displayed alongside with the songs of the
selected band, we reach for nested routes.  When we need a widget that displays
stars for the songs, we introduce components. When we want to show the user
that loading data from the backend is in progress, we learn about loading
routes.</p>

<h2>Set List</h2>

<p>The book currently has the following chapters:</p>

<ol>
<li>Introduction to Ember.js</li>
<li>Ember CLI</li>
<li>Templates and data bindings</li>
<li>Routing</li>
<li>Nested routes</li>
<li>Actions</li>
<li>Components</li>
<li>Controllers</li>
<li>Advanced routing</li>
<li>Talking to a backend - with Ember Data</li>
<li>Testing</li>
<li>Sorting and searching with query params</li>
<li>Loading and error routes</li>
<li>Helpers</li>
<li>Getting ready for Ember 2.0</li>
</ol>


<p>I say 'currently' because I will definitely have to change some chapters as
Ember evolves (To give an example, Controllers will probably become Routable components).</p>

<h2>A reference book and a reference application</h2>

<p>Ember moves rapidly towards version 2.0. As each minor version is released, it
brings new syntaxes and deprecates old ones. Even though the Ember Core team
takes extreme care to ensure a smooth upgrade process, it is easy for an
application to lag behind, having a few deprecations here and there and not
using the shiny new tools.</p>

<p>The motto of the Ember 2.0 roadmap is "Stability without Stagnation", that old
syntaxes and practices should vanish gradually, giving ample time for developers
to update their applications. At the same time, Ember should not stagnate, it
should introduce new features.</p>

<p>I adhere to this motto, but, more importantly, my book does, too.</p>

<p>I want the book and the Rock &amp; Roll application to be up-to-date with the latest
stable Ember version and not have any of the deprecations. What that means in
practice is that if you buy one of the packages, you will most likely get book
updates after each 1.x release. And at no extra cost to you until 2.0 ships!</p>

<h2>A bonus deal you will definitely like</h2>

<p>When you <a href="http://rockandrollwithemberjs.com/#stairway-to-heaven">buy one of the packages</a> you also get access to an awesome deal
from <a href="https://divshot.com">Divshot</a>, a company that provides static hosting for your Ember apps.</p>

<p>You get 3 months free of <a href="https://divshot.com/pricing">their Fleet plan</a>, a $150 value.</p>

<h2>The "New Beginning" tour</h2>

<p><del>Wait, there is more!</del> To celebrate that the book has finally seen the
light of day, there is a 25% discount <a href="http://rockandrollwithemberjs.com/#pricing">on all packages</a>.</p>

<p>This offer expires on Sunday, February 22, at 23:59 PST, so <a href="http://rockandrollwithemberjs.com">grab yours</a> now!</p>

<h2>Acknowledgements</h2>

<p>I am indebted to all of you who have pushed me through the finish line, either
by praising my screencasts, blog posts and review copies of my book, retweeting
my marketing tweets, giving valuable feedback that made the book better or
simply by pointing out typos in the text.</p>

<p>I would also like to thank you to the Ember Core team whose relentless work
makes Ember better every day. You are putting so much time in, it's almost
insane. It's kinda obvious but without your contributions, this book would not
exist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reminiscing about EmberFest 2014]]></title>
    <link href="http://balinterdi.com/2014/09/05/reminiscing-about-emberfest-2014.html"/>
    <updated>2014-09-05T09:55:00+02:00</updated>
    <id>http://balinterdi.com/2014/09/05/reminiscing-about-emberfest-2014</id>
    <content type="html"><![CDATA[<p><a href="https://emberfest.eu">EmberFest 2014</a> ended a week ago and I already feel nostalgic. It
was a great event with great people and you could feel the excitement about
Ember in the air and in all conversations. It was almost single-handedly
organized by <a href="https://haagen-software.no">Joachim Haagen-Skeie</a> for which he deserves huge kudos.</p>

<p>It was really great to associate real people with twitter avatars and have
fascinating conversations about various topics that included the Ember
Inspector, the difficulties in building a build tool and even Firefox OS.</p>

<h3>The functional paradigm making a headway into Emberland</h3>

<p>One thing that struck me about Ember initially is that it seems to rely heavily
on (shared) state. Some (most?) of that is inevitable given Ember being a
performant framework that runs in the browser and is written in Javascript.
None of these facilitates ditching (or minimizing) state and go with a
functional, stateless approach.</p>

<p>On the other hand, I really came to cherish the <a href="http://www.infoq.com/presentations/Simple-Made-Easy">simplicity</a> of the
functional paradigm and have been gravitating towards languages that allow this
(Clojure was, and still is, <a href="http://balinterdi.com/2013/06/19/the-appeal-of-one-paradigm-languages.html">my favorite</a>). So I added a mental
note about my two favorite things being at such a great distance from each other
and moved on.</p>

<p>One theme of the conference and the hallway talks, however, is how Ember
embraces the functional, immutable approach where it makes sense to. It might
have something to do with my confirmation bias, but let me cite the examples
nevertheless. <a href="https://twitter.com/tchak13">Paul Chavard</a> had a talk on his using immutable data
structures in Ember. <a href="http://www.solitr.com/blog/">Jo Liss</a> revealed how Broccoli uses a
"rebuild-from-scratch" approach instead of trying to find out which assets to
rebuild at each modification. Finally, Alex Matchneer, aka. machty, prolific
Ember and router.js contributor had <a href="https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/edit#slide=id.p">a presentation on React vs.  Ember</a>
at EmberNYC which you should go read. His <a href="https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/edit#slide=id.g380053cce_1786">last slide</a> has a bullet-point
that states: "Don't be surprised if Ember adopts DOM-diffing".</p>

<p>It would be an understatement if I said I'm happy to see the functional world
coming to Ember.</p>

<h3>Promises</h3>

<p>I had a talk at the conference called "Don't call me back - How Ember uses
promises and how you can, too". As it usually happens, in doing research for the
talk, I learned a lot not just about promises but about other topics, too. This
time, it was the (in)famous run loop I stumbled across on several
occasions so I am really happy I know a lot more about that beast now. You can
find the slides of my presentation below.</p>

<script async class="speakerdeck-embed" data-slide="10"
data-id="47ee01e011b60132c86e02e2e0c65448" data-ratio="1.33333333333333"
src="http://balinterdi.com//speakerdeck.com/assets/embed.js"></script>


<p>I might even do another talk "How Ember uses the run loop and how you should
probably not", or something to this effect.</p>

<h3>EmberFest 2015</h3>

<p>The greatest thing about EmberFest was its vibe. I saw the tweets coming
in from EmberConf this March and <a href="http://reefpoints.dockyard.com/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html">the post-conf blog posts</a>
about the awesome community and how one could feel the excitement that we are
building apps with a tool that is new and hot now but is probably going to be
the framework of choice for many in a few years. It is definitely a fascinating
world to live in.</p>

<p>I'll certainly be there at EmberFest 2015, so hopefully see you there!</p>
]]></content>
  </entry>
  
</feed>
