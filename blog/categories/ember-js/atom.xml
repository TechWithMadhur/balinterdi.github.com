<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2014-04-04T21:51:54+02:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[Balint Erdi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Observable path patterns in Ember]]></title>
    <link href="http://balinterdi.com/2014/03/26/property-path-patterns-in-ember-dot-js.html"/>
    <updated>2014-03-26T00:00:00+01:00</updated>
    <id>http://balinterdi.com/2014/03/26/property-path-patterns-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>Property paths are the heart and soul of Ember.js apps. You use them in
templates and you define dependencies for computed properties and observers
through property paths.</p>

<p>In this post, I concentrate on this latter and show you various ways of
setting up these dependencies through a practical example. There is a <a href="http://emberjs.com/guides/object-model/computed-properties-and-aggregate-data/">pretty good section in the guides</a>
about one path pattern. Here, I intend to cover more (all?) of them.</p>

<h2>Badges are back</h2>

<p>I am going to build on the badges "micro-app" that I had started to develop in
<a href="http://balinterdi.com/2014/03/19/ember-dot-js-getters-and-setters.html">my previous post about getters in setters</a>.</p>

<p>There are two minimal model classes, User and Badge:</p>

<p>```js
App.User  = Ember.Object.extend({
  name: ''
});</p>

<p>App.Badge = Ember.Object.extend({
  name: '',
  score: 0,
  unlocked: false
});
```</p>

<p>We also create a couple of instances to have some data to show and work with:</p>

<p>```js
var cory = App.User.create({ name: "Cory Filibuster" });</p>

<p>var rook = App.Badge.create({
  name: "R00k",
  score: 1,
  unlocked: true
});</p>

<p>var taciturn = App.Badge.create({
  name: "Taciturn",
  score: 10
});</p>

<p>var talkative = App.Badge.create({
  name: "Talkative",
  score: 100
});</p>

<p>var hemingway = App.Badge.create({
  name: "Hemingway",
  score: 1000
});
```</p>

<p>Our application looks like this initally:</p>

<p><img src="/images/posts/ember-property-paths/screenshot-2.png" alt="Initital state" /></p>

<h2>Simple property chain</h2>

<p>The simplest, non-aggregate property path is just a series of names,
connected by dots. This designates a property that you can arrive at by
walking the path, segment by segment, where each of them gets you to another
object until you finally reach the property.</p>

<p>(If a path is very long, you should probably think about the dependencies
between your objects and the structure of your code.)</p>

<p>You see that the profile panel has the user's first name as its header. The
property that gets displayed there can be defined by such a path:</p>

<p>```js
App.IndexController = Ember.ArrayController.extend({
  (...)
  firstName: function() {</p>

<pre><code>return this.get('user.name').split(/\s+/)[0];
</code></pre>

<p>  }.property('user.name'),
});
```</p>

<p>This sets up a computed property (CP) that will be recomputed whenever
<code>user.name</code> changes. The arguments to the <code>property</code> call are called the dependent
keys of the CP and you can pass as many as you would like (although, thanks to
the various property path patterns, you will rarely need a lot).</p>

<p>Now, whenever the name property of the <code>user</code> property on the controller
changes, <code>firstName</code> is recomputed and this change gets propagated to all the
instances where <code>firstName</code> is used (e.g in the header of the panel).</p>

<p>Above that, the <code>user.name</code> key also triggers a change if the <code>user</code> object
itself changes. To see that, we turn to the thing you should only ever use for
demo purposes, the <code>__container__</code> object:</p>

<p><code>js
var maggie = App.User.create({ name: "Maggie Raindance" });
App.__container__.lookup('controller:index').set('user', maggie);
</code></p>

<p>You can see the name change in the header right away:</p>

<p><img src="/images/posts/ember-property-paths/screenshot-1.png" alt="User name changes" /></p>

<h2>Aggregate property paths</h2>

<p>On other occasions, a CP should depend on an array of items. Whenever something
gets added to or removed from the array, the property needs to be updated.</p>

<p>One example of that is the number of badges in the profile panel:</p>

<p>```js
App.IndexController = Ember.ArrayController.extend({
  (...)
  badgeCount: function() {</p>

<pre><code>return this.get('model').length;
</code></pre>

<p>  }.property('model.[]'),
});
```</p>

<p>The model here is the array of badges so when we add another one through the New
badge panel, <code>badgeCount</code> gets its new value:</p>

<p><img src="/images/posts/ember-property-paths/screenshot-3.png" alt="Badge count gets updated" /></p>

<p>What I said about the <code>user.name</code> path triggering an update when the user
changes also holds true here. If the array of badges was swapped out for another
array, it would trigger the recalculation of <code>badgeCount</code>.</p>

<h2>Aggregate property path with a specified property</h2>

<p>There are cases where the value of the CP becomes stale also when the items in
the dependent array stay the same, but a certain property of one of them
changes. Ember has a way to express this very succintly.</p>

<p>The example is the "Total score" in the profile panel:</p>

<p>```js
App.IndexController = Ember.ArrayController.extend({
  (...)
  totalScore: function() {</p>

<pre><code>var sum = function(s1, s2) { return s1 + s2; };
return this.get('model').getEach('score').reduce(sum);
</code></pre>

<p>  }.property('model.@each.score'),
});
```</p>

<p>This is the most inclusive of the patterns we have seen so far. It prompts an
update if the model changes, if any item is added or removed and also if the score of
any item changes. If we type this at the console:</p>

<p><code>js
App.__container__.lookup('controller:index').set('model.lastObject.score', 200);
</code></p>

<p>, then the total score changes accordingly, even though no item was inserted or
deleted:</p>

<p><img src="/images/posts/ember-property-paths/screenshot-4.png" alt="Total score" /></p>

<h2>Brace yourself</h2>

<p>To present the next pattern, let's assume that not all badge scores need to be
tallied to get the total but only the unlocked ones (which makes total sense).
So the dependent keys for <code>totalScore</code> needs to account for that. That's pretty
easy:</p>

<p>```js
App.IndexController = Ember.ArrayController.extend({
  (...)
  totalScore: function() {</p>

<pre><code>var sum = function(s1, s2) { return s1 + s2; };
return this.get('model').filterBy('unlocked').getEach('score').reduce(sum);
</code></pre>

<p>  }.property('model.@each.score', 'model.@each.unlocked'),
});
```</p>

<p>When the second badge is unlocked, the score jumps from 1 to 11 (and the number
of badges from 1 to 2), so the dependent keys work fine:</p>

<p><code>js
App.__container__.lookup('controller:index').get('model').objectAt(1).set('unlocked', true);
</code></p>

<p><img src="/images/posts/ember-property-paths/screenshot-3.png" alt="Unlocked property change triggers update" /></p>

<p>Starting with Ember 1.4.0, though, there is a more concise way to define the
same, called "property brace expansion". It works very similar to argument
expansion in the shell:</p>

<p>```js
App.IndexController = Ember.ArrayController.extend({
  (...)
  totalScore: function() {</p>

<pre><code>var sum = function(s1, s2) { return s1 + s2; };
return this.get('model').filterBy('unlocked').getEach('score').reduce(sum);
</code></pre>

<p>  }.property('model.@each.{score,unlocked}'),
});
```</p>

<p>This establishes that totalScore should be recomputed if <em>either</em> the <code>score</code>
<em>or</em> <code>unlocked</code> properties of any item in the model array changes.</p>

<p>An important restriction of property brace expansion is that the expansion part
can only be placed at the end of the path, so e.g <code>property('{foo,bar}.baz')</code>
will not have the desired effect.</p>

<h2>Computed property macros are the bee's knees</h2>

<p>Computed property macros have several advantages. They are very expressive, very
performant and perhaps most importantly more robust than typing out the property
path patterns by hand where a typo can cause a considerable amount of
head-scratching.</p>

<p>They are also a joy to work with and compose. In fact, all the CP definitions
above can be re-defined by using only macros:</p>

<p><code>js
App.IndexController = Ember.ArrayController.extend({
  (...)
  badgeCount: Ember.computed.alias('unlockedBadges.length'),
  unlockedBadges: Ember.computed.filterBy('model', 'unlocked'),
  unlockedScores: Ember.computed.mapBy('unlockedBadges', 'score'),
  totalScore: Ember.computed.sum('unlockedScores'),
});
</code></p>

<p>They have one big disadvantage, though. It is very hard to use them in a blog
post to explain property path patterns.</p>

<p>(The code presented here can be found as <a href="https://gist.github.com/balinterdi/9772966">a gist on Github</a>)</p>

<p>ps. Yes, <a href="https://www.youtube.com/watch?v=RtBbinpK5XI">that Maggie Raindance.</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js getters and setters]]></title>
    <link href="http://balinterdi.com/2014/03/19/ember-dot-js-getters-and-setters.html"/>
    <updated>2014-03-19T20:53:00+01:00</updated>
    <id>http://balinterdi.com/2014/03/19/ember-dot-js-getters-and-setters</id>
    <content type="html"><![CDATA[<p>To make all the magic fairy-dust sprinkling efficient, like auto-updating
templates and computed properties, Ember uses getters and setters instead of
accessing properties directly the javascript (and dare I say, the Angular) way. At
its most simplest form, it is <code>object.get(property)</code> and <code>object.set(property)</code>.</p>

<p>Howevers, it would not be Ember if we were not provided methods on top of these
primitives to make our hard lives as web developers simpler. In the following
post, I am going to show (some of) these methods through an example, so let's
go.</p>

<h2>Badges, badges, I want more badges</h2>

<p>I am certainly in favor of having badges in every application. Discourse is
actively discoursing <a href="https://meta.discourse.org/t/initial-discourse-badge-design-spec">their badge system</a> so I quickly
sketched out something to get ahead of them.</p>

<p>Let me just paste the code here and then use it to explain what the getter and
setter methods are good for.</p>

<p>You can quickly scroll through the below templates. They are mostly there so
that you get the whole picture. The stuff relevant to this discussion is found
in the javascript code.</p>

<p>{% highlight html %}
{% raw %}</p>

<script type="text/x-handlebars">
  <div class="container">
    <div class="panel panel-primary">
      <div class="panel-heading">
        <h3 class="panel-title">Your badges, sir/ma'am.</h3>
      </div>
      <div class="panel-body">
        {{outlet}}
      </div>
    </div>
  </div>
 </script>


<p>{% endraw %}
{% endhighlight %}</p>

<p>{% highlight html %}
{% raw %}</p>

<script type="text/x-handlebars" data-template-name="index">
  <ul class="list-group">
    {{#each badge in arrangedContent}}
      <li {{bind-attr class=":list-group-item badge.unlocked::locked"}}>
        {{badge.name}}
        <span class="badge">{{badge.score}}</span>
      </li>
    {{/each}}
    <li class="list-group-item">
      <em>Total:</em>
      <span class="pull-right">{{totalScore}}</span>
    </li>
  </ul>
  <div id="new-badge" class="row">
    <span class="col-xs-6">
      {{input class="input" type="text" placeholder="Badge name" value=name}}
    </span>
    <span class="col-xs-4">
      {{input class="small-input" type="text" placeholder="Score" value=score action="addBadge"}}
    </span>
    <span class="col-xs-2">
      <button class="btn btn-primary btn-sm pull-right" type="button"
          {{action "addBadge"}}>
          Add
      </button>
    </span>
  </div>
  <div id="unlock-all" class="row">
    <div class="col-xs-12">
      <button class="btn btn-danger btn-md" type="button"
        {{action "unlockAll"}}>
        Unlock all
      </button>
    </div>
  </div>
</script>


<p>{% endraw %}
{% endhighlight %}</p>

<p>First, the badge class is defined and some badges created so that we have something to work with:</p>

<p>```js
App = Ember.Application.create();</p>

<p>App.Badge = Ember.Object.extend({
  name: '',
  score: 0,
  unlocked: false
});</p>

<p>var rook = App.Badge.create({
  name: "R00k",
  score: 1,
  unlocked: true
});</p>

<p>var talkative = App.Badge.create({
  name: "Talkative",
  score: 10
});</p>

<p>var hemingway = App.Badge.create({
  name: "Hemingway",
  score: 1000
});</p>

<p>App.Router.map(function() {
});</p>

<p>App.IndexRoute = Ember.Route.extend({
  model: function() {</p>

<pre><code>return [rook, talkative, hemingway];
</code></pre>

<p>  }
});
```</p>

<h3>getProperties and setProperties</h3>

<p>The first couple of methods come handy when working with a single object but
multiple properties.</p>

<p>``` js
App.IndexController = Ember.ArrayController.extend({
  sortProperties: ['score'],
  sortAscending: true,</p>

<p>  (...)</p>

<p>  actions: {</p>

<pre><code>addBadge: function() {
  var newBadgeProperties = this.getProperties(['name', 'score']);
  newBadgeProperties.score = parseInt(newBadgeProperties.score, 10);

  var newBadge = App.Badge.create(newBadgeProperties);
  this.get('model').pushObject(newBadge);
  this.setProperties({ name: '', score: '' });
},

(...)
</code></pre>

<p>  }
});
```</p>

<p>On line 9, we want to create a new object with the values provided in the input
boxes (addBadge is the action that gets triggered when the Add button is
clicked, check the template). <code>getProperties</code> will create a javascript object
creating key-value pairs for the passed properties. So the above might e.g yield
<code>{ name: "Silent Bob", score: "2" }</code>. That gets directly passed in to create a
new badge object.</p>

<p>On line 14, we use the mutating pair of <code>getProperties</code> to reset the input
fields. Pretty straightforward.</p>

<h3>getEach and setEach</h3>

<p>Ember has us covered when we are working with an array and want to get (or set)
the same property of each item.</p>

<p>``` js
App.IndexController = Ember.ArrayController.extend({
  sortProperties: ['score'],
  sortAscending: true,</p>

<p>  totalScore: function() {</p>

<pre><code>var sum = function(s1, s2) { return s1 + s2; };
return this.get('model').getEach('score').reduce(sum);
</code></pre>

<p>  }.property('model.@each.score'),</p>

<p>  actions: {</p>

<pre><code>(...)

unlockAll: function() {
  this.get('model').setEach('unlocked', true);
}
</code></pre>

<p>  }
});
```</p>

<p>When the "Unlock all" button launches the <code>unlockAll</code> action, it calls <code>setEach</code>
on the badges (line 14), making all of them unlocked (you can verify this in the
demo by seeing the color of the badge names turn darker - their css class has
been updated). Another advange of <code>setEach</code> is that it guards against calling
<code>set</code> on null or undefined values.</p>

<p>You might know the reader counterpart, <code>getEach</code> as <code>mapBy</code>. It goes through the
array and makes another array by getting the passed property on each item. So in
the above example (line 7), we first collect the score for each badge and then
sum them up by way of reduction. (A shiny example of a non-distributed
map-reduce :) ).</p>

<h3>A macro can make nice code nicer</h3>

<p>I <a href="http://balinterdi.com/2014/03/05/sorting-arrays-in-ember-dot-js-by-various-criteria.html">have used a reduce computed macro</a> before to set up sorting.
I have gotten the hang of it and realized I could use another couple of them
to make the above code simpler (and more performant):</p>

<p>``` js
App.IndexController = Ember.ArrayController.extend({
  sortProperties: ['score'],
  sortAscending: true,</p>

<p>  scores: Ember.computed.mapBy('model', 'score'),
  totalScore: Ember.computed.sum('scores'),</p>

<p>  (...)
});
```</p>

<p>The problem is that the subject under discussion, <code>getEach</code> is gone now, so
pretend you did not see this.</p>

<p>Finally, here is the jsbin, should you decide to play around with it:</p>

<p><a class="jsbin-embed" href="http://emberjs.jsbin.com/qivah/4/embed?html,js,output">Getter and Setters</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<p>I hope some of that sticks and you'll write less "bare" gets and sets.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting arrays in Ember.js by various criteria]]></title>
    <link href="http://balinterdi.com/2014/03/05/sorting-arrays-in-ember-dot-js-by-various-criteria.html"/>
    <updated>2014-03-05T08:02:00+01:00</updated>
    <id>http://balinterdi.com/2014/03/05/sorting-arrays-in-ember-dot-js-by-various-criteria</id>
    <content type="html"><![CDATA[<p>I concluded <a href="http://balinterdi.com/2014/02/26/a-common-resource-route-pattern-in-ember-dot-js.html">the previous post on route refactoring</a> by saying
that the fact that the <code>artists.songs</code> route now has the songs as its model will
pay dividends in the future.</p>

<p>I will show one thing that becomes really easy this way and also one
less-known Ember feature that builds on top of that.</p>

<h2>Showing list items in a certain order</h2>

<p>Even with our superb routing, songs for an artist appear in random order,
differently at each load of the application. This is confusing and it is now
easy to remedy.</p>

<p>The controller backing the <code>artist.songs</code> template is now an ArrayController so
establishing a sort order is a piece of cake:</p>

<p><code>js
App.ArtistSongsController = Ember.ArrayController.extend({
  (...)
  sortAscending: false,
  sortProperties: ['rating', 'title'],
  (...)
});
</code></p>

<p>What I say with these sorting-related definitions is that I want songs to be
shown in descending order of first their ratings and then -should the rating be
the same- by title. That's all there is to it, those tunes are now aptly sorted:</p>

<p><img src="http://f.cl.ly/items/1v3C3Q241g1w3k1X2c04/Screen%20Shot%202014-03-03%20at%2019.39.01.png" alt="Ascending ordering" /></p>

<h2>Sorting by multiple properties, in different directions</h2>

<p>There is a slight deficiency in the above sorting API. It cannot sort multiple
properties if the sorting is to be done ascending for some properties and
descending for others. The <code>sortAscending</code> flag is "global" for the
whole <code>sortProperties</code> array.</p>

<p>Taking the above example, it is a perfectly valid request to have songs first
ordered in descending order of their rating and then in ascending order of their
title. But how can we do that?</p>

<h2>Reduce computed macros</h2>

<p>The <code>Ember.computed.sort</code> macro in the <a href="https://github.com/emberjs/ember.js/blob/v1.4.0/packages/ember-runtime/lib/computed/reduce_computed_macros.js"><code>reduce_computed_macros</code> package</a> provides
a clean way to do exactly that:</p>

<p><code>js
App.ArtistSongsController = Ember.ArrayController.extend({
  (...)
  sortProperties: ['rating:desc', 'title:asc'],
  sortedSongs: Ember.computed.sort('model', 'sortProperties'),
  (...)
});
</code></p>

<p>The API is so explicit it does not need any explanation. In order for the songs
to appear in the specified order, we now need to iterate through <code>sortedSongs</code>
so the <code>#each</code> in the template becomes <code>#each sortedSongs</code>.</p>

<p>Let's take a look at how it has changed the order of the songs:</p>

<p><img src="http://f.cl.ly/items/1D1R183h0h103O0p421O/Screen%20Shot%202014-03-03%20at%2019.58.24.png" alt="Perfect ordering" /></p>

<p>Perfect, I would say that is the ordering that makes most sense.</p>

<h2>Wait, it gets better still</h2>

<p>When first playing with <code>Ember.computed.sort</code>, my initial try was to set up
<code>sortedSongs</code> like that:</p>

<p><code>js
  sortedSongs: Ember.computed.sort('model', ['rating:desc', 'title:asc']),
</code></p>

<p>That, however, throws an error. Taking a look at the code and the tests, I
realized that the second argument needs to be a property on the same object the
sorting is defined on. This seems "over-engineered" at first but in fact opens
up further possibilities.</p>

<p>Under the hood, <code>Ember.computed.sort</code> sets up an observer not only to the array
being sorted but also to the sort properties. That way, when the sorting
criteria changes, the list is reordered and rerendered automatically. This makes
it possible for the criteria to be easily modified via user action.</p>

<p>To give you an example, I'll make a button set the rating to happen only by title,
in ascending alphabetical order:</p>

<p>{% highlight html %}
{% raw %}</p>

<script type="text/x-handlebars" data-template-name="artist/songs">
  {{#if canCreateSong}}
    <div class="list-group-item">
      (...)
      <button class="btn btn-link pull-right" {{action "sortBy" "title:asc"}}>Sort by title</button>
    </div>
  {{/if}}
  (...)
</script>


<p>{% endraw %}
{% endhighlight %}</p>

<p>The <code>sortBy</code> action handler sets the passed string as the value
for the <code>sortProperties</code> which will rearrange the list:</p>

<p>``` js
App.ArtistSongsController = Ember.ArrayController.extend({
  (...)
  sortProperties: ['rating:desc', 'title:asc'],
  sortedSongs: Ember.computed.sort('model', 'sortProperties'),</p>

<p>  actions: {</p>

<pre><code>sortBy: function(sortProperties) {
  this.set('sortProperties', [sortProperties]);
},
(...)
</code></pre>

<p>  }
});
```</p>

<p>Indeed when the link is clicked, the songs become ordered by title only:</p>

<p><img src="http://f.cl.ly/items/1H0v0w3C0u0Q2A2j451Z/Screen%20Shot%202014-03-03%20at%2021.12.00.png" alt="Ordering by only title" /></p>

<h2>Declarative sorting</h2>

<p>Let me finish by pointing out that this arrangment makes it possible to have
several actions that set (or modify) the ordering criteria, without having to
write a single line of code to implement the sorting itself.</p>

<p>You gotta love this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A common resource route pattern in Ember.js]]></title>
    <link href="http://balinterdi.com/2014/02/26/a-common-resource-route-pattern-in-ember-dot-js.html"/>
    <updated>2014-02-26T00:01:00+01:00</updated>
    <id>http://balinterdi.com/2014/02/26/a-common-resource-route-pattern-in-ember-dot-js</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p>A very common pattern in web applications, be them server- or client side, is
resource URLs. We might have a list of users that we want to show at <code>/users</code> and
then different pages related to the user which is encoded in the URL. These
might be e.g <code>/users/dave-hopkins/activity</code> and <code>/users/dave-hopkins/followers</code>.</p>

<p>The pattern is a top-level URL to list all the resource instances, and then
separate pages to display pieces of information regarding specific resource
instances.</p>

<h2>Artists and songs</h2>

<p>That's exactly what I did for the <a href="https://github.com/balinterdi/rock-and-roll/releases/tag/episode-7">the Rock &amp; Roll application</a>,
where the routes were defined as such:</p>

<p>``` js
App.Router.map(function() {
  this.resource('artists', function() {</p>

<pre><code>this.route('songs', { path: ':slug' });
</code></pre>

<p>  });
});
```</p>

<p>The simplest thing that works. However, the above is not ideal especially when
more pages (or views, if you will) are added below the <code>artists</code> resource route.
That's because the singular artist instance is encoded in the <code>songs</code> route, by
having its identifier (in this case, slug) in the path of that route.</p>

<p>Imagine we need to add additional info about each band. Just blindly extending
the above URL scheme, this would become:</p>

<p>``` js
App.Router.map(function() {
  this.resource('artists', function() {</p>

<pre><code>this.route('songs', { path: ':slug/songs' });
this.route('info',  { path: ':slug/info' });
</code></pre>

<p>  });
});
```</p>

<p>The cracks start to show. The artist for both the <code>artists.songs</code> and the
<code>artists.info</code> routes would have to be fetched in both routes, with identical
code. Nested routes -and how it lends itself to a nested UI- is truly
a masterpiece, a shining emerarld on Ember's crown. It would be a pity not to
take advantage of it.</p>

<h2>DRY up those routes</h2>

<p>So we established that the problem is having the artist "encoded" in all routes
below the top-level <code>artists</code> resource. The solution is consequently pretty
straightforward -this always seems to be the case in retrospective-, let's
extract the path segment that represents the artist:</p>

<p>``` js
App.Router.map(function() {
  this.resource('artists', function() {</p>

<pre><code>this.resource('artist', { path: ':slug' }, function() {
  this.route('songs');
});
</code></pre>

<p>  });
});
```</p>

<p>With the introduction of the <code>artist</code> resource, the duplication is gone, but we
are not done yet. First, we have to define the route and set up its model hook.
Second, since the "routing table" has changed, we'll have to adjust route names
and code that uses them. Since the naming conventions in Ember have the route
names as their basis, we'll probably have to change code in several places.</p>

<h2>Route changes</h2>

<p>Resource routes reset the routing namespace, so the route that corresponds to
the <code>artist</code> route name in the table is App.ArtistRoute:</p>

<p>``` js
App.ArtistRoute = Ember.Route.extend({
  model: function(params) {</p>

<pre><code>return Ember.RSVP.Promise(function(resolve, reject) {
  App.Adapter.ajax('/artists/' + params.slug).then(function(data) {
    resolve(App.Artist.createRecord(data));
  }, function(error) {
    reject(error);
  });
});
</code></pre>

<p>  }
});
```</p>

<p>That is exactly what we had for <code>App.ArtistsSongsRoute</code> in the previous version,
which makes sense. The artist is now fetched one route level higher.</p>

<p>For simple, non-resource routes, the name of the route is the name of the
resource route above (if it exists) plus the name of the route itself. In this
case, the route name is <code>artist.songs</code> which gets resolved as
<code>App.ArtistSongsRoute</code>):</p>

<p>``` js
App.ArtistSongsRoute = Ember.Route.extend({
  model: function(params) {</p>

<pre><code>return this.modelFor('artist').get('songs');
</code></pre>

<p>  },</p>

<p>  setupController: function(controller, model) {</p>

<pre><code>this._super(controller, model);
controller.set('artist', this.modelFor('artist'));
</code></pre>

<p>  },
  (...)
});
```</p>

<p>The first interesting thing is <code>modelFor</code>. It gets the model for another,
already resolved route. In Ember route models are resolved stepping down
from the top-level application route. That means that at this point we can be
certain that the <code>artist</code> route already has its model, the artist instance
resolved.</p>

<p>The model of this route is simply the songs belonging to that artist.</p>

<p>The other interesting bit is <code>setupController</code>. We have already <a href="http://balinterdi.com/2014/01/14/how-real-time-updates-work-in-discourse.html">come across this
hook before</a>; it is the place to do additional
setup -above fetching the model and deciding which template to render- for the
controller. Since we'll want to display artist-related data in the template, we
store it in an <code>artist</code> property and we make sure to call <code>_super</code>, the
implementation of this hook in <code>Ember.Route</code>, that sets the controller's model
property to the model argument in this method.</p>

<h2>Templates &amp; controllers</h2>

<p>The mechanical part of the routing update is to replace all occurrences of
the <code>artists.songs</code> route name to <code>artist.songs</code>.</p>

<p>What deserves more attention is that the controller for <code>artist.songs</code> now has
the songs of the artist as its model, not the artist itself. That means that we
should adjust the controller type it extends:</p>

<p>```js
App.ArtistSongsController = Ember.ArrayController.extend({
  artist: null,</p>

<p>  newSongPlaceholder: function() {</p>

<pre><code>return 'New ' + this.get('artist.name') + ' song';
</code></pre>

<p>  }.property('artist.name'),</p>

<p>  songCreationStarted: false,
  canCreateSong: function() {</p>

<pre><code>return this.get('songCreationStarted') || this.get('length');
</code></pre>

<p>  }.property('songCreationStarted', 'length'),</p>

<p>  (...)
});
```</p>

<p>All changes are made necessary by the model change. Properties of the artist now
need to be prefixed by <code>artist</code> (e.g <code>name</code> => <code>artist.name</code>) while properties of the
songs no longer need to have the <code>songs</code> prefix since it is the model (e.g
<code>songs.length</code> => <code>length</code>).</p>

<p>This also holds true of the template. To give an example, rendering the
stars for each song can becomes more concise:</p>

<p>{% highlight html %}
{% raw %}</p>

<script type="text/x-handlebars" data-template-name="artist/songs">
  (...)
  {{#each}}
    <div class="list-group-item">
      {{title}}
      {{star-rating item=this rating=rating maxRating=5 setAction="setRating"}}
    </div>
  {{else}}
  (...)
</script>


<p>{% endraw %}
{% endhighlight %}</p>

<p>The #each helper, without parameters, loops through the items in the model of the
template, in our case, the songs, which is exactly what we want.</p>

<p>That wraps up our route sanitizaion. In the next post, we will take advantage of
the benefit that the <code>songs</code> route now has the artist's songs as its model.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making an Ember.js component more reusable]]></title>
    <link href="http://balinterdi.com/2014/02/12/making-an-emberjs-component-more-reusable.html"/>
    <updated>2014-02-12T07:54:00+01:00</updated>
    <id>http://balinterdi.com/2014/02/12/making-an-emberjs-component-more-reusable</id>
    <content type="html"><![CDATA[<h2>Intro</h2>

<p><a href="/2014/02/05/convert-a-view-into-a-component.html">We saw how to turn the star-rating view into a component</a> to
make it more reusable, and less reliant on its context. Everything that the
component needs to do its job had to be passed in, and that is enough for it to
be reusable not just across screens in your application but also across
different applications.  Or is it? Let's take a look at the component code
again:</p>

<p>``` js
App.StarRatingComponent = Ember.Component.extend({
  classNames: ['rating-panel'],</p>

<p>  fullStars: Ember.computed.alias('item.rating'),
  numStars:  Ember.computed.alias('maxRating'),
  (...)
  actions: {</p>

<pre><code>setRating: function() {
  var newRating = parseInt($(event.target).attr('data-rating'), 10);
  this.get('item').set('rating', newRating);
  this.sendAction('setAction', this.get('item'));
}
</code></pre>

<p>  }
```</p>

<p>Is something assumed about the object whose rating our component will display
and set? I'll give you some time to think about it.</p>

<h2>A glove that fits all hands</h2>

<p>What we assume is that the <code>item</code> that gets passed in has a <code>rating</code> property.
If we really want our component to be used in all Ember applications (why not
reach for the <em>stars</em>?), then this should not be an assumption that we make.
After all, a player in a hockey team might have a <code>score</code> property and not
rating. We could get around that by aliasing <code>score</code> to <code>rating</code> in our
controller:</p>

<p><code>js
App.PlayerController = Ember.ObjectController.extend({
  rating: Ember.computed.alias('score');
});
</code></p>

<p>However, this is inconvenient for the app developer and is only necessary
because the star-rating component is not flexible enough. It's as if I had to
reshape my hand to fit the glove.</p>

<p>So let's make it take the property name as a parameter, too:</p>

<p>{% highlight html %}
{% raw %}</p>

<script type="text/x-handlebars" data-template-name="artists/songs">
  {{#each songs}}
    <div class="list-group-item">
      {{title}}
      {{star-rating item=this ratingProperty="rating" maxRating=5 setAction="setRating"}}
    </div>
  (...)
  {{/each}}
</script>


<p>{% endraw %}
{% endhighlight %}</p>

<p>That was easy, now comes the harder part, the component code. Previously, the
fullStars property of the component was just an alias for <code>item.rating</code>. We
can't do that anymore, since the name of the rating property is only known when
the component is used in a template, and can thus differ in each case.</p>

<p>Did Ember let us down this time? Before, it had kept the fullStars property of
our component in sync with the item's rating. We just sat back and took sips of
our mojito. Now, when the going gets tough, we are on our own.</p>

<p>Well, not really. We are doing some advanced stuff so it's no surprise that we
have to use advanced tools that are not needed in the majority of cases. Ember
has nice lower-level functions to support us.</p>

<p>We have to set up the property synchronization ourselves but it sounds scarier
than it is. We just have to watch when the item's rating (score, points,
etc.) property changes and set the fullStars property to that value:</p>

<p>```js
App.StarRatingComponent = Ember.Component.extend({
  classNames: ['rating-panel'],</p>

<p>  numStars:  Ember.computed.alias('maxRating'),
  fullStars: null,</p>

<p>  didInsertElement: function() {</p>

<pre><code>var property = this.get('ratingProperty');
this.set('fullStars', this.get('item').get(property));
Ember.addObserver(this.get('item'), property, this, this.ratingPropertyDidChange);
</code></pre>

<p>  },</p>

<p>  willDestroyElement: function() {</p>

<pre><code>var property = this.get('ratingProperty');
Ember.removeObserver(this.get('item'), property, this.ratingPropertyDidChange);
</code></pre>

<p>  },</p>

<p>  ratingPropertyDidChange: function(item, ratingProperty) {</p>

<pre><code>this.set('fullStars', item.get(ratingProperty));
</code></pre>

<p>  },
  (...)
}
```</p>

<p>There are several things that might be new to you, dear reader, so let me go
through each of them.</p>

<p>The most important thing is the call to <a href="http://emberjs.com/api/classes/Ember.Observable.html#method_addObserver">'Ember.addObserver(object, property,
context, function)'</a>. Whenever <code>property</code> of <code>object</code> changes, it
calls <code>function</code> with <code>context</code> as its <code>this</code>. (Providing a <code>context</code> is
optional).</p>

<p>The observer function (<code>ratingPropertyDidChange</code>) gets the object that was
changed as its first parameter and the property name that was changed. In this
case, it does not have to do anything else but set the <code>fullStars</code> property of
the component to the new value of the item's rating property.</p>

<p>The observer is set up in the <code>didInsertElement</code> function. It is a handy
lifecycle-event for Ember views (and thus components) which gets called after
the view has been inserted into the DOM. This time, we don't need it to be in
the DOM already but it serves as a convenient way to add the observer.</p>

<p>Lastly, since the observer was added manually, it has to be torn down manually,
too, when it is no longer needed. We do this in <code>willDestroyElement</code>, another
view lifecycle event which gets called before the element gets removed from the
DOM. Also, the code comments mention the following about <code>willDestroyElement</code>:</p>

<pre><code>If you write a `willDestroyElement()` handler, you can assume that your
`didInsertElement()` handler was called earlier for the same element.
</code></pre>

<p>This makes <code>didInsertElement</code> - <code>willDestroyElement</code> a perfect pair for manually
setting up and tearing down event handlers (or observers) even if no DOM
manipulation has to be carried out.</p>

<p>I've made a jsbin to show how the star-rating component can now be used with
a <code>score</code> property while the component code stays identical:</p>

<p><a class="jsbin-embed" href="http://emberjs.jsbin.com/sokov/4/embed?html,js,output">Reusable Star Rating component</a><script src="http://static.jsbin.com/js/embed.js"></script></p>

<h3>Conclusion</h3>

<p>We now have a star-rating component that is general enough to be used in all
contexts. Go ahead and use it in your Ember app and let me know if I missed
something.</p>

<p>Actually, there are a couple of featurettes -unrelated to its flexibility, as
far as I see- we can add which I might come back to.</p>
]]></content>
  </entry>
  
</feed>
