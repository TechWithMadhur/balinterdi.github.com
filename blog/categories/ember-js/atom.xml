<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2016-11-01T14:34:48+01:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Continuous Visual Integration for Ember apps]]></title>
    <link href="http://balinterdi.com/2016/10/17/continuous-visual-integration-for-ember-apps.html"/>
    <updated>2016-10-17T19:15:00+02:00</updated>
    <id>http://balinterdi.com/2016/10/17/continuous-visual-integration-for-ember-apps</id>
    <content type="html"><![CDATA[<p>I recently watched Mike Fotinakis's presentation at the San Francisco Ember
meetup, <a href="https://youtu.be/iECnXK9EqA4">Continuous Visual Integration with Ember</a>,
and I've become really enthusiastic about visual diffs, and Percy.</p>

<p>It's really worth the time and I highly recommend to watch it. I could say
"watch it now and then come back" but it's a 50-minute long video while this
post takes 5 minutes to read, so I recommend to do it the other way around: read
this post first and then go and watch the presentation where he goes into more
details on what visual diffs and CI are, how Percy works and answers to
questions from the audience.</p>

<p>Ready? Cool. Start the timer and let's go.</p>

<h3>So what is continuous visual integration?</h3>

<p>I will give you the high-level definition and rationale of visual diffs
and continuous visual integration as the post otherwise wouldn't make sense.</p>

<p>When we change code, the intangible stuff apps are made of, we risk breaking it.
To prevent this, we write tests that guard against regression (a nice way of
saying breaking stuff) and do code reviews where someone goes over the code
diffs, and potentially after a series of edits, confirms it.</p>

<p>However, that's just the code part. There are other ways to break a web
application, a major one among them is for the app to look differently than
before, in an unintended way. The background color of a button might change, a
link could have become hidden, or a css file could no longer be downloaded
which all lead to a degraded visual experience for visitors of the app.</p>

<p>Our (textual) tests could pass with flying colors and yet the users of the app
could be running away screaming from our site. Visual diffs guard against that
scenario by showing a visual diff, what certain scenarios looked before and
after the code changes under test.</p>

<h3>Visual diffs as part of the review process</h3>

<p>The idea is to have screenshots made at certain points in our user flows and
have a review process that approves the changes, just as we do for code.</p>

<p>To automate the process, we integrate the generation of visual diffing in the
automated testing process. This will produce the "before" and "after"
screenshots that will be used to generate the diffs. Let's see how this is done
in practice.</p>

<h3>Making all this a breeze with Percy</h3>

<p>Percy is a visual diffing tool that automates all of this and integrates
smoothly into the Github pull request process. To get started with Percy,
install the Ember addon:</p>

<pre><code>$ ember install ember-percy
</code></pre>

<p>If you use Mirage for your tests, like I do, make sure to define a passthrough
rule for Percy on top of your Mirage config, before any other rules (see
<a href="https://percy.io/docs/clients/javascript/ember">the docs</a>):</p>

<p><code>js
// mirage/config.js
export default function() {
  this.passthrough('/_percy/**');
  (...)
})
</code></p>

<p><strong>NOTE</strong> Starting from ember-percy version 1.2.4, you no longer need to do the
above as ember-percy doesn't use Mirage anymore.</p>

<p>To demo how the development flow changes to accommodate visual diffing, I prepared <a href="https://github.com/balinterdi/rarwe-demo/pull/10">a PR to make a dropdown</a>
in the <a href="https://github.com/balinterdi/rarwe-demo">Rock and Roll with Ember demo</a> nicer.</p>

<p>Before implementing the change, I wrote a test that verifies if the songs for a
particular band are listed correctly:</p>

<p>```js
// tests/acceptance/songs-test.js
import Ember from 'ember';
import { test } from 'qunit';</p>

<p>(...)</p>

<p>test('List songs for a band', function(assert) {
  visit('/bands');
  click('a:contains("Tool")');
  percySnapshot('list-songs-for-band');</p>

<p>  andThen(function() {</p>

<pre><code>assert.equal(Ember.$('.song').length, 3, "All songs for the selected band are displayed");
assert.equal(Ember.$('.song:contains("46 &amp; 2")').length, 1, "The first song is displayed");
</code></pre>

<p>  });
});
```</p>

<p>The thing to note here is <code>percySnapshot</code>. If Percy is set up in the environment
where the test runs, it generates a screenshot identified by the name we pass it
(or auto-generates one). To set up Percy, the <code>PERCY_TOKEN</code> and <code>PERCY_PROJECT</code>
env vars need to be set in the CI tool of your choice. <a href="https://percy.io/docs">The Percy
docs</a> explain how.</p>

<p>Once we have a percySnapshot, the next time we push and our CI builds the
project, Percy will have a new snapshot for us:</p>

<p><img src="/images/posts/visual-ci-with-percy/percy-first-screenshot.png" alt="First screenshot - No diff yet" /></p>

<p>We can now implement our feature on a branch and create a pull request for it on
Github. As you can see on the following screenshot, approving the visual diffs
is now part of the flow:</p>

<p><img src="/images/posts/visual-ci-with-percy/github-pr-before-percy-approval.png" alt="Github before Percy approval" /></p>

<p>Clicking "Details" takes us to the visual diffs where we must explicilty approve
the changes:</p>

<p><img src="/images/posts/visual-ci-with-percy/percy-visual-diff.png" alt="Percy visual diffs" /></p>

<p>Once the visual diffs are approved, the PR is all green and we can lean back in
our chairs and merge it, safe in the knowledge we did not visually break the
app.</p>

<p><img src="/images/posts/visual-ci-with-percy/github-pr-after-percy-approval.png" alt="Github after Percy approval" /></p>

<p>Just as with "normal" tests, the more snapshots we have, the higher the chance
we did not introduce any regressions with our latest changes. Mike recommends a
"breadth first" approach, making screenshots from tests that verify different
scenarios instead of a "depth first" approach, creating several screenshots for
the same scenario.</p>

<h3>Closing words</h3>

<p>I'm all sold on visual diffing and I think there is tremendous value in securing
our apps this way.</p>

<p>I encourage you to <a href="https://youtu.be/iECnXK9EqA4">watch Mike's presentation</a>
and <a href="https://percy.io/">sign up for Percy</a> to become a better steward of your applications.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.8 is released]]></title>
    <link href="http://balinterdi.com/2016/09/30/rock-and-roll-with-ember-dot-js-2-dot-8-is-released.html"/>
    <updated>2016-09-30T21:22:00+02:00</updated>
    <id>http://balinterdi.com/2016/09/30/rock-and-roll-with-ember-dot-js-2-dot-8-is-released</id>
    <content type="html"><![CDATA[<p>Yesterday I published an updated version of the <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js book</a>.
The app now runs on 2.8 (Ember CLI, Ember and Ember Data) and, as usual, there are a few other changes.</p>

<p>The biggest of these was updating the Deployment chapter.
<a href="https://www.pagefronthq.com/">PageFront</a> seems defunct so I replaced it with
<a href="https://surge.sh">Surge</a>. Above that I also updated the section on deploying
(to S3) with ember-cli-deploy as things have changed quite a bit.</p>

<p>You can check out the full list of changes <a href="https://github.com/balinterdi/rarwe-issues/milestone/16?closed=1">here</a>
or the book itself <a href="http://rockandrollwithemberjs.com">here.</a></p>

<hr />

<p><strong>PSA</strong>: Ember 2.9 will bring the long-awaited new rendering engine, <a href="http://emberjs.com/blog/2016/09/08/ember-2-8-and-2-9-beta-released.html">Glimmer 2</a>!</p>

<p>I already went ahead and updated the app to 2.9.beta to give it a whirl.</p>

<p>The results were pretty jaw-dropping:</p>

<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">My app.js size after upgrading the Rock and Roll <a href="https://twitter.com/hashtag/Ember?src=hash">#Ember</a> app to use Glimmer 2 (so from 2.8.1 to 2.9.0-beta.2) went from 233K to 79K ðŸ˜®</p>&mdash; Balint Erdi (@baaz) <a href="https://twitter.com/baaz/status/776872893577822208">September 16, 2016</a></blockquote>


<script async src="http://balinterdi.com//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>I encourage you to <a href="http://emberjs.com/builds/#/beta">try switching your app to Glimmer 2</a> and see if you encounter any problems.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.7 is released]]></title>
    <link href="http://balinterdi.com/2016/08/24/rock-and-roll-with-ember-dot-js-2-dot-7-is-released.html"/>
    <updated>2016-08-24T20:50:00+02:00</updated>
    <id>http://balinterdi.com/2016/08/24/rock-and-roll-with-ember-dot-js-2-dot-7-is-released</id>
    <content type="html"><![CDATA[<p>Today marks the release of the <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js book</a>,
version 2.7, which means the app built in the book now runs on Ember 2.7 (and uses Ember CLI 2.7).</p>

<p>There is a number of other small fixes, the full list of which you can see
<a href="https://github.com/balinterdi/rarwe-issues/milestone/15?closed=1">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Dependency Injection to Write Better Tests]]></title>
    <link href="http://balinterdi.com/2016/08/11/using-dependency-injection-to-write-better-tests.html"/>
    <updated>2016-08-11T09:13:00+02:00</updated>
    <id>http://balinterdi.com/2016/08/11/using-dependency-injection-to-write-better-tests</id>
    <content type="html"><![CDATA[<p>Testing is given much emphasis in the Ember.js community, and testing tools have
showed steady progress to reduce the cost of writing tests of all types.</p>

<p>Lauren Tan wrote <a href="https://emberway.io/component-dependency-injection-in-ember-js-a46a39a5d30a#.45qfbv52x">a great post</a>
about how Dependency Injection (DI) can be used to decouple a parent component
from the internals of its child components. One of the gains of doing so is that
the parent component becomes more focused and thus easier to test.</p>

<p>In this post, I'm doing something similar, although much simpler. I want to show
you how to use DI in a simple helper function to make it easier to test.</p>

<h3>Just your ordinary, run-of-the-mill function</h3>

<p>Although the helper is an Ember (template) helper, the concepts could be very
easily transferred to other frameworks, libraries and even languages.</p>

<p>I recently had to modify a <code>normalizeText</code> helper function that looked
like this:</p>

<p>```js
// tests/unit/helpers/normalize-text-test.js
import Ember from 'ember';</p>

<p>export function normalizeText([text]) {
  let normalizedEOLs = text.trim().replace(/(?:\r\n|\r|\n)/g, '</p><p>');
  let noEmptyParagraphs = normalizedEOLs.replace(/(<p>&lt;\/p>)/g, '');
  return Ember.String.htmlSafe("<p>" + noEmptyParagraphs + "</p>");
}
```</p>

<p>(I realize the above code does not handle a text value of <code>undefined</code> or <code>null</code>.
The real code does but I want to keep the code examples to the minimum necessary
to get my point across.)</p>

<h3>Comparing objects to objects</h3>

<p>Its test was quite simple and straightforward:</p>

<p>```js
// tests/unit/helpers/normalize-text-test.js
import { normalizeText } from '../../../helpers/normalize-text';
import { module, test } from 'qunit';</p>

<p>module('Unit | Helper | normalize-text');</p>

<p>test('it works', function(assert) {
  let normalizedText = normalizeText(["The brown fox\r\njumped over the quick rabbit.\n"]);
  assert.equal(normalizedText, "<p>The brown fox</p><p>jumped over the quick rabbit.</p>");
});
```</p>

<p>The problem with that test is that we compare two <code>Handlebars.SafeString</code>
instances (returned by <code>Ember.String.htmlSafe</code>) which are different even if
the strings they wrap, their value, is the same:</p>

<p><code>
let s1 = Ember.String.htmlSafe("sid transit gloria mundi");
let s2 = Ember.String.htmlSafe("sid transit gloria mundi");
s1 === s2 // =&gt; false
</code></p>

<p>We're, however, interested in the equality of the strings. If only there was a
way to replace that pesky <code>Ember.String.htmlSafe</code> call from the call site...</p>

<h3>DI to the rescue</h3>

<p>This is exactly what Dependency Injection can help us do. Instead of hard-coding
that "sanitizer" function dependency, the function could take it as a parameter
so that callers could inject it. Usually DI examples use (and thus inject) class
names or object instances but it is important to realize that the injected param
could be very "primitive", like a simple function.</p>

<p>So here is how I rewrote the function:</p>

<p>```js
// app/helpers/normalize-text.js
import Ember from 'ember';</p>

<p>export function normalizeText([text], params={}) {
  let { sanitizer=Ember.String.htmlSafe } = params;
  let normalizedEOLs = text.trim().replace(/(?:\r\n|\r|\n)/g, '</p><p>');
  let noEmptyParagraphs = normalizedEOLs.replace(/(<p>&lt;\/p>)/g, '');
  return sanitizer("<p>" + noEmptyParagraphs + "</p>");
}</p>

<p>export default Ember.Helper.helper(normalizeText);
```</p>

<p>Notice how easy ES2015 destructuring makes the assignment of the sanitizer
function:</p>

<p><code>js
let { sanitizer=Ember.String.htmlSafe } = params;
</code></p>

<p>If no <code>sanitizer</code> key was present in <code>params</code>, then it will have a value of
<code>Ember.String.htmlSafe</code>, the default behavior.</p>

<p>The call from the test can now override the default behavior of sending the
normalized text through <code>Ember.String.htmlSafe</code> by passing in a "no-op"
sanitizer function:</p>

<p>```js
// tests/unit/helpers/normalize-text-test.js
import { normalizeText } from '../../../helpers/normalize-text';
import { module, test } from 'qunit';</p>

<p>function leaveAsIs(text) {
  return text;
}</p>

<p>module('Unit | Helper | normalize-text');</p>

<p>test('it works', function(assert) {
  let normalizedText = normalizeText(["The brown fox\r\njumped over the quick rabbit.\n"], { sanitizer: leaveAsIs });
  assert.equal(normalizedText, "<p>The brown fox</p><p>jumped over the quick rabbit.</p>");
});
```</p>

<p>We're now comparing simple strings which place nicely with <code>assert.equal</code> (with
<code>===</code>), and our test now passes.</p>

<h3>Non-testing benefits</h3>

<p>Code modifications introduced for the sake of testing usually also improve the
non-testing aspect. Here, we made it possible to pass any function before we
return the normalized text. We could, for example, use this to replace the <code>&lt;p&gt;</code>
tags with <code>&lt;span&gt;</code>s, if we so wish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js 2.6 is released]]></title>
    <link href="http://balinterdi.com/2016/07/07/rock-and-roll-with-ember-dot-js-2-dot-6-is-released.html"/>
    <updated>2016-07-07T22:21:00+02:00</updated>
    <id>http://balinterdi.com/2016/07/07/rock-and-roll-with-ember-dot-js-2-dot-6-is-released</id>
    <content type="html"><![CDATA[<p>With some delay, but I just sent an update to all of the Rock and Roll with
Ember.js customers. The book brings the app in sync with Ember, Ember Data and
Ember CLI 2.6. Among a few other improvments it:</p>

<ul>
<li>Makes sure the new Ember welcome page is removed before generating the
application template: <a href="https://github.com/balinterdi/rarwe-issues/issues/196">#196</a></li>
<li>Adds a version string to the book's title and also in the Preface so that the
reader knows whether they are reading the latest version: <a href="https://github.com/balinterdi/rarwe-issues/issues/174">#174</a></li>
</ul>


<p>The list of all accomplished things can be seen <a href="https://github.com/balinterdi/rarwe-issues/milestone/14?closed=1">here</a></p>
]]></content>
  </entry>
  
</feed>
