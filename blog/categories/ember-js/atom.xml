<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Balint Erdi]]></title>
  <link href="http://balinterdi.com/blog/categories/ember-js/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2014-10-10T15:45:06+02:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[Balint Erdi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reminiscing about EmberFest 2014]]></title>
    <link href="http://balinterdi.com/2014/09/05/reminiscing-about-emberfest-2014.html"/>
    <updated>2014-09-05T09:55:00+02:00</updated>
    <id>http://balinterdi.com/2014/09/05/reminiscing-about-emberfest-2014</id>
    <content type="html"><![CDATA[<p><a href="https://emberfest.eu">EmberFest 2014</a> ended a week ago and I already feel nostalgic. It
was a great event with great people and you could feel the excitement about
Ember in the air and in all conversations. It was almost single-handedly
organized by <a href="https://haagen-software.no">Joachim Haagen-Skeie</a> for which he deserves huge kudos.</p>

<p>It was really great to associate real people with twitter avatars and have
fascinating conversations about various topics that included the Ember
Inspector, the difficulties in building a build tool and even Firefox OS.</p>

<h3>The functional paradigm making a headway into Emberland</h3>

<p>One thing that struck me about Ember initially is that it seems to rely heavily
on (shared) state. Some (most?) of that is inevitable given Ember being a
performant framework that runs in the browser and is written in Javascript.
None of these facilitates ditching (or minimizing) state and go with a
functional, stateless approach.</p>

<p>On the other hand, I really came to cherish the <a href="http://www.infoq.com/presentations/Simple-Made-Easy">simplicity</a> of the
functional paradigm and have been gravitating towards languages that allow this
(Clojure was, and still is, <a href="http://balinterdi.com/2013/06/19/the-appeal-of-one-paradigm-languages.html">my favorite</a>). So I added a mental
note about my two favorite things being at such a great distance from each other
and moved on.</p>

<p>One theme of the conference and the hallway talks, however, is how Ember
embraces the functional, immutable approach where it makes sense to. It might
have something to do with my confirmation bias, but let me cite the examples
nevertheless. <a href="https://twitter.com/tchak13">Paul Chavard</a> had a talk on his using immutable data
structures in Ember. <a href="http://www.solitr.com/blog/">Jo Liss</a> revealed how Broccoli uses a
"rebuild-from-scratch" approach instead of trying to find out which assets to
rebuild at each modification. Finally, Alex Matchneer, aka. machty, prolific
Ember and router.js contributor had <a href="https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/edit#slide=id.p">a presentation on React vs.  Ember</a>
at EmberNYC which you should go read. His <a href="https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/edit#slide=id.g380053cce_1786">last slide</a> has a bullet-point
that states: "Don't be surprised if Ember adopts DOM-diffing".</p>

<p>It would be an understatement if I said I'm happy to see the functional world
coming to Ember.</p>

<h3>Promises</h3>

<p>I had a talk at the conference called "Don't call me back - How Ember uses
promises and how you can, too". As it usually happens, in doing research for the
talk, I learned a lot not just about promises but about other topics, too. This
time, it was the (in)famous run loop I stumbled across on several
occasions so I am really happy I know a lot more about that beast now. You can
find the slides of my presentation below.</p>

<script async class="speakerdeck-embed" data-slide="10"
data-id="47ee01e011b60132c86e02e2e0c65448" data-ratio="1.33333333333333"
src="http://balinterdi.com//speakerdeck.com/assets/embed.js"></script>


<p>I might even do another talk "How Ember uses the run loop and how you should
probably not", or something to this effect.</p>

<h3>EmberFest 2015</h3>

<p>The greatest thing about EmberFest was its vibe. I saw the tweets coming
in from EmberConf this March and <a href="http://reefpoints.dockyard.com/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html">the post-conf blog posts</a>
about the awesome community and how one could feel the excitement that we are
building apps with a tool that is new and hot now but is probably going to be
the framework of choice for many in a few years. It is definitely a fascinating
world to live in.</p>

<p>I'll certainly be there at EmberFest 2015, so hopefully see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember gotcha: Controllers are singletons]]></title>
    <link href="http://balinterdi.com/2014/06/26/ember-gotcha-controllers-are-singletons.html"/>
    <updated>2014-06-26T08:25:00+02:00</updated>
    <id>http://balinterdi.com/2014/06/26/ember-gotcha-controllers-are-singletons</id>
    <content type="html"><![CDATA[<p>There is a somewhat subtle bug in the current version of the Rock &amp; Roll with
Ember app. If you start to create a song for an artist that does not have one
and then switch to another one, the song creation process does not need to be
restarted by clicking on the "Why don't you create one?" link. Also, if you've
already partially inputted the name of the song for the first one, it stays
there for the second artist:</p>

<p><img src="/images/posts/singleton-controllers/start-song-creation-for-radiohead.png" alt="Start creating a song for Radiohead" />
<img src="/images/posts/singleton-controllers/new-song-for-radiohead.png" alt="Input Karma for Radiohead" />
<img src="/images/posts/singleton-controllers/new-song-for-rhcp.png" alt="Observe song title stays for Red Hot Chili Peppers" /></p>

<p>The above behavior was brought to my attention by <a href="https://twitter.com/davidlormor">David</a>
<a href="http://davidlormor.com">Lormor</a>, an astute reader and watcher of my screencasts.</p>

<p>In some circumstances it is desirable for the result of some user interaction to
linger between route transitions but in other cases it is not. I put the
current example firmly in the latter camp and thus consider the above a bug.</p>

<p>Let me explain what causes this behavior and then provide a simple solution to fix it.</p>

<h3>Repeat after me: controllers are singletons</h3>

<p>Controllers in Ember are singletons. Controllers in Ember are singletons.
Controllers in Ember are singletons.</p>

<p>When the user leaves a page and goes to another one, the controller is not
torn down. It lives on, keeping its properties.</p>

<p>This makes total sense for a framework that aims to be a tool for creating
long-lived, rich-client side applications but is something to watch out for
when you develop Ember applications.</p>

<p>If you have a long background in back-end development, like yours truly,
it is especially easy to fall prey to this, as you could see.</p>

<h3>Same controller, different model</h3>

<p>Initially, when the applicaiton is loaded, the <code>songCreationStarted</code> property
of the controller is set to false. When the user clicks the "create one" in the
"Why don't you create one?" blurb, it is set to true and thus the text input
field appears to allow adding a new song.</p>

<p>Now comes the tricky part. If the user then decides to go to a different artist,
she clicks the name of another artist in the sidebar. What happens? A transition
is made from one <code>ArtistSongsRoute</code> to another <code>ArtistSongsRoute</code>. The artist
is going to be different but the same <code>ArtistSongsController</code> is used.</p>

<p>To prove my point, here are two screenshots of the Ember Inspector's sidebar.
The first one is before, the second one is after the transition between
<code>/artists/radiohead/songs</code> and <code>/artists/red-hot-chili-peppers/songs</code>:</p>

<p><img src="/images/posts/singleton-controllers/ember-inspector-radiohead-songs.png" alt="Ember Inspector - Radiohead songs" />
<img src="/images/posts/singleton-controllers/ember-inspector-rhcp-songs.png" alt="Ember Inspector - RHCP songs" /></p>

<p>You can see that the controller is the same Ember object but the value of the <code>artist</code> property changes.</p>

<h3>Understanding the problem</h3>

<p>When the transition is made between the two artists, the artist object is
changed and consequently any data bound to the artist (and the <code>artist</code> property
of the <code>ArtistSongs</code> controller) is going to be rerendered but, since the
controller instance is not changed, unrelated data will stay unchanged on
screen.</p>

<p>What happens in the code? If you take a look at the template, you see that the
text input field is shown if <code>canCreateSong</code> is true:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist/songs&quot;&gt;
  {{#if canCreateSong}}
    &lt;div class=&quot;list-group-item&quot;&gt;
      {{input type=&quot;text&quot; class=&quot;new-artist&quot; placeholder=newSongPlaceholder value=newTitle insert-newline=&quot;createSong&quot; }}
      &lt;button class=&quot;btn btn-primary btn-sm new-song-button&quot; {{action &quot;createSong&quot;}}&gt;Add&lt;/button&gt;
      (...)
    &lt;/div&gt;
  {{/if}}
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p><code>canCreateSong</code> is defined in the controller and is true if either
<code>songCreationStarted</code> is true or if there are already songs. Since
<code>songCreationStarted</code> has just been set to true by the <code>enabledSongCreation</code>
action (and the controller instance is not changed) when the user clicked the
"create one" link for the first artist, <code>canCreateSong</code> stays true and the
text field stays visible:</p>

<p>```js
App.ArtistSongsController = Ember.ArrayController.extend({
  (...)
  songCreationStarted: false,
  canCreateSong: function() {</p>

<pre><code>return this.get('songCreationStarted') || this.get('length');
</code></pre>

<p>  }.property('songCreationStarted', 'length'),</p>

<p>  actions: {</p>

<pre><code>enableSongCreation: function() {
  this.set('songCreationStarted', true);
}
</code></pre>

<p>  }
  (...)
});
```</p>

<h3>A simple fix</h3>

<p>To fix this, the simplest solution is to manually reset the properties that we
do not want to persist.</p>

<p>One solution is to do this in the <code>setupController</code> of the route since that
always gets called when transitioning to a new route:</p>

<p>```js
App.ArtistSongsRoute = Ember.Route.extend({
  (...)
  setupController: function(controller, model) {</p>

<pre><code>this._super(controller, model);
controller.set('artist', this.modelFor('artist'));
controller.set('newTitle', '');
controller.set('songCreationStarted', false);
</code></pre>

<p>  },
  (...)
});
```</p>

<p>And that totally works. However, I prefer placing this "resetting" code to the
controller, probably because it is strictly controller-related and also because
I can make the code really telling there:</p>

<p>```js
App.ArtistSongsController = Ember.ArrayController.extend({
  (...)
  songCreationStarted: false,
  canCreateSong: function() {</p>

<pre><code>return this.get('songCreationStarted') || this.get('length');
</code></pre>

<p>  }.property('songCreationStarted', 'length'),</p>

<p>  artistDidChange: function() {</p>

<pre><code>this.set('newTitle', '');
this.set('songCreationStarted', false);
</code></pre>

<p>  }.observes('artist'),
  (...)
});
```</p>

<p>The <code>observes</code> function property extension will run the <code>artistDidChange</code> code
every time the <code>artist</code> property of the controller changes and that is exactly
when we need to clear the title and allow the song creation process to be
restarted. Nice, clean and does exactly one thing.</p>

<p><em>Note: The latest version of the code that contains these changes is <a href="https://github.com/balinterdi/rock-and-roll/releases/tag/fix-start-song-creation-bug">available on Github</a>.</em></p>

<h3>Model Dependent State - UPDATE</h3>

<p>It turns out I stumbled into something substantial. As <a href="http://localhost:4000/2014/06/26/ember-gotcha-controllers-are-singletons.html#comment-1461013970">Luke Melia points out</a> below in the comments (thank you, Luke!),
the above problem has been under consideration for a while.</p>

<p>Alex Matchneer, a member of the Ember core team gave <a href="http://youtu.be/Syv_OTzHOr0">a presentation at
EmberFest</a> in which he explains that there is a missing
primitive.</p>

<p>He calls it "Model Dependent State" and it is what would decice under what
conditions a certain controller property is "sticky" (whether it retains its
value when you change the model of a certain controller or not).</p>

<p><a href="http://youtu.be/Syv_OTzHOr0?t=14m18s">Here</a> is the part where he begins to talk about Model
Dependent State.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Indicating Progress - Loading Routes in Ember.js]]></title>
    <link href="http://balinterdi.com/2014/06/18/indicating-progress-loading-routes-in-ember-dot-js.html"/>
    <updated>2014-06-18T21:38:00+02:00</updated>
    <id>http://balinterdi.com/2014/06/18/indicating-progress-loading-routes-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>When an Ember app is being loaded at first, the user sees a blank screen. When
transitioning between two routes and loading data to render for the destination
template, there is no indication that something is happening and thus the user can
be perplexed. Ideally, loading data happens fast enough so that users barely
notice the blank screen or freeze, but web apps do not always behave ideally.</p>

<p>If you have read some of my other articles on Ember, you will not be surprised
to hear that there is a splendid solution for this problem and that it is based
on a convention.</p>

<h3>Unresolved promises</h3>

<p>The <code>model</code> hook of routes is the canonical place to fetch data needed
to render the corresponding template. When a promise is returned, execution is
blocked until that promise is resolved (or rejected). That is the period during
which the application seems unresponsive. When starting up the application,
this can even mean that the user only sees a blank screen. Since data is fetched
asyncronously, not even the spinner in the tab title is going to spin.</p>

<p>The user may just close the tab and go on with her life. We can't let that
happen and unsurprisingly Ember has a convention-based solution that is easy to
work with and customize.</p>

<h3>Beautiful, reusable conventions</h3>

<p><a href="/2014/02/26/a-common-resource-route-pattern-in-ember-dot-js.html">We saw</a> how each resource route (and thus each route level) creates an
outlet for the level below to render content in. Let's take a look at the routes
of the application to see how that plays out:</p>

<p>``` javascript
App.Router.map(function() {
  this.resource('artists', function() {</p>

<pre><code>this.resource('artist', { path: ':slug' }, function() {
  this.route('songs');
});
</code></pre>

<p>  });
});
```</p>

<p>The outlet defined in the (top-level) application template is going to be filled
in by the content rendered by the first-level templates (in this case, <code>artists</code>).</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot;&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;page-header&quot;&gt;
      {{#link-to &quot;index&quot;}}
        &lt;h1&gt;Rock &amp; Roll&lt;small&gt; with Ember.js&lt;/small&gt;&lt;/h1&gt;
      {{/link-to}}
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
      {{outlet}}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>Next, the outlet in the <code>artists</code> template is populated by the routes below the
artists resource route:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artists&quot;&gt;
  &lt;div class=&quot;col-md-4&quot;&gt;
    (list of artists)
  &lt;/div&gt;
  &lt;div class=&quot;col-md-8&quot;&gt;
    &lt;div class=&quot;list-group&quot;&gt;
      {{outlet}}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>The artist template also defines an outlet into which content is rendered by
the routes below the artist resource. In this case, there is no common markup
for a single artist so the template only defines the outlet:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist&quot;&gt;
  {{outlet}}
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>Finally, there is a single route defined below the <code>artist</code> resource, <code>artist.songs</code>:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist/songs&quot;&gt;
  (...)
  {{#each sortedSongs}}
    &lt;div class=&quot;list-group-item&quot;&gt;
      {{title}}
      {{star-rating ...}}
    &lt;/div&gt;
  {{/each}}
  (...)
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<h3>Loading routes build on the nested routes pattern</h3>

<p>The ingenious thing about indicating that loading data from the backend is
happening is that it leverages the "nested routes, nested templates"
architecture explained above.</p>

<p>When the model hook of a certain route returns a promise that is not resolved, a
so-called loading template <strong>at the same level as the route</strong> is going to be
rendered.</p>

<p>When loading the list of artists in the <code>artists</code> route, a loading route at the
same level is going to be activated. That, by default, means a top-level loading
template is rendered.</p>

<p>Consequently, all we need to do is to put into that template what we want the user to see
while data is being fetched. Currently that is what she sees in that scenario:</p>

<p><img src="/images/posts/loading-routes/top-level-loading-indication-before.png" alt="Loading indication before" /></p>

<p>You think we can beat that?</p>

<h3>Top-level loading template</h3>

<p>The convention says that the loading route (and thus template) should be the
sibling of the route we define it for and should be called <code>loading</code>.</p>

<p>The loading template for the <code>artists</code> route should consequently be called
<code>loading</code>:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;loading&quot;&gt;
  &lt;div class=&quot;loading-pane&quot;&gt;
    &lt;div class=&quot;loading-message&quot;&gt;
      Loading stuff, please have a cold beer.
      &lt;div class=&quot;spinner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>Let's inspect what our app looks like while loading data from the backend:</p>

<p><img src="/images/posts/loading-routes/top-level-loading-indication-after.png" alt="Loading indication before" /></p>

<p>Nice, but it gets nicer still.</p>

<h3>Loading route for the songs</h3>

<p>We can now descend a couple of levels and make a loading template for when the
songs of a certain artist are being fetched.</p>

<p>Let's take a look at the "routing table" to see what that template should be
named:</p>

<p>```js
App.Router.map(function() {
  this.resource('artists', function() {</p>

<pre><code>this.resource('artist', { path: ':slug' }, function() {
  this.route('songs');
});
</code></pre>

<p>  });
});
```</p>

<p>The loading route should be the sibling of the route under consideration.</p>

<p>In this particular case, this latter is <code>artist.songs</code> and thus the loading
template should be named <code>artist.loading</code>:</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist/loading&quot;&gt;
  &lt;div class=&quot;loading-pane&quot;&gt;
    &lt;div class=&quot;loading-message&quot;&gt;
      Loading the artist, please have an organic orange juice.
    &lt;/div&gt;
    &lt;div class=&quot;spinner&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p><img src="/images/posts/loading-routes/artist-loading-indication.png" alt="Indicating loading artist" /></p>

<h3>Customizing loading route behavior</h3>

<p>More precisely, what happens when entering a route where one of the model hooks
returns an unresolved promise is that a <code>loading</code> event is fired on the
route.</p>

<p>We saw above that the default implementation is to look up a route at the same
level as the route itself and render the corresponding template.</p>

<p>However, this behavior is customizable. For example, we can pop up an alert box
in 1993-style, telling the user she needs to wait.</p>

<p>Below, I do that for the top-level <code>artists</code> route:</p>

<p>```js
App.ArtistsRoute = Ember.Route.extend({
  model: function() {</p>

<pre><code>return someDataThatTakesTooLongToFetch();
</code></pre>

<p>  },</p>

<p>  (...)
  actions: {</p>

<pre><code>loading: function() {
  alert("Loading data, go make some coffee.");
}
</code></pre>

<p>  }
});
```</p>

<p>It works:</p>

<p><img src="/images/posts/loading-routes/top-level-loading-with-alert.png" alt="1993-style loading indication" /></p>

<p>Another thing we can do is to render another loading template:</p>

<p>```js
App.LoadingRoute = Ember.Route.extend({
  renderTemplate: function() {</p>

<pre><code>this.render('working');
</code></pre>

<p>  }
});
```</p>

<p><div>
  <pre><code class='html'>&lt;/p&gt;

&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;working&quot;&gt;
  &lt;div class=&quot;loading-pane&quot;&gt;
    &lt;div class=&quot;loading-message&quot;&gt;
      I work hard while you play hard.
      &lt;div class=&quot;spinner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;


&lt;p&gt;</code></pre>
</div>
</p>

<p>Which also just works:</p>

<p><img src="/images/posts/loading-routes/top-level-different-template.png" alt="Rendering a different template" /></p>

<p>Since handling the loading state happens in the route, the most powerful piece
of Ember architecture, the possibilities are many.</p>

<h3>Why I love this solution and why you should, too</h3>

<p>In summary, let's see what Ember's solution of indicating the loading of data
brings to the table:</p>

<ol>
<li>It uses a convention to eliminate boilerplate and spare you from having to
come up with your own solution.</li>
<li>It allows different markup and text for the different "slow" parts. By
default, each loading template will be rendered exactly where the data would
be rendered.</li>
<li>If this default behavior does not suit your taste or needs, there are several
ways to tweak it, in well-defined ways.</li>
</ol>


<p><em>Note: The latest version of the code that contains these changes is <a href="https://github.com/balinterdi/rock-and-roll/releases/tag/loading-routes">available on Github</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing items in browser history in Ember.js]]></title>
    <link href="http://balinterdi.com/2014/06/04/replacing-items-in-browser-history-in-ember-dot-js.html"/>
    <updated>2014-06-04T07:49:00+02:00</updated>
    <id>http://balinterdi.com/2014/06/04/replacing-items-in-browser-history-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>One of the outstanding features of Ember.js is that all things related to URLs,
including going back and forth in browser history, just work. This is something
people got used to with "classical", server-side applications and that several
other client-side frameworks lack.</p>

<p>In this post, I am going to focus on a browser history feature, replacing
entries in it as users navigate between routes instead of adding to it.</p>

<h3>Navigating between routes in Ember</h3>

<p>If either the <code>link-to</code> template helper or the route's <code>transitionTo</code> method is
used to move between routes (and thus URLs), a new entry is going to be added to
the browser's history. That is fine most of the time but sometimes the desired
behavior might be replacing the current entry.</p>

<p>Taking the example from the guide, if one is paging through the comments made on
a photo where each one has its own route, we probably do not want these comment
URLs to clutter the history. Similarly, we don't want the user to land on these
URLs when she hits the Back button in the browser.</p>

<h3>Using the link-to helper</h3>

<p>All that needs to be done is adding the <code>replace=true</code> option to the <code>link-to</code> helper.</p>

<p>So if the link that takes you to the next comment is written like this:</p>

<p><div>
  <pre><code class='html'>{{link-to 'Next comment' 'photo.comment' nextComment}}</code></pre>
</div>
</p>

<p>It should now become:</p>

<p><div>
  <pre><code class='html'>{{link-to 'Next comment' 'photo.comment' nextComment replace=true}}</code></pre>
</div>
</p>

<h3>Transitioning from inside routes</h3>

<p>The canonical way to go from one route to another is <code>route.transitionTo</code>. If
flipping between comments of a photo was implemented as an action in the route,
the action handler would have the following line:</p>

<p><code>js
this.transitionTo('photo.comment', nextComment);
</code></p>

<p>To make that replace the current history entry, this becomes:</p>

<p><code>js
this.replaceWith('photo.comment', nextComment);
</code></p>

<p><code>replaceWith</code> takes the exact same parameters as <code>transitionTo</code>.</p>

<h3>In the controller</h3>

<p>As <a href="https://twitter.com/jacquescrocker">Jacques Crocker</a> points out <a href="http://balinterdi.com/2014/06/04/replacing-items-in-browser-history-in-ember-dot-js.html#comment-1452078154">in his comment</a>
below, I missed the case where we want to transition to another route, replacing
the current item in the history, from inside a controller.</p>

<p>Here is how to do that:</p>

<p><code>js
this.replaceRoute('photo.comment', nextComment);
</code></p>

<p>So thank you, Jacques.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting the document title in Ember apps]]></title>
    <link href="http://balinterdi.com/2014/05/28/setting-the-document-title-in-ember-apps.html"/>
    <updated>2014-05-28T07:27:00+02:00</updated>
    <id>http://balinterdi.com/2014/05/28/setting-the-document-title-in-ember-apps</id>
    <content type="html"><![CDATA[<p>The document title serves as a quick and concise way to identify web pages. It
gets displayed in search results and bookmarks and allows the user to see at a
glance what content she has open in each tab.</p>

<p>Therefore it is important to have descriptive document titles in our web
applications, whether they get rendered on the backend or set in the client app.</p>

<p>In the following short post, I'll focus on showing how to do that with Ember.</p>

<h3>Setting the title property</h3>

<p>The way to set the document title from the browser is to just assign a
value to the <code>title</code> property of the document:</p>

<p><code>js
document.title = "1 mind-blowing way to set the title for your html document";
</code></p>

<p>Or, from jQuery:</p>

<p><code>js
$(document).attr('title',"1 mind-blowing way to set the title for your html document");
</code></p>

<h3>Having context-aware titles</h3>

<p>For our document titles to be really useful, it would be great to have some
kind of information from the page's content be reflected in them.</p>

<p>To use <a href="https://github.com/balinterdi/rock-and-rol://github.com/balinterdi/rock-and-roll">my favorite example app, Rock &amp; Roll</a>, I expect the page that
displays songs from a certain artist to have a segment that is common across all
pages in the app and another segment that uniquely identifies that page. For
songs of Led Zeppelin, this could be <code>Led Zeppelin songs - Rock &amp; Roll with
Ember.js</code>.</p>

<p>I choose to put the unique part first so it can be clearly seen in a tab even if
its width is limited.</p>

<h3>Finding the best place for setting the title</h3>

<p>When considering where to implement setting the title, we have to keep in mind
that the code has to run at each route transition so that the title for the new
page is correctly set. Also, the context of the page (in the above example, the
artist Led Zeppelin) already has to be known.</p>

<p>Considering these constraints, the title could be set either in the
<code>afterModel</code> or in the <code>setupController</code> hook. The controller instance is not
needed for setting the title so I'll go with the <code>afterModel</code> hook.</p>

<p>For the <code>artists</code> route, we content ourselves with setting a static title and we
can thus focus on the <code>artist.songs</code> route:</p>

<p>```js
App.ArtistSongsRoute = Ember.Route.extend({
  (...)
  afterModel: function(model) {</p>

<pre><code>var artistName = this.modelFor('artist').get('name');
$(document).attr('title', artistName + ' songs - Rock &amp; Roll');
</code></pre>

<p>  }
});
```</p>

<p>If we now navigate to the songs page for any artist, we can see the name of the
artist reflected in the tab title:</p>

<p><img src="/images/posts/set-document-title-in-ember/see-artist-in-tab-title.png" alt="Artist name in tab title" /></p>

<p><em>NOTE: Jonathan Evans has <a href="http://www.jrhe.co.uk/setting-the-document-title-in-ember-js-apps/">a great post</a> in which he uses the <code>didTransition</code>
action in routes to set the document title. I recommend you to read it.</em></p>
]]></content>
  </entry>
  
</feed>
