<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Balint Erdi's blog about Ember.js]]></title>
  <link href="http://balinterdi.com/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2016-02-04T11:31:10+01:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[I'm all about Ember.js recently]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Complex Components in Ember.js - Part 2 - Towards a more reactive component]]></title>
    <link href="http://balinterdi.com/2016/02/04/complex-components-in-ember-dot-js-part-2-towards-a-more-reactive-component.html"/>
    <updated>2016-02-04T08:11:00+01:00</updated>
    <id>http://balinterdi.com/2016/02/04/complex-components-in-ember-dot-js-part-2-towards-a-more-reactive-component</id>
    <content type="html"><![CDATA[<p><em>This is part 2 of my Complex Component Design series. Here are the preceding posts:</em></p>

<ul>
<li><a href="http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro.html"><strong>Intro</strong></a></li>
<li><a href="http://balinterdi.com/2015/12/18/complex-components-in-ember-dot-js-part-1-analyzing-user-flows.html"><strong>Analyzing User Flows</strong></a></li>
</ul>


<hr />

<p>In <a href="http://balinterdi.com/2015/12/18/complex-components-in-ember-dot-js-part-1-analyzing-user-flows.html">the previous part of this series</a>, the implementation of the main user
flows were explained in detail. I ended the post by saying that I was not
content with the implementation for several reasons, the most crucial of which
was that parent components needed to be passed down to children, so that
children can register themselves with their parent. That, in turn, allowed
parents to reach their children and call methods on them directly instead of
using events, actions and data bindings for communication. In this post, we&#8217;ll
see how to get rid of these and replace them with more reactive solutions.</p>

<h2>Remove the need for direct access to the input</h2>

<p>Currently, the autocomplete component (the parent) yields itself to its
children. <code>auto-complete-input</code> binds its own <code>autocomplete</code> attribute to it so
that it can register itself with its parent when inserted:</p>

<div>
  <pre><code class='html'>&lt;!-- tests/dummy/app/templates/index.hbs --&gt;
{{#auto-complete
      on-select=(action &quot;selectArtist&quot;)
      on-input=(action &quot;filterArtists&quot;)
      class=&quot;autocomplete-container&quot; as
        |autocomplete isDropdownOpen inputValue
         toggleDropdown onSelect onInput|}}
  &lt;div class=&quot;input-group&quot;&gt;
    {{auto-complete-input
        autocomplete=autocomplete
        value=inputValue
        on-change=onInput
        type=&quot;text&quot;
        class=&quot;combobox input-large form-control&quot;
        placeholder=&quot;Select an artist&quot;}}
    (...)
  &lt;/div&gt;
(...)
{{/auto-complete}}</code></pre>
</div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-input.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextField</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">autocomplete</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">registerWithAutocomplete</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;didInsertElement&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">).</span><span class="nx">registerInput</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is needed when the item is autocompleted and the autocompleted segment is
pre-selected so that the user can type over it if it&#8217;s not the item they had in
mind:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">inputDidChange</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(...)</span>
</span><span class='line'>      <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">scheduleOnce</span><span class="p">(</span><span class="s1">&#39;afterRender&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(...)</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">firstOption</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;list.firstOption&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">firstOption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kr">const</span> <span class="nx">autocompletedLabel</span> <span class="o">=</span> <span class="nx">firstOption</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">,</span> <span class="nx">firstOption</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-select&#39;</span><span class="p">)(</span><span class="nx">firstOption</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">));</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;inputValue&#39;</span><span class="p">,</span> <span class="nx">autocompletedLabel</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">next</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;input.element&#39;</span><span class="p">).</span><span class="nx">setSelectionRange</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">autocompletedLabel</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the very last line, the component accesses the <code>input</code> directly, to select
(and highlight) the portion of the item that was autocompleted. That&#8217;s why we
need the whole registration process.</p>

<p>Since <code>inputDidChange</code> is triggered from the <code>auto-complete-input</code> component, we
could get rid of this direct coupling if there was a way to react to the
action&#8217;s result in the <code>auto-complete-input</code> itself. That way is called closure
actions.</p>

<h3>Fire, but don&#8217;t forget</h3>

<p>As opposed to the fire-and-forget nature of &#8220;ordinary&#8221; (aka. element) actions,
closure actions provide a way to react to the action&#8217;s outcome at the source,
where the action was fired from.</p>

<p>Since closure actions are functions, they can have return values. If the action
triggers an async action, it&#8217;s best to return a promise from the upstream
handler to which the event source can attach its handler to.</p>

<p>Let&#8217;s see how that works in our case.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">inputDidChange</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-input&#39;</span><span class="p">)(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">new</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">(...)</span>
</span><span class='line'>        <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">scheduleOnce</span><span class="p">(</span><span class="s1">&#39;afterRender&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kr">const</span> <span class="nx">firstOption</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;list.firstOption&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">firstOption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kr">const</span> <span class="nx">autocompletedLabel</span> <span class="o">=</span> <span class="nx">firstOption</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">,</span> <span class="nx">firstOption</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-select&#39;</span><span class="p">)(</span><span class="nx">firstOption</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">));</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;inputValue&#39;</span><span class="p">,</span> <span class="nx">autocompletedLabel</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">next</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">resolve</span><span class="p">({</span> <span class="nx">start</span><span class="o">:</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">end</span><span class="o">:</span> <span class="nx">autocompletedLabel</span><span class="p">.</span><span class="nx">length</span> <span class="p">});</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code did not change a lot, but now a promise is returned on line 8. It is
resolved on 18, where <code>start</code> and <code>end</code> designate the cursor positions of the
selection.</p>

<p>The action handler in the <code>auto-complete-input</code> component needs to be modified
to set the selection higlight itself:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-input.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextField</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">valueDidChange</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">().</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-change&#39;</span><span class="p">)(</span><span class="nx">value</span><span class="p">).</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">start</span><span class="p">,</span> <span class="nx">end</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;element&#39;</span><span class="p">).</span><span class="nx">setSelectionRange</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">end</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Calling <code>on-change</code> will call the above <code>inputDidChange</code> function. Instead of
firing the (element) action and forgetting about it, we now call the (closure)
action and then &#8220;wait&#8221; for the resulting promise to be resolved. Once it does,
we set the selection range.</p>

<p>We could now remove all the registration code and the passing down of the
autocomplete instance to the input component.</p>

<h2>Remove the need for direct access to the list options</h2>

<p>There is still another instance of the same. It serves to give access to the
<code>autocomplete</code> component to the <code>auto-complete-option</code>, through the
<code>auto-complete-list</code>.</p>

<div>
  <pre><code class='html'>&lt;!-- tests/dummy/app/templates/index.hbs --&gt;
{{#auto-complete
      on-select=(action &quot;selectArtist&quot;)
      on-input=(action &quot;filterArtists&quot;)
      class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                         toggleDropdown onSelect onInput|}}
  &lt;div class=&quot;input-group&quot;&gt;
    {{auto-complete-input
        value=inputValue
        on-change=onInput
        type=&quot;text&quot;
        class=&quot;combobox input-large form-control&quot;
        placeholder=&quot;Select an artist&quot;}}
    {{#auto-complete-list autocomplete=autocomplete isVisible=isDropdownOpen class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
      {{#each matchingArtists as |artist|}}
        {{#auto-complete-option
            id=artist.id
            label=artist.name
            item=artist
            list=list
            on-click=onSelect
            activeId=selectedArtist.id}}
          &lt;a href=&quot;#&quot;&gt;{{artist.name}}&lt;/a&gt;
        {{/auto-complete-option}}
      {{/each}}
    {{/auto-complete-list}}
    (...)
  &lt;/div&gt;
{{/auto-complete}}</code></pre>
</div>


<p>I am not copying all the registration code here as it&#8217;s very boilerplatey. Each
option, when inserted into the DOM, registers itself with its list, while the
list registers itself with the <code>auto-complete</code> component. The latter has an
options property to access the options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="nx">options</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">.</span><span class="nx">readOnly</span><span class="p">(</span><span class="s1">&#39;list.options&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This access is needed to be able to cycle through the options by using the
cursor keys and then select one of them by using the return key. Here is the
code that handles keypresses (more precisely, keydowns):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">keydownMap</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="mi">8</span><span class="o">:</span>  <span class="s1">&#39;startBackspacing&#39;</span><span class="p">,</span> <span class="c1">// backspace</span>
</span><span class='line'>    <span class="mi">13</span><span class="o">:</span> <span class="s1">&#39;selectOption&#39;</span><span class="p">,</span>  <span class="c1">// return</span>
</span><span class='line'>    <span class="mi">27</span><span class="o">:</span> <span class="s1">&#39;closeDropdown&#39;</span><span class="p">,</span> <span class="c1">// escape</span>
</span><span class='line'>    <span class="mi">38</span><span class="o">:</span> <span class="s1">&#39;focusPrevious&#39;</span><span class="p">,</span> <span class="c1">// up key</span>
</span><span class='line'>    <span class="mi">40</span><span class="o">:</span> <span class="s1">&#39;focusNext&#39;</span><span class="p">,</span> <span class="c1">// down key</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">handleKeydown</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyDown&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;keydownMap&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">keyCode</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">method</span> <span class="o">=</span> <span class="nx">map</span><span class="p">[</span><span class="nx">code</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">method</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">[</span><span class="nx">method</span><span class="p">](</span><span class="nx">event</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is pretty simple so far. If a key we care about was pressed, we call the
appropriate method to handle it. Let&#8217;s see how focusing works:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">.</span><span class="nx">readOnly</span><span class="p">(</span><span class="s1">&#39;list.options&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">focusPrevious</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">focused</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;options&#39;</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">focused</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span> <span class="o">=</span> <span class="nx">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">focusOptionAtIndex</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">focusNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">focused</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">focused</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;options&#39;</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">focused</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">index</span> <span class="o">=</span> <span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">focusOptionAtIndex</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">focusOptionAtIndex</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">options</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;options&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">===</span> <span class="nx">options</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">option</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;options&#39;</span><span class="p">).</span><span class="nx">objectAt</span><span class="p">(</span><span class="nx">index</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">option</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">focusOption</span><span class="p">(</span><span class="nx">option</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">focusOption</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">option</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">focused</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">focused</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">focused</span><span class="p">.</span><span class="nx">blur</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">,</span> <span class="nx">option</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">option</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>focusPrevious</code> and <code>focusNext</code> make sure that the focused index is kept within
the bounds of the avaiable number of options and then focus the previous (or
next) one by calling <code>option.focus()</code> directly (line 49).</p>

<p>There is one more key press concerning related to options, the return key. It
should select the currently focused option, if there is one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">options</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">.</span><span class="nx">readOnly</span><span class="p">(</span><span class="s1">&#39;list.options&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">selectOption</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">focused</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedOption&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">focused</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;selectItem&#39;</span><span class="p">,</span> <span class="nx">focused</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">),</span> <span class="nx">focused</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code also leverages the access to the options, indirectly through
<code>this.get('focusedOption')</code>. Furthermore, it assumes that each option has an
<code>item</code> and <code>label</code> properties. Not stellar.</p>

<p>It won&#8217;t be a piece of cake to get rid of direct coupling in all of these, so
let&#8217;s get to it.</p>

<h3>Change the focused option without accessing the options</h3>

<p>In the first step, we&#8217;ll change the focused option without directly commanding
the options to focus/unfocus. We&#8217;ll then tackle selecting the focused option.</p>

<p>We can use simple data binding to have the focused option available. By
maintaining and yielding a <code>focusedIndex</code> in the &#8220;control center&#8221;, the
<code>autocomplete</code> component, <code>autocomplete-option</code> components can bind to it and
know whether they are focused or not.</p>

<p>Here is how code the templates need to change:</p>

<div>
  <pre><code class='html'>&lt;!-- addon/templates/components/autocomplete.hbs --&gt;
{{yield isDropdownOpen
        inputValue
        focusedIndex
        selectedIndex
        (action &quot;toggleDropdown&quot;)
        (action &quot;selectItem&quot;)
        (action &quot;inputDidChange&quot;)}}</code></pre>
</div>




<div>
  <pre><code class='html'>&lt;!-- tests/dummy/app/templates/index.hbs --&gt;
{{#auto-complete
      on-select=(action &quot;selectArtist&quot;)
      on-input=(action &quot;filterArtists&quot;)
      options=matchingArtists
      displayProperty=&quot;name&quot;
      class=&quot;autocomplete-container&quot; as |isDropdownOpen inputValue
                                         focusedIndex selectedIndex
                                         toggleDropdown onSelect onInput|}}
  &lt;div class=&quot;input-group&quot;&gt;
    {{auto-complete-input
        value=inputValue
        on-change=onInput
        type=&quot;text&quot;
        class=&quot;combobox input-large form-control&quot;
        placeholder=&quot;Select an artist&quot;}}
    {{#auto-complete-list
        isVisible=isDropdownOpen
        class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
      {{#each matchingArtists as |artist index|}}
        {{#auto-complete-option
            label=artist.name
            item=artist
            on-click=onSelect
            isFocused=(eq focusedIndex index)
            isSelected=(eq selectedIndex index)}}
          &lt;a href=&quot;#&quot;&gt;{{artist.name}}&lt;/a&gt;
        {{/auto-complete-option}}
      {{else}}
        &lt;li&gt;&lt;a href=&quot;#&quot;&gt;No results.&lt;/a&gt;&lt;/li&gt;
      {{/each}}
    {{/auto-complete-list}}
    (...)
  &lt;/div&gt;
{{/auto-complete}}</code></pre>
</div>


<p>Note the new <code>focusedIndex</code> and <code>selectedIndex</code> attributes, yielded by the
top-level component that <code>isFocused</code> and <code>isSelected</code> in the
<code>auto-complete-option</code> are bound to.</p>

<p>The <code>eq</code> helper comes from <a href="https://github.com/jmurphyau/ember-truth-helpers">ember-truth-helpers</a> and will evaluate to true if
its params are equal which is exactly what we want.</p>

<p>The <code>autocomplete</code> component needs to change to manage the new indexes instead
of setting its <code>focusedOption</code> and calling <code>option.set</code> directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">optionsLength</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">.</span><span class="nx">readOnly</span><span class="p">(</span><span class="s1">&#39;options.length&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">focusPrevious</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">currentIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedIndex&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">newIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">isNone</span><span class="p">(</span><span class="nx">currentIndex</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;optionsLength&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentIndex</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;optionsLength&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newIndex</span> <span class="o">=</span> <span class="nx">currentIndex</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;focusedIndex&#39;</span><span class="p">,</span> <span class="nx">newIndex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">focusNext</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">currentIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedIndex&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">lastIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;optionsLength&#39;</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">newIndex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">isNone</span><span class="p">(</span><span class="nx">currentIndex</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">currentIndex</span> <span class="o">===</span> <span class="nx">lastIndex</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">newIndex</span> <span class="o">=</span> <span class="nx">currentIndex</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;focusedIndex&#39;</span><span class="p">,</span> <span class="nx">newIndex</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">selectOption</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">focusedIndex</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;focusedIndex&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">isPresent</span><span class="p">(</span><span class="nx">focusedIndex</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;selectedIndex&#39;</span><span class="p">,</span> <span class="nx">focusedIndex</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is simpler and less intrusive than before. (Setting <code>isDropdown</code> to true
has been added as before the option&#8217;s <code>focus</code> method did the opening).</p>

<p>What&#8217;s missing is for the selected item to be sent to the outer world (in other
words, for the <code>selectItem</code> to be triggered). Before, it was done by sending
the <code>selectItem</code> action with the focused option&#8217;s item and label (see line 9 in
the last snippet of the previous section) but we can no longer indulge in
accessing the options directly. Consequently, it was replaced by setting the
<code>selectedIndex</code> to the <code>focusedIndex</code> (see line 39 above).</p>

<p>The problem now is that <code>selectItem</code> needs to be called with the item and the
label (the name of the selected artist to be set as the input&#8217;s value) and only
the selected <code>auto-complete-option</code> component has that knowledge. So we need to
set up a way for the <code>auto-complete-option</code> components to know when they become
selected and then call that action. As these components are not the source of
the event that lead to an option being selected by key press, we choose to use
an observer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-option.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;li&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="s1">&#39;ember-autocomplete-option&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">classNameBindings</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">String</span><span class="p">.</span><span class="nx">w</span><span class="p">(</span><span class="s1">&#39;isSelected:active isFocused:focused&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">label</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">item</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;on-click&#39;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">isFocused</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">isSelected</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">didClick</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_selectItem</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">didBecomeSelected</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">observer</span><span class="p">(</span><span class="s1">&#39;isSelected&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">isSelected</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;isSelected&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">isSelected</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">_selectItem</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_selectItem</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">item</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-click&#39;</span><span class="p">)(</span><span class="nx">item</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Line 21 and 22 is where the option realizes it has become the selected option,
and then calls the corresponding (closure) action on line 28.</p>

<p>We&#8217;re done, we got rid of all the direct passing of component instances,
registrations and direct property access and method calling. Even though we&#8217;re
<a href="http://www.ccs.neu.edu/research/demeter/demeter-method/LawOfDemeter/paper-boy/demeter.pdf">Demeter compliant</a>, there are things that could be improved.</p>

<h3>In the next episode&#8230;</h3>

<p>One of these things is the observer. <a href="https://www.youtube.com/watch?v=7PUX27RKCq0">Observers fell out of favor</a> some time
ago, and for a good reason. They can be over eager and lead to scenarios where
it is hard to see what&#8217;s going on. To prove my point, let me show you a bug I&#8217;ve
just accidentally introduced. I call it the &#8220;JPJ is too good to be replaced&#8221; bug:</p>

<p><img src="http://balinterdi.com/images/posts/complex-component-design-ember/jpj-too-good-bug.gif" alt="JPJ is too good to be replaced" /></p>

<p>(The code for this series is publicly available on Github <a href="https://github.com/balinterdi/ember-cli-autocomplete">here</a>. I&#8217;ve tagged
where we are now with <a href="https://github.com/balinterdi/ember-cli-autocomplete/releases/tag/ccd-part-two">ccd-part-two</a>.)</p>

<p>So we&#8217;re not done yet. In the next post of the series, we&#8217;re going to fix that
bug by replacing the observer and make other worthy improvements. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding style attributes warning in Ember]]></title>
    <link href="http://balinterdi.com/2016/02/03/binding-style-attributes-warning-in-ember.html"/>
    <updated>2016-02-03T09:33:00+01:00</updated>
    <id>http://balinterdi.com/2016/02/03/binding-style-attributes-warning-in-ember</id>
    <content type="html"><![CDATA[<p>One warning Ember might print in your console concerns binding a property to
the <code>style</code> attribute of a DOM element, like this:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;progress-bar&quot; style=&quot;{{barWidth}}&quot;&gt;...&lt;/div&gt;</code></pre>
</div>




<div>
  <pre><code class='javascript'>export default Ember.Controller.extend({
  progress: 0,
  barWidth: Ember.computed(&#39;progress&#39;, {
    return &#39;width:&#39; + this.get(&#39;progress&#39;) + &#39;%&#39;;
  });
});</code></pre>
</div>


<p>Handlebars escapes all html content put in double curlies but it does not do
that with CSS, and thus the above makes possible a cross-site scripting attack.
That is the reason for the warning and the fix for that is to convert the
property (in the above case, <code>barWidth</code>) to a <code>SafeString</code>, which tells Ember
that the content is safe to display. You should only do that after you have
verified that the content you mark as safe cannot be injected by a malicious
user. <a href="http://emberjs.com/deprecations/v1.x/#toc_binding-style-attributes">The guide</a> describes how to do that:</p>

<div>
  <pre><code class='javascript'>export default Ember.Controller.extend({
  progress: 0,
  barWidth: Ember.computed(&#39;progress&#39;, {
    return Ember.Handlebars.SafeString(&#39;width:&#39; + this.get(&#39;progress&#39;) + &#39;%&#39;);
  });
});</code></pre>
</div>


<p>(Alternatively, you can call <code>Ember.String.htmlSafe</code> with the string you want to
mark as safe, to the same effect.)</p>

<p>When I did this conversion in a recent project, though, the warning persisted.
After spending a substantial amount of time pouring over the docs and even
stepping through the warning stacktrace, I still could not find out what was
wrong. What helped (as so many times already) was a good night sleep and taking
another look at it in the morning.</p>

<p>Marking the string as safe was done correctly, but when binding it to the
<code>style</code> attribute, I used double quotes around it, probably inhibiting Ember
from seeing it as a SafeString:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;progress-bar&quot; style=&quot;{{barWidth}}&quot;&gt;...&lt;/div&gt;</code></pre>
</div>


<p>So all I had to do to make the warning go away was to remove the quotes:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;progress-bar&quot; style={{barWidth}}&gt;...&lt;/div&gt;</code></pre>
</div>


<p>I hope this saves you some time if you come across a similar situation in your
work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js updated to use Ember &amp; Co 2.3]]></title>
    <link href="http://balinterdi.com/2016/01/21/rock-and-roll-with-ember-dot-js-updated-to-use-ember-and-co-2-dot-3.html"/>
    <updated>2016-01-21T14:50:00+01:00</updated>
    <id>http://balinterdi.com/2016/01/21/rock-and-roll-with-ember-dot-js-updated-to-use-ember-and-co-2-dot-3</id>
    <content type="html"><![CDATA[<p>I have just released a new update to <a href="http://rockandrollwithemberjs.com">the Rock and Roll Ember.js book</a>,
which brings it up to Ember 2.3.0, ED 2.3.2 and Ember CLI 2.3.0-beta.1.</p>

<p>Other improvements made in this release are:</p>

<ul>
<li>Update the PageFront section as it has now become even simpler to deploy apps to PageFront</li>
<li>Reset the song creation process when switching bands</li>
<li>Use ember-bootstrap and remove the section on manually adding assets to the build</li>
<li>Use consistent quoting in snippets and include <code>import Ember from 'ember'</code> wherever needed.</li>
<li>Remove a few paragraphs that talk about how things were in the past (like <code>bind-attr</code>)</li>
</ul>


<p>Happy reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complex Components in Ember.js - Part 1 - Analyzing user flows]]></title>
    <link href="http://balinterdi.com/2015/12/18/complex-components-in-ember-dot-js-part-1-analyzing-user-flows.html"/>
    <updated>2015-12-18T10:25:00+01:00</updated>
    <id>http://balinterdi.com/2015/12/18/complex-components-in-ember-dot-js-part-1-analyzing-user-flows</id>
    <content type="html"><![CDATA[<p>In this post I continue the <a href="http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro.html">Complex Component Design series</a> I started back in
September. I slightly renamed the series title as the original idea was to
design and develop the component in the parts of the series but since the
component is mostly &#8220;done&#8221;, I prefer to show how it works and how the different
pieces fit together. I think this way of presenting things is still (perhaps
equally) valuable and we&#8217;ll have a few open issues to work on &#8220;together&#8221; to
further improve the component.</p>

<p>The component I described in <a href="http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro.html">the intro post</a> serves to select an item from a
list of items, either via a dropdown or by starting to type its name and then
selecting it. Here is a very short demo about how that looks in practice:</p>

<p><img src="http://balinterdi.com/images/posts/complex-component-design-ember/ember-autocomplete-demo.gif" alt="Selecting an artist" /></p>

<p>We&#8217;ll go through the main UI flows and see how they are implemented via
communication of the different layers of the component.</p>

<h2>Getting familiar with the component</h2>

<p>The template we&#8217;ll use (and which the above demo uses) to understand the
functioning of the component looks like this:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;form-group&quot;&gt;
  &lt;label&gt;Choose an artist&lt;/label&gt;
  {{#auto-complete
        on-select=(action &quot;selectArtist&quot;)
        on-input=(action &quot;filterArtists&quot;)
        class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                           toggleDropdown onSelect onInput|}}
    &lt;div class=&quot;input-group&quot;&gt;
      {{auto-complete-input
          autocomplete=autocomplete
          value=inputValue
          on-change=onInput
          type=&quot;text&quot;
          class=&quot;combobox input-large form-control&quot;
          placeholder=&quot;Select an artist&quot;}}
      {{#auto-complete-list autocomplete=autocomplete isVisible=isDropdownOpen
              class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
        {{#each matchingArtists as |artist|}}
          {{#auto-complete-option
              id=artist.id
              label=artist.name
              item=artist
              list=list
              on-click=onSelect
              activeId=selectedArtist.id}}
            &lt;a href=&quot;#&quot;&gt;{{artist.name}}&lt;/a&gt;
          {{/auto-complete-option}}
        {{else}}
          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;No results.&lt;/a&gt;&lt;/li&gt;
        {{/each}}
      {{/auto-complete-list}}
      {{#auto-complete-dropdown-toggle on-click=toggleDropdown
              class=&quot;input-group-addon dropdown-toggle&quot;}}
        &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;
      {{/auto-complete-dropdown-toggle}}
    &lt;/div&gt;
  {{/auto-complete}}
&lt;/div&gt;</code></pre>
</div>


<p>This might seem somewhat daunting at first but as we grow acquainted with its
details, our intimidation will subside.</p>

<p>The top-level component is <code>auto-complete</code>. This is the &#8220;command center&#8221;, the
piece that manages the &#8220;global&#8221; state of the whole widget, like whether the
dropdown is visible and what the current value of the input field is.</p>

<p>You might, with good reason, wonder why these are not handled by the
sub-component where it&#8217;d feel more appropriate: the current value of the input
field by <code>auto-complete-input</code> and the opened/closed state of the dropdown by
<code>auto-complete-dropdown-toggle</code>.</p>

<p>The answer is that a change in these states can be triggered from multiple
places and that several child components might need to know about them. The
dropdown can be closed by the user clicking on one of the items in the dropdown
(not on the little arrow of the toggle), while the current text in the input can
be modified by inferring the item when the user starts to type (not just by
actually typing out the whole text).</p>

<h3>Data down, actions up - all the way down (and up)</h3>

<p>That slight violation of separation of concerns (or is it at all?) fits
perfectly with the most important component communication paradigm: Data down,
actions up.</p>

<p>The input, when its value changes, sends an action up to its parent, notifying
it of the change. The parent can then react to this, and communicate any data
(state) changes via the attribute bindings it has to the input. This is why
<code>auto-complete</code> needs to handle, or at least access, state that is used
downstream by its sub-components.</p>

<p>The classical way of passing down data (and establishing a binding) from the
parent to the child is through block parameters of the parent component. The
<code>auto-complete</code> component has quite some:</p>

<div>
  <pre><code class='html'>{{#auto-complete
        on-select=(action &quot;selectArtist&quot;)
        on-input=(action &quot;filterArtists&quot;)
        class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                           toggleDropdown onSelect onInput|}}
    (...)
  {{/auto-complete}}</code></pre>
</div>


<p>The block parameters are those found between the pipes, after the <code>as</code> keyword.
You have to look into the component&#8217;s own template to see where they come from:</p>

<div>
  <pre><code class='html'>&lt;!-- addon/templates/components/auto-complete --&gt;
{{yield this isDropdownOpen inputValue
        (action &quot;toggleDropdown&quot;) (action &quot;selectItem&quot;) (action &quot;inputDidChange&quot;)}}</code></pre>
</div>


<p>Parameters are matched by position, so what is yielded in the first position
becomes the first block parameter. In this case, we yield the component itself
as the first parameter, the aforementioned component states as the 2nd and 3rd
and then (closure) actions that will trigger functions in the <code>auto-complete</code>
component when called in one of the child components. These serve as &#8220;remote
controls&#8221; (a term used by <a href="https://twitter.com/miguelcamba">Miguel Camba</a> in his <a href="https://www.youtube.com/watch?v=6N4qsO22fmw">awesome presentation at
EmberCamp</a>) for child components to control their parent.</p>

<p>The way of upward communication from child components is calling these actions
when appropriate.</p>

<p>We now have sufficient knowledge to follow the implemention of basic user flows,
so let&#8217;s get into it.</p>

<h2>Understanding UX flows</h2>

<h3>Manual selection from the dropdown</h3>

<p>The most basic thing one can do with the widget is to pop open the list of
options.</p>

<p>I discarded the parts that are not relevant to understand this, so we&#8217;re left
with the following:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;form-group&quot;&gt;
  &lt;label&gt;Choose an artist&lt;/label&gt;
  {{#auto-complete
        on-select=(action &quot;selectArtist&quot;)
        on-input=(action &quot;filterArtists&quot;)
        class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                           toggleDropdown onSelect onInput|}}
    &lt;div class=&quot;input-group&quot;&gt;
      {{#auto-complete-list autocomplete=autocomplete isVisible=isDropdownOpen
              class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
        (...)
      {{/auto-complete-list}}
      {{#auto-complete-dropdown-toggle on-click=toggleDropdown
              class=&quot;input-group-addon dropdown-toggle&quot;}}
        &lt;span class=&quot;caret&quot;&gt;&lt;/span&gt;
      {{/auto-complete-dropdown-toggle}}
    &lt;/div&gt;
  {{/auto-complete}}
&lt;/div&gt;</code></pre>
</div>


<p>The <code>auto-complete-dropdown-toggle</code> is the component that can be clicked to open
or close the list of items. At a glance it seems like its <code>on-click</code> attribute
is the action that will be triggered when the user clicks it but let&#8217;s see for
sure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-dropdown-toggle.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">tagName</span><span class="o">:</span> <span class="s1">&#39;span&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">classNames</span><span class="o">:</span> <span class="s1">&#39;ember-autocomplete-toggle&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;data-dropdown&#39;</span><span class="o">:</span> <span class="s1">&#39;dropdown&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;on-click&#39;</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">toggleDropdown</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-click&#39;</span><span class="p">)();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Indeed, it just calls the action that was passed into it, which is
the <code>toggleDropdown</code> action of the topmost <code>auto-complete</code> component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-dropdown-toggle.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">toggleDropdown</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">toggleProperty</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>toggleProperty</code> method flips the value of its parameter, so if it was false
it now becomes true. <code>isDropdownOpen</code> is yielded as a block parameter so when it
becomes true, <code>auto-complete-list</code> will rerender as one of its attributes,
<code>isVisible</code> has changed. That will then open the dropdown:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;form-group&quot;&gt;
  &lt;label&gt;Choose an artist&lt;/label&gt;
  {{#auto-complete
      (...)
      class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                           toggleDropdown onSelect onInput|}}
    &lt;div class=&quot;input-group&quot;&gt;
      {{#auto-complete-list autocomplete=autocomplete isVisible=isDropdownOpen
              class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
        (...)
      {{/auto-complete-list}}
    &lt;/div&gt;
  {{/auto-complete}}
&lt;/div&gt;</code></pre>
</div>


<p>The same process is triggered when the toggle is clicked again, only this time
<code>isDropdownOpen</code> goes back to false and thus the dropdown is closed.</p>

<h3>Picking an item</h3>

<p>The second feature we&#8217;ll look at is more like the second half of the first one:
selecting an item by clicking (tapping) on it.</p>

<p>I have again restrained the template to the relevant bits, throwing away the
input and the toggle:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;form-group&quot;&gt;
  &lt;label&gt;Choose an artist&lt;/label&gt;
  {{#auto-complete
        on-select=(action &quot;selectArtist&quot;)
        on-input=(action &quot;filterArtists&quot;)
        class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                           toggleDropdown onSelect onInput|}}
    &lt;div class=&quot;input-group&quot;&gt;
      (...)
      {{#auto-complete-list autocomplete=autocomplete isVisible=isDropdownOpen
              class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
        {{#each matchingArtists as |artist|}}
          {{#auto-complete-option
              id=artist.id
              label=artist.name
              item=artist
              list=list
              on-click=onSelect
              activeId=selectedArtist.id}}
            &lt;a href=&quot;#&quot;&gt;{{artist.name}}&lt;/a&gt;
          {{/auto-complete-option}}
        {{else}}
          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;No results.&lt;/a&gt;&lt;/li&gt;
        {{/each}}
      {{/auto-complete-list}}
      (...)
    &lt;/div&gt;
  {{/auto-complete}}
&lt;/div&gt;</code></pre>
</div>


<p>When one of the items is clicked, the <code>on-click</code> attribute (which is the
<code>onSelect</code> closure action provided by <code>auto-complete</code>) is called in the
<code>auto-complete-option</code> component:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-option.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">selectOption</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-click&#39;</span><span class="p">)(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}),</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So where is <code>onSelect</code> defined? It is one of the block parameters yielded by
<code>auto-complete</code>, more precisely the <code>(action "selectItem")</code> action:</p>

<div>
  <pre><code class='html'>&lt;!-- addon/templates/components/auto-complete.hbs --&gt;
{{yield this isDropdownOpen inputValue
        (action &quot;toggleDropdown&quot;) (action &quot;selectItem&quot;) (action &quot;inputDidChange&quot;)}}</code></pre>
</div>


<p><code>selectItem</code> is quite straightforward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-option.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selectItem</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-select&#39;</span><span class="p">)(</span><span class="nx">item</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;inputValue&#39;</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">(...)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It first calls the <code>on-select</code> action that was passed into it from the &#8220;outside&#8221;
(the controller), which just sets <code>selectedArtist</code> to the artist object
encapsulated in the list item. It then sets the <code>isDropdownOpen</code> flag to false
(which, by the mechanism seen in the previous point, closes the list) and sets
the text in the input to the item&#8217;s label (the artist&#8217;s name).</p>

<h3>Auto-completing an item</h3>

<p>As the final example, let&#8217;s see a more complicated use case. When the user
starts to type, the items that do not match the typed string will not be shown
as options. Also, the first matching item will be auto-completed and selected,
and the dropdown will be closed.</p>

<p>No surprises here, the same design principle will be applied as before. Pass
down an action that should be called from a child, then change some property
in the parent component that trickles down to the child which then rerenders
itself because of the changed attribute.</p>

<p>Let&#8217;s see the relevants parts of the template:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;form-group&quot;&gt;
  &lt;label&gt;Choose an artist&lt;/label&gt;
  {{#auto-complete
        on-select=(action &quot;selectArtist&quot;)
        on-input=(action &quot;filterArtists&quot;)
        class=&quot;autocomplete-container&quot; as |autocomplete isDropdownOpen inputValue
                                           toggleDropdown onSelect onInput|}}
    &lt;div class=&quot;input-group&quot;&gt;
      {{auto-complete-input
          autocomplete=autocomplete
          value=inputValue
          on-change=onInput
          type=&quot;text&quot;
          class=&quot;combobox input-large form-control&quot;
          placeholder=&quot;Select an artist&quot;}}
      {{#auto-complete-list autocomplete=autocomplete isVisible=isDropdownOpen
              class=&quot;typeahead typeahead-long dropdown-menu&quot; as |list|}}
        {{#each matchingArtists as |artist|}}
          {{#auto-complete-option
              (...)
          {{/auto-complete-option}}
        {{else}}
          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;No results.&lt;/a&gt;&lt;/li&gt;
        {{/each}}
      {{/auto-complete-list}}
      (...)
    &lt;/div&gt;
  {{/auto-complete}}
&lt;/div&gt;</code></pre>
</div>


<p>We&#8217;ll start by the <code>auto-complete-input</code> this time where the <code>input</code> event,
triggered by the user&#8217;s typing, is handled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete-input.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextField</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">valueDidChange</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">const</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">().</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-change&#39;</span><span class="p">)(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is almost the exact copy of calling the <code>on-select</code> action we saw before
from <code>auto-complete-option</code>. Here, the <code>on-change</code> function is called that was
passed down from the block param of <code>auto-complete</code>.</p>

<p>If we take a look in the template of <code>auto-complete</code> we see it creates a
<code>(action 'inputDidChange')</code> closure action and yield that, so that should be the
next thing to look at. Here is where most of the stuff happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// addon/components/auto-complete.js</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Component</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">inputDidChange</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-input&#39;</span><span class="p">)(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;isDropdownOpen&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>      <span class="kr">const</span> <span class="nx">firstOption</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;list.firstOption&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">firstOption</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">autocompletedLabel</span> <span class="o">=</span> <span class="nx">firstOption</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;label&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;on-select&#39;</span><span class="p">)(</span><span class="nx">firstOption</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">));</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;inputValue&#39;</span><span class="p">,</span> <span class="nx">autocompletedLabel</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;input.element&#39;</span><span class="p">).</span><span class="nx">setSelectionRange</span><span class="p">(</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">autocompletedLabel</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We first call the <code>on-input</code> action which filters out the artists that do not
match the typed prefix. The result of that is that <code>matchingArtists</code> will only
contain the artists that do match. The dropdown is then opened to display these
items (or an explanatory blurb if none matches). If there is at least one
matching item, the first one is selected (and becomes <code>selectedArtist</code>).</p>

<p>As an UX improvement, the &#8220;inferred&#8221; range from the label in the input is
selected, so that the user can continue typing and thus select another artist if
the first one was not what they meant. (See when I type &#8220;J&#8221; in the demo).</p>

<h3>Design concepts</h3>

<p>I&#8217;m not totally happy with the current state of the component because of the
following:</p>

<p>1) The <code>auto-complete</code> component reaches inside the <code>auto-complete-input</code> one
(set in its <code>input</code> property) to call <code>setSelectionRange</code> on it (see the last
code snippet).</p>

<p>2) The same component retrieves the options from the list and gets its <code>item</code>
to select it. Again, this is quite intrusive and will break if the internals of
<code>auto-complete-option</code> change.</p>

<p>3) Still the <code>auto-complete</code> component yields an instance of itself as a block
parameter. This enables &#8220;downstream consumers&#8221; to access any of its properties
and methods, breaking its encapsulation.</p>

<p>In presenting about these concepts at the <a href="https://www.bigmarker.com/global-ember-meetup/Inside-Ember-Mirage-and-Complex-Component-Design">Global Ember Meetup</a> and at
<a href="http://www.meetup.com/Ember-js-Belgium/events/226904768/">Ember.js Belgium</a>, I said that I like to think about components as the
objects of the UI.  Thinking about them as objects helps to deliver the point
that some (most?) object oriented practices should be applied to components,
too. If this assumption is correct, we can leverage OOP design concepts and
guidelines that we&#8217;ve been developing for decades, giving us a headstart on how
to design (and what to watch out for) complex component hierarchies.</p>

<p>For example, I consider the set of block parameters yielded by a component as
its public API. This means that yielding <code>this</code> from a component&#8217;s template is
considered bad practice as it breaks encapsulation. In some cases, it&#8217;s
relatively easy to find a way around it, in others it&#8217;s much more difficult.
We&#8217;ll see if I can pull it off in the above case.</p>

<p>As a closing thought, notice how 95% of the feature&#8217;s implementation relied on
block parameters and closure actions. They are fantastic tools to work with and
I don&#8217;t know how anything could be achieved without them before they existed.</p>

<h2>Pointers</h2>

<p>Incidentally, <a href="https://twitter.com/miguelcamba">Miguel Camba</a> seems to think about components lately, too. I
already mentioned his fantastic talk at EmberCamp this year called <a href="https://www.youtube.com/watch?v=6N4qsO22fmw">&#8220;Composable
components&#8221;</a>, but above that he has released <a href="http://www.ember-power-select.com">ember-power-select</a>, which
serves the same purpose as the <code>auto-complete</code> component in my blog post series.</p>

<p>However, it&#8217;s much more mature and flexible so if you need a select dropdown in
your app, use <code>ember-power-select</code>, as my component is for learning and
demonstration purposes only. That said, I published it on Github under
<a href="https://github.com/balinterdi/ember-cli-autocomplete">balinterdi/ember-cli-autocomplete</a> if you want to take a look or follow
along the blog posts while looking at its source code. I put a tag called
<code>ccd-part-one</code> on the repo for this blog post.</p>

<h2>In the next episode&#8230;</h2>

<p>&#8230; of the series, I&#8217;d like to address (some of) my concerns I mentioned above
and see how to fix them. Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js updated to Ember 2.2.0]]></title>
    <link href="http://balinterdi.com/2015/11/23/rock-and-roll-with-ember-dot-js-updated-to-ember-2-dot-2-0.html"/>
    <updated>2015-11-23T20:59:00+01:00</updated>
    <id>http://balinterdi.com/2015/11/23/rock-and-roll-with-ember-dot-js-updated-to-ember-2-dot-2-0</id>
    <content type="html"><![CDATA[<p>I have updated the app developed in the <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js book</a> to
Ember 2.2 and Ember CLI 1.13.12. I also replaced the now defunct Divshot
deployment section with another great &amp; simple deployment option,
<a href="https://www.pagefronthq.com/">PageFront</a>.</p>

<p>Above that, there is a great deal of &#8220;bug fixes and stability improvements&#8221; in
this release, the list of which can be viewed on <a href="https://github.com/balinterdi/rarwe-issues/issues?q=milestone%3A2.2.0">Github</a>.</p>

<p>Thank you to everybody who reported issues and helped to improve <a href="http://rockandrollwithemberjs.com">the book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The tale of two bindings]]></title>
    <link href="http://balinterdi.com/2015/10/22/the-tale-of-two-bindings.html"/>
    <updated>2015-10-22T16:41:00+02:00</updated>
    <id>http://balinterdi.com/2015/10/22/the-tale-of-two-bindings</id>
    <content type="html"><![CDATA[<iframe
  width="178" height="24" style="border:0px"
  src="https://mixonic.github.io/ember-community-versions/2015/10/22/the-tale-of-two-bindings.html">
</iframe>


<p>Two weeks ago I had a presentation called &#8220;Complex component design&#8221; at the
Global Ember Meetup.</p>

<p>When I had given the title and abstract of this presentation, I had wanted to
speak about how to implement more involved, nested components in Ember 2 (but
actually, more like 1.13+), which is a fascinating and complex (pun intended)
topic. I had something like a highly reusable autocomplete input component in
mind something that <a href="http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro.html">I had decided to explore further</a>.</p>

<p>When I sat down to think about it, I had realized there is a related and equally
fascinating topic, that of communication between components that live on the
same page. As everything is <a href="https://github.com/emberjs/rfcs/pull/38">soon becoming a component</a> in Ember, the two are
very similar. A difference is that communicating components in an app do not
need such a high degree of flexibility as a reusable component (like an Ember
addon). In any case, it does not hurt, since making them flexible facilitates
their reuse.</p>

<p>In this post, I&#8217;ll show an example of simple component communication and focus
on how moving from two-way bindings to one-way bindings changes that. Spending
some time on playing around with this, I was very pleasantly surprised in what
this shift enables.</p>

<h3>The example</h3>

<p>If you know me a bit, you&#8217;d expect the &#8220;app&#8221; to be Rock &amp; Roll themed and
you&#8217;d be right. I reduced the app <a href="http://rockandrollwithemberjs.com">in the book</a> to a very simple interface
where you can pick a band and then edit it on a form:</p>

<p><img src="http://balinterdi.com/images/posts/tale-of-two-bindings/sketch.png" alt="Edit band on a form" /></p>

<p>In the remainder of the post, we&#8217;ll see different implementations to achieve the
validation and saving of the band. There will be 3 scenarios: the traditional
one, using two-way bindings, the Glimmer version, using one-way bindings, DOM
events and Data Down, Actions up (DDAU) and finally 1WAY Deluxe&#8482;: adding a few
features on top of the second scenario that one-way bindings make easy (or
possible at all).</p>

<h3>Take 1: Traditional, two-way bound</h3>

<p>Ignoring the list of bands on the left, the template belonging to the band
route, where the band can be edited, contains the band-form (on the right of the
screenshot), and some minimal markup. We pass in the band object, the <code>on-save</code> and the
<code>on-star-click</code> closure actions to the band form:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;panel panel-default band-panel&quot;&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    {{band-form band=model
                errors=errors
                on-save=(action &quot;saveBand&quot;)
                on-star-click=(action &quot;updateRating&quot;)}}
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>


<p>The controller has these actions, sets up the errors object and contains the
validation logic. The <code>hasErrors</code> property will be true if the band&#8217;s name is
empty:</p>

<div>
  <pre><code class='javascript'>import Ember from &#39;ember&#39;;

export default Ember.Controller.extend({
  hasValidName: Ember.computed.notEmpty(&#39;model.name&#39;),
  hasErrors: Ember.computed.not(&#39;hasValidName&#39;),

  setupErrors: Ember.on(&#39;init&#39;, function() {
    this.set(&#39;errors&#39;, Ember.Object.create());
  }),

  validate() {
    this.set(&#39;errors.name&#39;, this.get(&#39;hasValidName&#39;) ? null : &quot;Name is required.&quot;);
  },

  actions: {
    updateRating(params) {
      const { item: band, rating } = params;
      band.set(&#39;rating&#39;, rating);
    },

    saveBand() {
      this.validate();
      if (this.get(&#39;hasErrors&#39;)) {
        return;
      }

      const band = this.get(&#39;model&#39;);
      return band.save().then(() =&gt; {
        console.log(&quot;Band is saved&quot;);
      });
    }
  }
});</code></pre>
</div>


<p>Upon validation, the errors are set but this is only needed to be able to
show the error in the template. <code>this.get('hasErrors')</code> is already true if the
band&#8217;s name is an empty string.</p>

<p>The missing piece is the <code>band-form</code> template:</p>

<div>
  <pre><code class='html'>&lt;div class={{if errors.name &quot;form-group has-error&quot; &quot;form-group&quot;}}&gt;
  &lt;label for=&quot;band-name&quot;&gt;Name&lt;/label&gt;
  {{input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-name&quot; value=band.name}}
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-year&quot;&gt;Formed in&lt;/label&gt;
  {{input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-year&quot; value=band.year}}
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-rating&quot;&gt;Rating&lt;/label&gt;
  {{star-rating id=&quot;band-rating&quot; item=band rating=band.rating on-click=on-star-click}}
&lt;/div&gt;
&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary pull-right&quot; {{action &quot;saveBand&quot;}}&gt;Submit&lt;/button&gt;</code></pre>
</div>


<p>It uses the <code>input</code> helper which established two-way bindings between the value
of the input and the property that was passed to it. When the user modifies the
input, <code>band.name</code> changes in sync. Since band in the component is the model of
the controller, the band name in the list changes as the name is edited:</p>

<p><img src="http://balinterdi.com/images/posts/tale-of-two-bindings/two-way-bindings-in-action.gif" alt="Two-way bindings in action" /></p>

<p>In this scenario, communication between the top-level component (controller, if
you will) and the band form is quite blunt. As data is two-way bound, there is
no simple, &#8220;in-framework&#8221; way of not changing the name in the list when the name
on the form is modified. There is shared state and the components do not act via
messages: they pull two ends of the same string.</p>

<p>(In cases where you had to prevent that in the pre-Glimmer era, you had to resort
to using a separate property, like <code>band.newName</code>, or using <a href="https://github.com/yapplabs/ember-buffered-proxy">BufferedProxy</a>.)</p>

<p>So let&#8217;s take a step forwards and see how this can be improved.</p>

<h3>Take 2: One-way bound with DDAU</h3>

<p>We&#8217;ll first replace the two-way binding with a one-way one and manually
synchronize the upstream direction using DDAU. It will not seem like a big gain
but it will enable us to go further and attain 1WAY Deluxe&#8482;.</p>

<p>The top-level template only needs a slight change. We no longer pass in an
<code>on-star-click</code> action but instead an <code>on-update</code> one. This will serve for the
upstream synchronization, setting what changed in the component on the band
object (the model) of the controller.</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;panel panel-default band-panel&quot;&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    {{band-form band=model
                errors=errors
                on-save=(action &quot;saveBand&quot;)
                on-update=(action &quot;updateBandProperty&quot;)}}
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>


<p>In accordance, the only thing that has changed in the controller is that
the <code>updateStarRating</code> action has been replaced by <code>updateBandProperty</code>. This is
the manual syncing:</p>

<div>
  <pre><code class='javascript'>export default Ember.Controller.extend({
  (...)
  actions: {
    updateBandProperty(property, value) {
      this.get(&#39;model&#39;).set(property, value);
    },

    (...)
  }
});</code></pre>
</div>


<p>In the template, the two-way bound <code>input</code> helpers are out, substituted by
regular input tags. We attach event listeners to them which will trigger the
synchronization proces (I wrote <a href="http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20.html">a post</a> about how that works a few months ago):</p>

<div>
  <pre><code class='html'>&lt;div class={{if errors.name &quot;form-group has-error&quot; &quot;form-group&quot;}}&gt;
  &lt;label for=&quot;band-name&quot;&gt;Name&lt;/label&gt;
  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-name&quot; value={{band.name}}
    oninput={{action &quot;nameDidChange&quot; value=&quot;target.value&quot;}} /&gt;
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-year&quot;&gt;Formed in&lt;/label&gt;
  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-year&quot; value={{band.year}}
    oninput={{action &quot;yearDidChange&quot; value=&quot;target.value&quot;}} /&gt;
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-rating&quot;&gt;Rating&lt;/label&gt;
  {{star-rating id=&quot;band-rating&quot; item=band rating=band.rating on-click=(action &quot;ratingDidChange&quot;)}}
&lt;/div&gt;
&lt;button type=&quot;submit&quot; class=&quot;btn btn-primary pull-right&quot; {{action &quot;saveBand&quot;}}&gt;Submit&lt;/button&gt;</code></pre>
</div>


<p><code>nameDidChange</code>, <code>yearDidChange</code> and <code>ratingDidChange</code> all end up calling the
passed in closure action, <code>on-update</code>, with the name of the property that has
changed and its new value. This calls <code>updateBandProperty</code> in the controller we
already saw:</p>

<div>
  <pre><code class='html'>import Ember from &#39;ember&#39;;

export default Ember.Component.extend({
  tagName: &#39;form&#39;,
  band: null,
  errors: null,
  &quot;on-update&quot;: null,
  &quot;on-save&quot;: null,

  actions: {
    saveBand() {
      this.attrs[&#39;on-save&#39;]();
    },

    nameDidChange(value) {
      this.attrs[&#39;on-update&#39;](&#39;name&#39;, value);
    },
    yearDidChange(value) {
      this.attrs[&#39;on-update&#39;](&#39;year&#39;, value);
    },
    ratingDidChange(params) {
      const { rating } = params;
      this.attrs[&#39;on-update&#39;](&#39;rating&#39;, rating);
    },
  }
});</code></pre>
</div>


<p>From the outside, the app works just as before. The band name changes in the
list as we edit it in the text field:</p>

<p><img src="http://balinterdi.com/images/posts/tale-of-two-bindings/one-way-bindings-in-action.gif" alt="One-way bindings in action" /></p>

<p>However, we know that under the hood our code took control of propagating data
changes. We have undone the string that kept the two sides (two components)
tied strongly together. In the third and final iteration, we&#8217;ll leverage that to
move validation where it belongs and add a micro-feature.</p>

<h3>Take 3: 1WAY Deluxe&#8482;</h3>

<p>Now, for the cool part. Now that we&#8217;re free to change band-related properties on
the component without affecting the properties of the band object (the model of
the controller), we no longer have a shared state.</p>

<p>The first thing we&#8217;ll do is to move the validation into the <code>band-form component</code>.
<code>band-form</code> will be also less chatty. It will only send property updates when
the form is submitted. That means we don&#8217;t need to pass in the <code>errors</code> object
or an <code>on-update</code> action:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;panel panel-default band-panel&quot;&gt;
  &lt;div class=&quot;panel-body&quot;&gt;
    {{band-form band=model on-save=(action &quot;saveBand&quot;)}}
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>


<p>That implies that the controller can be really slimmed down to the <code>saveBand</code>
action:</p>

<div>
  <pre><code class='html'>import Ember from &#39;ember&#39;;

export default Ember.Controller.extend({
  actions: {
    saveBand(properties) {
      const band = this.get(&#39;model&#39;);
      band.setProperties(properties);

      return band.save().then(() =&gt; {
        console.log(&quot;Band is saved&quot;);
      });
    }
  }
});</code></pre>
</div>


<p>Note how the input field values in the <code>band-form</code> template are now bound to
properties on the component as opposed to that of the passed in <code>band</code> object:</p>

<div>
  <pre><code class='html'>&lt;div class={{if errors.name &quot;form-group has-error&quot; &quot;form-group&quot;}}&gt;
  &lt;label for=&quot;band-name&quot;&gt;Name&lt;/label&gt;
  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-name&quot; value={{name}}
    oninput={{action &quot;nameDidChange&quot; value=&quot;target.value&quot;}} /&gt;
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-year&quot;&gt;Formed in&lt;/label&gt;
  &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-year&quot; value={{year}}
    oninput={{action &quot;yearDidChange&quot; value=&quot;target.value&quot;}} /&gt;
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-rating&quot;&gt;Rating&lt;/label&gt;
  {{star-rating id=&quot;band-rating&quot; item=band rating=rating on-click=(action &quot;ratingDidChange&quot;)}}
&lt;/div&gt;
&lt;div class=&quot;form-group button-panel&quot;&gt;
  &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary pull-right&quot; {{action &quot;saveBand&quot;}}&gt;Submit&lt;/button&gt;
  &lt;button type=&quot;button&quot; class=&quot;btn btn-danger pull-right&quot; {{action &quot;reset&quot;}}&gt;Reset&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>


<p>Little else has changed but a second button, Reset, already gives you a taste of
things to come. Let&#8217;s see the component definition:</p>

<div>
  <pre><code class='javascript'>import Ember from &#39;ember&#39;;

export default Ember.Component.extend({
  tagName: &#39;form&#39;,
  band: null,
  &quot;on-save&quot;: null,

  name:    null,
  year:    null,
  rating:  null,
  errors:  null,

  // Validation code comes here, copied verbatim from the controller

  resetOnInit: Ember.on(&#39;init&#39;, function() {
    this.resetFromBand();
  }),

  resetFromBand() {
    [&#39;name&#39;, &#39;year&#39;, &#39;rating&#39;].forEach((field) =&gt; {
      const valueInBand = this.get(&#39;band&#39;).get(field);
      this.set(field, valueInBand);
    });
  },

  actions: {
    saveBand() {
      this.validate();
      if (this.get(&#39;hasErrors&#39;)) {
        return;
      }

      return this.attrs[&#39;on-save&#39;](this.getProperties([&#39;name&#39;, &#39;year&#39;, &#39;rating&#39;]));
    },

    nameDidChange(value) {
      this.set(&#39;name&#39;, value);
    },
    yearDidChange(value) {
      this.set(&#39;year&#39;, value);
    },
    ratingDidChange(params) {
      const { rating } = params;
      this.set(&#39;rating&#39;, value);
    },
    reset() {
      this.resetFromBand();
    }
  }
});</code></pre>
</div>


<p>I cut out the code responsible for validation since that has just been brought
over from the controller.</p>

<p>The interesting stuff happens in <code>resetFromBand</code> which is both called when the
component comes to life and when the Reset button is clicked. It copies the
<code>name</code>, <code>year</code> and <code>rating</code> properties of the band onto those of the component,
effectively resetting them to their original value. That&#8217;s the only reason we
still need to pass in the band object into the component.</p>

<p>Also notice how the <code>name</code> and the <code>rating</code> are not updated on the band object
as we interact with the form:</p>

<p><img src="http://balinterdi.com/images/posts/tale-of-two-bindings/one-way-deluxe-in-action.gif" alt="1WAY Deluxe in action" /></p>

<p>Having the data validated by the form acts as a guard. The save action is only
triggered if the data was found to be valid. It is only then that the form&#8217;s
data will overwrite that of the band object. Data flows both ways but in a very
controlled way.</p>

<p>To take this further, thanks to closure actions, we could even display an error in the <code>band-form</code>
component if the save operation fails on the controller:</p>

<div>
  <pre><code class='javascript'>export default Ember.Component.extend({
  (...)
  actions: {
    saveBand() {
      this.validate();
      if (this.get(&#39;hasErrors&#39;)) {
        return;
      }
      const properties = this.getProperties([&#39;name&#39;, &#39;year&#39;, &#39;rating&#39;]);
      return this.attrs[&#39;on-save&#39;](properties)
        .catch((error) =&gt; {
          this.set(&#39;errors.base&#39;, error.get(&#39;message&#39;));
        });
    },

    (...)
  }
});</code></pre>
</div>


<p><strong>UPDATE</strong></p>

<h3>Take 4: 1WAY Deluxe&#8482; without input cursor wackiness</h3>

<p>The above 1WAY Deluxe&#8482; has a bug that <a href="https://twitter.com/rwjblue">Robert Jackson</a> pointed out and that
I did not realize while building the demo app. The cursor in the text field
always jumps back at the end of the text after each change:</p>

<p><img src="http://balinterdi.com/images/posts/tale-of-two-bindings/1way-deluxe-input-wackiness.gif" alt="1WAY Deluxe input wackiness" /></p>

<p>During the Glimmer rewrite he spend a lot of time tracking down that bug, the
result of which is the <a href="https://github.com/dockyard/ember-one-way-input"><code>ember-one-way-input</code> Ember addon</a>.</p>

<p>So that&#8217;s what we should use instead of regular input tags. We first install the
addon with <code>ember install ember-one-way-input</code>. That gives us a <code>one-way-input</code>
component that takes an <code>update</code> action which will be triggered at each change
of the input&#8217;s value (more precisely, on both <code>change</code> and <code>input</code> events).</p>

<p>Let&#8217;s replace the input tags in the component&#8217;s template:</p>

<div>
  <pre><code class='html'>&lt;div class={{if errors.name &quot;form-group has-error&quot; &quot;form-group&quot;}}&gt;
  &lt;label for=&quot;band-name&quot;&gt;Name&lt;/label&gt;
  {{one-way-input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-name&quot; value=name
    update=(action &quot;nameDidChange&quot;)}}
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-year&quot;&gt;Formed in&lt;/label&gt;
  {{one-way-input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;band-year&quot; value=year
    update=(action &quot;yearDidChange&quot;)}}
&lt;/div&gt;
&lt;div class=&quot;form-group&quot;&gt;
  &lt;label for=&quot;band-rating&quot;&gt;Rating&lt;/label&gt;
  {{star-rating id=&quot;band-rating&quot; item=band rating=rating on-click=(action &quot;ratingDidChange&quot;)}}
&lt;/div&gt;
&lt;div class=&quot;form-group button-panel&quot;&gt;
  &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary pull-right&quot; {{action &quot;saveBand&quot;}}&gt;Submit&lt;/button&gt;
  &lt;button type=&quot;button&quot; class=&quot;btn btn-danger pull-right&quot; {{action &quot;reset&quot;}}&gt;Reset&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>


<p>Nothing else needs to change for the cursor position weirdness to go away:</p>

<p><img src="http://balinterdi.com/images/posts/tale-of-two-bindings/1way-deluxe-with-one-way-input.gif" alt="1WAY Deluxe input without cursor wackiness" /></p>

<p>Thank you to <a href="https://twitter.com/rwjblue">Robert Jackson</a> and <a href="https://twitter.com/toranb">Toran Billups</a> for spotting this and pointing me
to the solution.</p>

<h3>Conclusion</h3>

<p>I&#8217;m really excited and curious about how many things this makes possible. As I
said in my presentation, we&#8217;re (but surely: I am) only figuring out both the
possibilities &#8220;managed&#8221; one-way bindings open up and the best way to work with
them. So if you have thoughts or insights, please do share them in the comments.</p>

<p>NOTE: I published <a href="https://github.com/balinterdi/tale-of-two-bindings">the demo app of this post on Github.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember 2 just went live]]></title>
    <link href="http://balinterdi.com/2015/10/01/rock-and-roll-with-ember-2-just-went-live.html"/>
    <updated>2015-10-01T09:48:00+02:00</updated>
    <id>http://balinterdi.com/2015/10/01/rock-and-roll-with-ember-2-just-went-live</id>
    <content type="html"><![CDATA[<p>The 2nd edition of my critically acclaimed book, <a href="http://rockandrollwithemberjs.com">Rock and Roll with
Ember.js</a>, has just been published. The number 2 does not only denote the 2nd
edition but also the fact that it runs on Ember (and Ember Data) 2.0 and that it
will follow the 2.x development path of the framework.</p>

<p>The 2nd edition adds 4 new chapters: Animations, Making an Ember
addon, Writing modern JavaScript (ES2015) and Deployment. Here is the complete
set list:</p>

<ol>
<li>Introduction to Ember.js</li>
<li>Ember CLI</li>
<li>Templates and data bindings</li>
<li>Routing</li>
<li>Nested routes</li>
<li>Actions</li>
<li>Components</li>
<li>Controllers</li>
<li>Advanced routing</li>
<li>Talking to a backend - with Ember Data</li>
<li>Testing</li>
<li>Sorting and searching with query params</li>
<li>Loading and error routes</li>
<li>Helpers</li>
<li>Animations</li>
<li>Making an Ember addon</li>
<li>ES2015 - Writing modern JavaScript</li>
<li>Deployment</li>
</ol>


<p>As many readers have said, keeping the book up-to-date with the latest stable
Ember release also makes it a great reference book on current Ember idioms and
features.</p>

<p>Oh, and did I mention I am running a 20% discount on all packages until Monday,
10/05, 23:59 PST?  There are also a few other goodies in the bag, so I encourage
you to <a href="http://rockandrollwithemberjs.com">check out the book now</a> before prices revert to their normal level.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Select in Ember with multiple selection]]></title>
    <link href="http://balinterdi.com/2015/09/25/select-in-ember-with-multiple-selection.html"/>
    <updated>2015-09-25T14:24:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/25/select-in-ember-with-multiple-selection</id>
    <content type="html"><![CDATA[<iframe
  width="178" height="24" style="border:0px"
  src="https://mixonic.github.io/ember-community-versions/2015/09/25/select-in-ember-with-multiple-selection.html">
</iframe>


<p>A few weeks ago I wrote a blog post about <a href="http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20.html">how to do a select in Ember 2</a>,
that seemed to be popular. I also received good comments about advanced versions
of the same problem, namely how the solution would have to change to deal with
the case if the items to select from are objects and how to tackle multiple
selections. I thus decided to do a Part 2, showing a solution for these cases.
Comment are welcome, as always.</p>

<h3>Multiple selection with simple strings as items</h3>

<p>Let&#8217;s tackle the easier problem first, being able to select more than one items,
but the items are simple string values. The values will serve both as the value
and the content of the options.</p>

<p>I added some extra Bootstrap markup and a list to see which items are selected:</p>

<div>
  <pre><code class='html'>&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-sm-8&quot;&gt;
      &lt;h2&gt;Select some bands&lt;/h2&gt;
      &lt;select style=&quot;height:100px&quot; class=&quot;form-control&quot; multiple onchange={{action &quot;selectBand&quot;}}&gt;
        {{#each bands as |bandChoice|}}
        &lt;option value={{bandChoice}} selected={{include selectedBands bandChoice}}&gt;{{bandChoice}}&lt;/option&gt;
        {{/each}}
      &lt;/select&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-sm-4&quot;&gt;
      {{#if selectedCount}}
        &lt;h2&gt;Selected bands ({{selectedCount}})&lt;/h2&gt;
      {{else}}
        &lt;h2&gt;Selected bands&lt;/h2&gt;
      {{/if}}
      &lt;ul class=&quot;list-group&quot;&gt;
        {{#each selectedBands as |band|}}
          &lt;li class=&quot;list-group-item&quot;&gt;{{band}}&lt;/li&gt;
        {{else}}
          &lt;li class=&quot;list-group-item&quot;&gt;No band selected.&lt;/li&gt;
        {{/each}}
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>


<p>I added the <code>multiple</code> attribute to the <code>select</code> tag to allow multiple
selections. Not much has changed from the earlier example. When the user
selects an option, whether in a way that clears the earlier selection (simple
click) or adds to it (ctrl/cmd + click), the <code>onchange</code> event is fired, and our
<code>selectBand</code> handler will handle it. We expect that handler to set
<code>selectedBands</code> so that the list of selected bands gets updated correctly. So
let&#8217;s see the controller:</p>

<div>
  <pre><code class='html'>export default Ember.Controller.extend({
  bands: [&#39;Pearl Jam&#39;, &#39;Tool&#39;, &#39;Long Distance Calling&#39;, &#39;Led Zeppelin&#39;],

  selectedBands: [],

  selectedCount: Ember.computed.reads(&#39;selectedBands.length&#39;),

  actions: {
    selectBand(event) {
      const selectedBands = Ember.$(event.target).val();
      this.set(&#39;selectedBands&#39;, selectedBands || []);
    }
  }
});</code></pre>
</div>


<p>For multiple selections, jQuery, aliased as <code>Ember.$</code>, returns an array of the
selected options values as the select&#8217;s value, so all we have to do is assign
this to the <code>selectedBands</code> property. In case nothing is selected, <code>val()</code>
returns <code>null</code>, so we guard against transferring this to <code>selectedBands</code> by
defaulting to an empty array.</p>

<p>There is one more thing you might have noticed, and that is the <code>include</code> helper
in the template. We want to mark the option as selected if its value is included
in the selectedBands:</p>

<div>
  <pre><code class='html'>&lt;select style=&quot;height:100px&quot; class=&quot;form-control&quot; multiple onchange={{action &quot;selectBand&quot;}}&gt;
  {{#each bands as |bandChoice|}}
  &lt;option value={{bandChoice}} selected={{include selectedBands bandChoice}}&gt;{{bandChoice}}&lt;/option&gt;
  {{/each}}
&lt;/select&gt;</code></pre>
</div>


<p>The <code>include</code> helper is not provided by Ember but it is rather easy to write
ourselves:</p>

<div>
  <pre><code class='html'>import Ember from &#39;ember&#39;;

export function include(params) {
  const [items, value] = params;
  return items.indexOf(value) &gt; -1;
}

export default Ember.Helper.helper(include);</code></pre>
</div>


<p>That is all there is to it:</p>

<p><img src="http://balinterdi.com/images/posts/select-in-ember-with-multiple-selections/multiple-select-with-ember.gif" alt="Multiple selection" /></p>

<h3>Multiple selection with objects as items</h3>

<p>This is just a tad more difficult, as we cannot directly have objects as options
values. Let&#8217;s assume that these objects have a property that identifies them
unambiguously (which is a fair assumption to make), usually referred to as <code>id</code>:</p>

<div>
  <pre><code class='html'>import Ember from &#39;ember&#39;;

export default Ember.Controller.extend({
  bands: [
    Ember.Object.create({ id: &quot;1&quot;, name: &#39;Pearl Jam&#39;, formedIn: 1990 }),
    Ember.Object.create({ id: &quot;2&quot;, name: &#39;Tool&#39;, formedIn: 1991 }),
    Ember.Object.create({ id: &quot;3&quot;, name: &#39;Long Distance Calling&#39;, formedIn: 2003 }),
    Ember.Object.create({ id: &quot;4&quot;, name: &#39;Led Zeppelin&#39;, formedIn: 1970 })
  ],
  (...)
});</code></pre>
</div>


<p>We&#8217;ll use the <code>id</code> as the option value and display the name:</p>

<div>
  <pre><code class='html'>(...)
&lt;select style=&quot;height:100px&quot; class=&quot;form-control&quot; multiple onchange={{action &quot;selectBand&quot;}}&gt;
  {{#each bands as |bandChoice|}}
    &lt;option value={{bandChoice.id}} selected={{include selectedBandIds bandChoice.id}}&gt;{{bandChoice.name}}&lt;/option&gt;
  {{/each}}
&lt;/select&gt;
(...)</code></pre>
</div>


<p>On the controller, we collect the id of each selected band, and if we need to
display their names, we simply make the mapping between these two:</p>

<div>
  <pre><code class='html'>export default Ember.Controller.extend({
  (...)
  selectedBandIds: [],

  selectedBands: Ember.computed(&#39;selectedBandIds.[]&#39;, function() {
    return this.get(&#39;selectedBandIds&#39;).map((bandId) =&gt; {
      return this.get(&#39;bands&#39;).findBy(&#39;id&#39;, bandId);
    });
  }),
  (...)
});</code></pre>
</div>


<p><code>bands.findBy</code> is our makeshift store service, which allows us to find an object
in a collection by its id. If we used Ember Data, it would become
<code>store.findRecord('band', bandId)</code> or <code>store.peekRecord('band', bandId)</code>. The
only other difference from before is that we set <code>selectedBandIds</code> instead of
<code>selectedBands</code> in the action handler:</p>

<div>
  <pre><code class='html'>export default Ember.Controller.extend({
  (...)
  actions: {
    selectBand(event) {
      const selectedBandIds = Ember.$(event.target).val();
      this.set(&#39;selectedBandIds&#39;, selectedBandIds || []);
    }
  }
});</code></pre>
</div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll With Ember 2 is coming soon!]]></title>
    <link href="http://balinterdi.com/2015/09/16/rock-and-roll-with-ember-2-is-coming-soon.html"/>
    <updated>2015-09-16T15:54:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/16/rock-and-roll-with-ember-2-is-coming-soon</id>
    <content type="html"><![CDATA[<h3>tl;dr</h3>

<p>I will publish a second, extended edition of my book, Rock and Roll with Ember
in about two weeks, at the end of September. Here is what you need to know:</p>

<ul>
<li>I make the same promise as with the current edition: you buy it once, you get
all updates for free until 3.0 comes out</li>
<li>4 extra chapters are added about advanced Ember topics, bringing the number
of chapters to 18</li>
<li>There will be a short launch period where the book packages are offered at a
discount.</li>
</ul>


<p>To be in-the-loop about the launch and know about the launch discount, <a href="http://balinterdi.com/2015/09/16/rock-and-roll-with-ember-2-is-coming-soon.html#launch-date">sign up
below</a>,
at the end of the post. Read on for more details.</p>

<h3>The short past, present and future of Rock and Roll with Ember</h3>

<p>Almost exactly 7 months ago, I published my book, Rock and Roll with Ember.js,
that helps people learn the glorious framework. Ember has since went through
quite some changes and I kept the book up-to-date with roughly an update each
month.</p>

<p>Ember 2 was released about a month ago, on the 13rd of August. True to the
&#8220;stability without stagnation&#8221; philosophy, the 2.0 release did not contain any
new features but dropped a lot of deadweight, API methods and syntaxes that had
been deprecated somewhere along the 1.x process.</p>

<p>Thanks to the transparency of the road ahead through RFCs and discussions on
other forums, it can already be clearly seen that the 2.x series will bring a
great deal of new and fascinating features. Routable components, angle-bracket
components and contextual lookup in components are some of the bigger things
that we can expect on the road to 3.0. The expected simplifications (for
example, routable components replacing controllers) will come with major changes
in how one writes an idiomatic app in Ember 2.</p>

<p>I&#8217;ve been following along the 1.x series with fascination and a keen eye to
apply the changes to my book and the included application. I want to do the same
along the Ember 2.x line and thus I hereby announce the second edition of the
book, Rock and Roll with Ember 2!</p>

<h3>Free updates policy</h3>

<p>To clarify, with Rock and Roll with Ember 2,  I intend to follow the &#8220;book
development and release&#8221; process of the first edition of the book that I&#8217;ve now
named &#8220;Buy once, get all updates for free (until the next major version)&#8221;. I
assert that if you buy any of my book packages, you get all subsequent updates
for free, until 3.0 lands (which is probably 12-18 months away. Geez, do I
really want to do that? :) ).</p>

<h3>New content</h3>

<p>Keeping the book&#8217;s current content up-to-date is not all. The second edition
will contain 4 extra chapters on some advanced topics (Animations, Making an
Ember CLI addon, Deployment and ES2015 &amp; computed macros) bringing the total
chapter count to 18 (the Getting ready for Ember 2.0 is retired).</p>

<p>Further content changes are expected as Ember 2 evolves (see above for what can
already be known about these changes), so the content on launch day will by no
means be the final content of the book. It will constantly improve and be kept
in-sync with the latest stable 2.x version of Ember.</p>

<h3 id="launch-date">When does it launch?</h3>


<p>Very soon, probably in two weeks, mark the date (with a pencil, for the moment):
September 30, 2015.</p>

<p>Stand ready, Rock and Roll with Ember 2 is coming to a virtual bookstore near
you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll With Ember.js v1.13.9 Is Out]]></title>
    <link href="http://balinterdi.com/2015/09/11/rock-and-roll-with-ember-dot-js-v1-dot-13-dot-9-is-out.html"/>
    <updated>2015-09-11T11:42:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/11/rock-and-roll-with-ember-dot-js-v1-dot-13-dot-9-is-out</id>
    <content type="html"><![CDATA[<p>I have just released another update to the Rock and Roll with Ember.js book,
keeping it in sync with Ember 1.13.9. On top of that (mostly on top of that,
since there weren&#8217;t as many things to do for the Ember upgrade), I added some
content, removed some other ones, fixed a few wrong paths in code comments,
clarified a few code lines to help people build the app along, and the like. The
usual stuff, quoi.</p>

<p>Here are the bigger chunks:</p>

<ul>
<li>Extended the Testing chapter with a (controller) unit test. I removed the
component&#8217;s unit test in an earlier update (integration tests are vastly
superior for components) but now realized unit testing was missing.</li>
<li>Switched to a dashless helper, <code>capitalize</code> instead of <code>capitalize-words</code>.
Ember 1.13.0 and up auto-register helpers with and without dashes, so there is
no need for the more verbose form.</li>
<li>Fixed a few places where the <code>updateRating</code> action was still in the route.
When I switched to a closure action, I had to move the action handler to the
controller but missed a couple of places in the subsequent chapters.</li>
<li>The epub version had two missing code snippets due to bad formatting (thanks
to <a href="https://github.com/morganick">@morganick</a>)</li>
</ul>


<p>There are a few other minor fixes, the whole list can be found in the <a href="https://github.com/balinterdi/rarwe-issues/issues?q=is%3Aissue+milestone%3A1.13.9+is%3Aclosed">Github issues repo</a></p>

<p>I want to thank <a href="http://andrew.davison-family.com">Andrew Davison</a> who did most
of the error reporting for this update. Thank you, Andrew!</p>

<p>Stay tuned for more goodies early next week, or sign up below so that you don&#8217;t
miss any in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complex Component Design in Ember.js - Intro]]></title>
    <link href="http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro.html"/>
    <updated>2015-09-10T11:07:00+02:00</updated>
    <id>http://balinterdi.com/2015/09/10/complex-component-design-in-ember-intro</id>
    <content type="html"><![CDATA[<p>The title would probably better be &#8220;Somewhat Complex Component Design in Ember.js&#8221;
but any title including &#8216;Somewhat&#8217; rules out pompousness. I therefore don&#8217;t
claim that the series of blog posts I intend to start here will represent the
pinnacle of component design in Ember. There definitely are and definitely will
be more complex component structures and scenarios.</p>

<p>The component developed in the series is one that autocompletes as the user
starts to write the input and allows selecting from a fixed set of options.
Nothing extraordinary but complex enough so that the design/interaction
principles can be applied and explained while developing the component.</p>

<p>Important disclaimer: I am not an expert on component design (which, it seems
to me, is quite a complex topic). I got intrigued by it thanks to <a href="https://twitter.com/ryanflorence">Ryan Florence</a>
and his talks and learned most of the basics from him. My choice of component
probably also has to do something with Ryan. He developed the ic-autocomplete
component from which I took several ideas, sometimes simply copying the
implementation.</p>

<h3>Rationale</h3>

<p>So you probably ask: why reinvent the wheel? Why develop something that is
already done and not something new?</p>

<p>First of all, I (and science says most of us) learn best by doing. I wanted to
use an example where I already have a sample implementation but also understand
why the original implementation did things as it did and see whether I can make
the component simpler or more robust. I wanted to face the problems, to feel
the pain of doing things a certain way, and find solutions for typical,
recurring problems.</p>

<p>It&#8217;s also important to remember that when Ryan developed their autocomplete
component, there were no block parameters, no closure actions and no direct
attribute bindings. One still had to resort to observers in several cases.
Two-way bindings were still in, and the de-facto way of communication between
pieces of a component structure.</p>

<p>Ember has come a long way since then and its components converged toward those
of React in its reactive, &#8220;rerender everything&#8221; approach. Potentially some of
the ideas explained in the series can be applied to React and other libraries,
too, and thus might prove useful to more people.</p>

<h3>So many words, so little code</h3>

<p>To have something (almost) tangible in this first intro post, too, let me show
you how one would interact with the finished(?) component. If you have read my
<a href="http://balinterdi.com/2014/06/26/ember-gotcha-controllers-are-singletons.html">earlier</a> <a href="http://balinterdi.com/2014/03/05/sorting-arrays-in-ember-dot-js-by-various-criteria.html">posts</a> or <a href="http://rockandrollwithemberjs.com">my book</a>, it will come as no surprise that I use it here to
select a great musician from a defined set of them:</p>

<p><img src="http://balinterdi.com/images/posts/complex-component-design-ember/ember-autocomplete-demo.gif" alt="Selecting an
artist" /></p>

<p>This short intro and the demo have hopefully whetted your appetite and you&#8217;ll
join me for the next part of the series:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to do a select (dropdown) in Ember 2.0?]]></title>
    <link href="http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20.html"/>
    <updated>2015-08-29T17:43:00+02:00</updated>
    <id>http://balinterdi.com/2015/08/29/how-to-do-a-select-dropdown-in-ember-20</id>
    <content type="html"><![CDATA[<iframe
  width="178" height="24" style="border:0px"
  src="https://mixonic.github.io/ember-community-versions/2015/08/29/how-to-do-a-select-dropdown-in-ember-2-0.html">
</iframe>


<p>When the select view was about to be removed from Ember, a lot of people
-myself included- wondered how it was going to be replaced. My bet was on a
&#8216;select component&#8217;, after all, views should be transformed into components, right?</p>

<p>Then I saw <a href="https://gist.github.com/ef4/8367f996eb7b57d1f7a5">this gist</a> from Edward Faulkner:</p>

<div>
  <pre><code class='html'>&lt;select onchange={{action (mut vehicle) value=&quot;target.value&quot;}}&gt;
  {{#each vehicles as |vehicleChoice|}}
    &lt;option value={{vehicleChoice}} selected={{eq vehicle vehicleChoice}}&gt;{{vehicleChoice}}&lt;/option&gt;
  {{/each}}
&lt;/select&gt;</code></pre>
</div>


<p>I did not understand half of it, so I dug down to see how the pieces come
together. In this short post, I want to explain what I have found out.</p>

<h3>Solve a simpler problem</h3>

<p>A great mathematician, George Polya, wrote a book in 1945 called <a href="http://smile.amazon.com/How-Solve-It-Mathematical-Princeton/dp/069111966X/ref=smi_www_rco2_go_smi_g2147660602?_encoding=UTF8&amp;*Version*=1&amp;*entries*=0&amp;ie=UTF8">&#8220;How to Solve It&#8221;</a>,
in which he puts down a framework for solving mathematical problems. One
(probably more) of his recommendations can be applied to software development,
too: Solve a simpler problem.</p>

<p>Heeding this advice, we&#8217;ll first tackle a more mundane problem and in the
second round, we&#8217;ll solve the original riddle.</p>

<p>Let&#8217;s assume Edward had written the following:</p>

<div>
  <pre><code class='html'>&lt;select onchange={{action &quot;selectVehicle&quot; value=&quot;target.value&quot;}}&gt;
  {{#each vehicles as |vehicleChoice|}}
    &lt;option value={{vehicleChoice}} selected={{eq vehicle vehicleChoice}}&gt;{{vehicleChoice}}&lt;/option&gt;
  {{/each}}
&lt;/select&gt;</code></pre>
</div>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">vehicle</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">vehicles</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nb">String</span><span class="p">.</span><span class="nx">w</span><span class="p">(</span><span class="s1">&#39;Tesla Chrysler Toyota&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">selectVehicle</span><span class="p">(</span><span class="nx">vehicle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;vehicle&#39;</span><span class="p">,</span> <span class="nx">vehicle</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is easier (as in: more familiar) but there are still a few things that
might need explanation. First, before 1.13.3, event listeners on browser
events could not trigger Ember actions like that:</p>

<div>
  <pre><code class='html'>&lt;select onchange={{action &quot;selectVehicle&quot; value=&quot;target.value&quot;}}&gt;</code></pre>
</div>


<p>What this does, is that when the selected value of the dropdown changes, it
fires the onchange listener we added on the <code>&lt;select&gt;</code> which results in calling
our action handler, <code>selectVehicle</code>. The handler just updates the <code>vehicle</code>
property of the controller. This will mark as selected the dropdown option the
user picked due to the <code>selected={{eq vehicle vehicleChoice}}</code> term.</p>

<p>(<code>eq</code> comes from a great little Ember addon called <a href="https://github.com/jmurphyau/ember-truth-helpers">ember-truth-helpers</a>. It
returns true if the two parameters are equal).</p>

<p>Since there is no two-way binding set up between the selected option of the
dropdown and the controller property (<code>vehicle</code>), this needs to be done using a
DOM event listener (<code>onchange</code>) and updating in the action handler. That&#8217;s
exactly what happens in the <code>selectVehicle</code> action handler.</p>

<p>So far so good, let&#8217;s move on.</p>

<h3>Solve the original one</h3>

<p>Wait a minute. How did <code>selectVehicle</code> receive the selected vehicle choice (e.g
Toyota) when the <code>{{action}}</code> helper did not specify any parameters?</p>

<p>When the browser calls an event listener, it passes it an event object which
would become the first parameter of <code>selectVehicle</code>. However, <code>selectVehicle</code>
does not receive the event but the actual value of the selected option, how does
that come about? The missing link is a lesser-known option of the <code>action</code>
helper, <code>value</code>. The property passed to it is read off of the first parameter of
the handler and then replaces it. In our example, <code>target.value</code> is looked up on
the event object, which is exactly the value of the select option that triggered
the <code>onchange</code> event.</p>

<p>Ok, only one thing left.</p>

<p>The original example had this line:</p>

<div>
  <pre><code class='html'>&lt;select onchange={{action (mut vehicle) value=&quot;target.value&quot;}}&gt;</code></pre>
</div>


<p>instead of the more familiar:</p>

<div>
  <pre><code class='html'>&lt;select onchange={{action &quot;selectVehicle&quot; value=&quot;target.value&quot;}}&gt;</code></pre>
</div>


<p>What mut does here is that it allows updating the passed property, so when the
action is called, <code>vehicle</code> is set to the passed value, the value of the
selected option. That is it, we solved the riddle.</p>

<p>The same implementation pattern can be used to update the properties related to
checkboxes, input fields and radio buttons. This new way of doing things takes a
while to get used to, but we&#8217;ll see more and more of it with one-way bindings
becoming best practice.</p>

<p>(By the way, my PR to add a section about <a href="https://github.com/emberjs/guides/pull/670">the actions helper&#8217;s <code>value</code> option</a> to
the guides was merged yesterday, so hopefully more people will know about it.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll With Ember.js v1.13.7 Is Out]]></title>
    <link href="http://balinterdi.com/2015/08/07/rock-and-roll-with-ember-dot-js-v1-dot-13-dot-7-is-out.html"/>
    <updated>2015-08-07T11:38:00+02:00</updated>
    <id>http://balinterdi.com/2015/08/07/rock-and-roll-with-ember-dot-js-v1-dot-13-dot-7-is-out</id>
    <content type="html"><![CDATA[<p>I am happy to announce another update to the Rock and Roll with Ember.js book,
in line with the latest Ember CLI, 1.13.7. Book customers have already received
the updated version, here is how it got better:</p>

<ul>
<li><strong>Update to Ember CLI 1.13.7</strong></li>
<li><strong>Upgrade to Ember version 1.13.6</strong></li>
<li>Explain better the difference between sync and async test helpers and how
these latter work in Ember</li>
<li>Make the stubs for creating bands and songs not take an id, to be similar to
how the actual API works</li>
<li>Update section about Ember Data being in beta</li>
<li>Show what the custom <code>submit</code> async helper does when it first appears</li>
<li>Remove unit tests for components as <code>ember generate component-test</code> now
generates integration-style tests</li>
<li>Extract the <code>wait</code> helper used across two examples (for showing loading
routes/templates)</li>
<li>Update jsbin in the Templates chapter to use the latest Ember version</li>
<li>Fix importing the capitalizeHelper in the code snippet in the book</li>
<li><p>Last but not least, the pdf version of the book now has page numbers and a
nice, expandable table of contents so you can jump to any chapter or section
from anywhere:</p>

<p><img src="http://balinterdi.com/images/posts/rarwe-1-13-7/preview-toc.png" alt="Collapsable TOC and page numbers" /></p>

<p>I know, it seems extremely simple to have them from the start but the way the
pdf was generated did not allow for this so we had to find another way. I
again worked with <a href="http://murtra.net/">Almudena Garcia</a> on these design
changes and I whole-heartedly recommend her if you have some front-end (HTML &amp;
CSS) tasks to get done.</p></li>
</ul>


<p>There are a couple of other, smaller changes and you can see the whole list in
<a href="https://github.com/balinterdi/rarwe-issues/issues?q=is%3Aissue+milestone%3A1.13.7+is%3Aclosed">the issues repo</a>. Or you can buy the book <a href="http://rockandrollwithemberjs.com">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js v1.13.3 is out]]></title>
    <link href="http://balinterdi.com/2015/07/17/rock-and-roll-with-ember-dot-js-v1-dot-13-3-is-out.html"/>
    <updated>2015-07-17T10:47:00+02:00</updated>
    <id>http://balinterdi.com/2015/07/17/rock-and-roll-with-ember-dot-js-v1-dot-13-3-is-out</id>
    <content type="html"><![CDATA[<p>It&#8217;s Friday and if it&#8217;s (every 2nd-6th) Friday, it&#8217;s Rock and Roll release day!</p>

<p>Book version 1.13.3 is rolling out as we speak (ok, we don&#8217;t speak and you
probably read this later, but you get the point) which contains the following
changes:</p>

<ul>
<li><strong>Upgrade to Ember version 1.13.3 (the book is in lockstep, too!)</strong></li>
<li><strong>Update to Ember CLI 1.13.1</strong></li>
<li><p><strong>Extended the Components chapter with closure actions.</strong></p>

<p><a href="http://emberjs.com/blog/2015/06/12/ember-1-13-0-released.html#toc_closure-actions">Closure actions</a> are an awesome new way to fire/handle actions introduced
in 1.13 and so it has to be in the book!</p></li>
<li><p><strong>Extended the Testing chapter with component integration tests.</strong></p>

<p>Integration tests make component tests super simple to set up and so much more
descriptive than unit tests. Our beloved star-rating component is now tested
by the shiny new integration tests.</p></li>
<li><p><strong>Get rid of <code>needs</code> in the controller.</strong></p>

<p>There was one instance where I used this to get a nice placeholder text. As a
preparation for Ember 2.0 where <code>needs</code> is going the way of the dodo, I
removed that nasty <code>needs</code>.</p></li>
<li><p><strong>Specify the band-songs relationship as sync.</strong></p>

<p>Starting from 2.0, Ember Data relationships are assumed to be asynchronous
unless otherwise specified. In the Rock &amp; Roll application, we sideload the
songs with the bands, so adding a <code>{ async: false }</code> option to the
relationship was in order.</p></li>
<li><strong>A few CSS fixes, one of them thanks to <a href="https://twitter.com/lonekorean">lonekorean</a></strong></li>
</ul>


<p>The whole change list is observable <a href="https://github.com/balinterdi/rarwe-issues/issues?q=milestone%3A1.13.3+is%3Aclosed">here</a>.</p>

<p>Hoist the sails, Ember 2.0 (and with it, Rock and Roll with Ember 2.0) is on the horizon!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rock and Roll with Ember.js v1.13 is out]]></title>
    <link href="http://balinterdi.com/2015/07/03/rock-and-roll-with-ember-dot-js-v1-dot-13-is-out.html"/>
    <updated>2015-07-03T15:25:00+02:00</updated>
    <id>http://balinterdi.com/2015/07/03/rock-and-roll-with-ember-dot-js-v1-dot-13-is-out</id>
    <content type="html"><![CDATA[<p>Today marks the sixth release of my book, <a href="http://rockandrollwithemberjs.com">Rock and Roll with Ember.js</a>, and
brings it in sync with Ember 1.13. The book follows along the development from
scratch of an Ember application, and chapter by chapter and explains concepts in
the process.</p>

<p>As I have promised, the book is kept up-to-date with the latest stable Ember
version. That implies both using idiomatic Ember and not using deprecated
syntaxes or APIs.</p>

<p>Now that the versioning of Ember Data is in lockstep with that of Ember, I
considered it important to update to the latest Ember Data, too, and will
strive to do so in future releases, too.</p>

<p>Here are the major things I updated for the 1.13 release:</p>

<ul>
<li>Use <code>this.route</code> instead of <code>this.resource</code> in the router map as the latter is now deprecated.</li>
<li>Use <code>Ember.computed</code> and <code>Ember.on</code> instead of the Function prototype
extensions, <code>property</code> and <code>on</code> as extending the Function prototype is
consired a poor practice.</li>
<li>Update the &#8220;Getting ready for Ember 2.0&#8221; chapter as most things are clear now
for the 2.0 release. As I give particular examples for each deprecation, this
chapter can also serve as an update guide for 1.x Ember applications.</li>
<li>Use the new Ember Data find methods, namely <code>store.findAll</code> and
<code>store.findRecord</code>. Before, both fetching a collection and a single record
used <code>store.find</code>.</li>
</ul>


<p>As usual, there are also smaller improvements and fixes and you can find the
whole list in the errata/issues repository for the book, assigned to <a href="https://github.com/balinterdi/rarwe-issues/issues?q=milestone%3A1.13+is%3Aclosed">the release milestone.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Ember Mistakes]]></title>
    <link href="http://balinterdi.com/2015/06/05/common-ember-mistakes.html"/>
    <updated>2015-06-05T00:27:00+02:00</updated>
    <id>http://balinterdi.com/2015/06/05/common-ember-mistakes</id>
    <content type="html"><![CDATA[<p>I wrote an article called <a href="http://www.toptal.com/emberjs/the-8-most-common-ember-js-developer-mistakes">&#8220;The Top 8 Most Common Ember.js Developer
Mistakes&#8221;</a> for Toptal that just went live on their blog. As the name
suggests, it describes the typical pitfalls beginner, and sometimes advanced,
Ember developers make with a mitigation strategy for each of them. I am quite
happy about how it turned out and suggest you <a href="http://www.toptal.com/emberjs/the-8-most-common-ember-js-developer-mistakes">give it a read</a>.</p>

<p>Also, it turned out to have more than 2500 words so I thought it might be
convenient for you to have it as a pdf. It spans 13 pages and you can get it
right here below by providing your email address to send the paper to:</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My book, Rock and Roll with Ember.js, is now live!]]></title>
    <link href="http://balinterdi.com/2015/02/18/rock-and-roll-with-ember-js-is-live.html"/>
    <updated>2015-02-18T09:51:00+01:00</updated>
    <id>http://balinterdi.com/2015/02/18/rock-and-roll-with-ember-js-is-live</id>
    <content type="html"><![CDATA[<p>I started writing my book, Rock &amp; Roll with Ember.js, on July 18, 2014, exactly
7 months ago (More precisely, I prepared some drafts from early chapters most of
which I ended up rewriting before that, but who doesn&#8217;t like a good story?).</p>

<p>Today, I am extremely happy to announce that <a href="http://rockandrollwithemberjs.com">the book is available for purchase</a>!</p>

<h2>Tame the dreaded Ember.js learning curve</h2>

<p>Ember is said to be hard to learn. Developers who are new to the framework hit
a wall and can&#8217;t easily find out how all the pieces fit together.</p>

<p>My own experience tells me that Ember has a small number of core concepts that
you have to grok to be able to tame the learning curve. Once you understand
these key ideas behind the framework&#8217;s design, you will fly over that wall and
see the green meadow filled with flowers and bunnies.</p>

<p>You will build Ember applications with confidence and - if you are like me -
you will love building them.</p>

<h2>Read it and build it!</h2>

<p>My book also has a concept, and a very pragmatic one at that.</p>

<p>In the book, we are building an application, chapter by chapter. As we
progress, we are adding new features to the application, introducing new
Ember concepts that are needed for implementing the feature.</p>

<p>When a list of bands need to be displayed alongside with the songs of the
selected band, we reach for nested routes.  When we need a widget that displays
stars for the songs, we introduce components. When we want to show the user
that loading data from the backend is in progress, we learn about loading
routes.</p>

<h2>Set List</h2>

<p>The book currently has the following chapters:</p>

<ol>
<li>Introduction to Ember.js</li>
<li>Ember CLI</li>
<li>Templates and data bindings</li>
<li>Routing</li>
<li>Nested routes</li>
<li>Actions</li>
<li>Components</li>
<li>Controllers</li>
<li>Advanced routing</li>
<li>Talking to a backend - with Ember Data</li>
<li>Testing</li>
<li>Sorting and searching with query params</li>
<li>Loading and error routes</li>
<li>Helpers</li>
<li>Getting ready for Ember 2.0</li>
</ol>


<p>I say &#8216;currently&#8217; because I will definitely have to change some chapters as
Ember evolves (To give an example, Controllers will probably become Routable components).</p>

<h2>A reference book and a reference application</h2>

<p>Ember moves rapidly towards version 2.0. As each minor version is released, it
brings new syntaxes and deprecates old ones. Even though the Ember Core team
takes extreme care to ensure a smooth upgrade process, it is easy for an
application to lag behind, having a few deprecations here and there and not
using the shiny new tools.</p>

<p>The motto of the Ember 2.0 roadmap is &#8220;Stability without Stagnation&#8221;, that old
syntaxes and practices should vanish gradually, giving ample time for developers
to update their applications. At the same time, Ember should not stagnate, it
should introduce new features.</p>

<p>I adhere to this motto, but, more importantly, my book does, too.</p>

<p>I want the book and the Rock &amp; Roll application to be up-to-date with the latest
stable Ember version and not have any of the deprecations. What that means in
practice is that if you buy one of the packages, you will most likely get book
updates after each 1.x release. And at no extra cost to you until 2.0 ships!</p>

<h2>A bonus deal you will definitely like</h2>

<p>When you <a href="http://rockandrollwithemberjs.com/#stairway-to-heaven">buy one of the packages</a> you also get access to an awesome deal
from <a href="https://divshot.com">Divshot</a>, a company that provides static hosting for your Ember apps.</p>

<p>You get 3 months free of <a href="https://divshot.com/pricing">their Fleet plan</a>, a $150 value.</p>

<h2>The &#8220;New Beginning&#8221; tour</h2>

<p><del>Wait, there is more!</del> To celebrate that the book has finally seen the
light of day, there is a 25% discount <a href="http://rockandrollwithemberjs.com/#pricing">on all packages</a>.</p>

<p>This offer expires on Sunday, February 22, at 23:59 PST, so <a href="http://rockandrollwithemberjs.com">grab yours</a> now!</p>

<h2>Acknowledgements</h2>

<p>I am indebted to all of you who have pushed me through the finish line, either
by praising my screencasts, blog posts and review copies of my book, retweeting
my marketing tweets, giving valuable feedback that made the book better or
simply by pointing out typos in the text.</p>

<p>I would also like to thank you to the Ember Core team whose relentless work
makes Ember better every day. You are putting so much time in, it&#8217;s almost
insane. It&#8217;s kinda obvious but without your contributions, this book would not
exist.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reminiscing about EmberFest 2014]]></title>
    <link href="http://balinterdi.com/2014/09/05/reminiscing-about-emberfest-2014.html"/>
    <updated>2014-09-05T09:55:00+02:00</updated>
    <id>http://balinterdi.com/2014/09/05/reminiscing-about-emberfest-2014</id>
    <content type="html"><![CDATA[<p><a href="https://emberfest.eu">EmberFest 2014</a> ended a week ago and I already feel nostalgic. It
was a great event with great people and you could feel the excitement about
Ember in the air and in all conversations. It was almost single-handedly
organized by <a href="https://haagen-software.no">Joachim Haagen-Skeie</a> for which he deserves huge kudos.</p>

<p>It was really great to associate real people with twitter avatars and have
fascinating conversations about various topics that included the Ember
Inspector, the difficulties in building a build tool and even Firefox OS.</p>

<h3>The functional paradigm making a headway into Emberland</h3>

<p>One thing that struck me about Ember initially is that it seems to rely heavily
on (shared) state. Some (most?) of that is inevitable given Ember being a
performant framework that runs in the browser and is written in Javascript.
None of these facilitates ditching (or minimizing) state and go with a
functional, stateless approach.</p>

<p>On the other hand, I really came to cherish the <a href="http://www.infoq.com/presentations/Simple-Made-Easy">simplicity</a> of the
functional paradigm and have been gravitating towards languages that allow this
(Clojure was, and still is, <a href="http://balinterdi.com/2013/06/19/the-appeal-of-one-paradigm-languages.html">my favorite</a>). So I added a mental
note about my two favorite things being at such a great distance from each other
and moved on.</p>

<p>One theme of the conference and the hallway talks, however, is how Ember
embraces the functional, immutable approach where it makes sense to. It might
have something to do with my confirmation bias, but let me cite the examples
nevertheless. <a href="https://twitter.com/tchak13">Paul Chavard</a> had a talk on his using immutable data
structures in Ember. <a href="http://www.solitr.com/blog/">Jo Liss</a> revealed how Broccoli uses a
&#8220;rebuild-from-scratch&#8221; approach instead of trying to find out which assets to
rebuild at each modification. Finally, Alex Matchneer, aka. machty, prolific
Ember and router.js contributor had <a href="https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/edit#slide=id.p">a presentation on React vs.  Ember</a>
at EmberNYC which you should go read. His <a href="https://docs.google.com/presentation/d/1afMLTCpRxhJpurQ97VBHCZkLbR1TEsRnd3yyxuSQ5YY/edit#slide=id.g380053cce_1786">last slide</a> has a bullet-point
that states: &#8220;Don&#8217;t be surprised if Ember adopts DOM-diffing&#8221;.</p>

<p>It would be an understatement if I said I&#8217;m happy to see the functional world
coming to Ember.</p>

<h3>Promises</h3>

<p>I had a talk at the conference called &#8220;Don&#8217;t call me back - How Ember uses
promises and how you can, too&#8221;. As it usually happens, in doing research for the
talk, I learned a lot not just about promises but about other topics, too. This
time, it was the (in)famous run loop I stumbled across on several
occasions so I am really happy I know a lot more about that beast now. You can
find the slides of my presentation below.</p>

<script async class="speakerdeck-embed" data-slide="10"
data-id="47ee01e011b60132c86e02e2e0c65448" data-ratio="1.33333333333333"
src="http://balinterdi.com//speakerdeck.com/assets/embed.js"></script>


<p>I might even do another talk &#8220;How Ember uses the run loop and how you should
probably not&#8221;, or something to this effect.</p>

<h3>EmberFest 2015</h3>

<p>The greatest thing about EmberFest was its vibe. I saw the tweets coming
in from EmberConf this March and <a href="http://reefpoints.dockyard.com/2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off.html">the post-conf blog posts</a>
about the awesome community and how one could feel the excitement that we are
building apps with a tool that is new and hot now but is probably going to be
the framework of choice for many in a few years. It is definitely a fascinating
world to live in.</p>

<p>I&#8217;ll certainly be there at EmberFest 2015, so hopefully see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember gotcha: Controllers are singletons]]></title>
    <link href="http://balinterdi.com/2014/06/26/ember-gotcha-controllers-are-singletons.html"/>
    <updated>2014-06-26T08:25:00+02:00</updated>
    <id>http://balinterdi.com/2014/06/26/ember-gotcha-controllers-are-singletons</id>
    <content type="html"><![CDATA[<p>There is a somewhat subtle bug in the current version of the Rock &amp; Roll with
Ember app. If you start to create a song for an artist that does not have one
and then switch to another one, the song creation process does not need to be
restarted by clicking on the &#8220;Why don&#8217;t you create one?&#8221; link. Also, if you&#8217;ve
already partially inputted the name of the song for the first one, it stays
there for the second artist:</p>

<p><img src="http://balinterdi.com/images/posts/singleton-controllers/start-song-creation-for-radiohead.png" alt="Start creating a song for Radiohead" />
<img src="http://balinterdi.com/images/posts/singleton-controllers/new-song-for-radiohead.png" alt="Input Karma for Radiohead" />
<img src="http://balinterdi.com/images/posts/singleton-controllers/new-song-for-rhcp.png" alt="Observe song title stays for Red Hot Chili Peppers" /></p>

<p>The above behavior was brought to my attention by <a href="https://twitter.com/davidlormor">David</a>
<a href="http://davidlormor.com">Lormor</a>, an astute reader and watcher of my screencasts.</p>

<p>In some circumstances it is desirable for the result of some user interaction to
linger between route transitions but in other cases it is not. I put the
current example firmly in the latter camp and thus consider the above a bug.</p>

<p>Let me explain what causes this behavior and then provide a simple solution to fix it.</p>

<h3>Repeat after me: controllers are singletons</h3>

<p>Controllers in Ember are singletons. Controllers in Ember are singletons.
Controllers in Ember are singletons.</p>

<p>When the user leaves a page and goes to another one, the controller is not
torn down. It lives on, keeping its properties.</p>

<p>This makes total sense for a framework that aims to be a tool for creating
long-lived, rich-client side applications but is something to watch out for
when you develop Ember applications.</p>

<p>If you have a long background in back-end development, like yours truly,
it is especially easy to fall prey to this, as you could see.</p>

<h3>Same controller, different model</h3>

<p>Initially, when the applicaiton is loaded, the <code>songCreationStarted</code> property
of the controller is set to false. When the user clicks the &#8220;create one&#8221; in the
&#8220;Why don&#8217;t you create one?&#8221; blurb, it is set to true and thus the text input
field appears to allow adding a new song.</p>

<p>Now comes the tricky part. If the user then decides to go to a different artist,
she clicks the name of another artist in the sidebar. What happens? A transition
is made from one <code>ArtistSongsRoute</code> to another <code>ArtistSongsRoute</code>. The artist
is going to be different but the same <code>ArtistSongsController</code> is used.</p>

<p>To prove my point, here are two screenshots of the Ember Inspector&#8217;s sidebar.
The first one is before, the second one is after the transition between
<code>/artists/radiohead/songs</code> and <code>/artists/red-hot-chili-peppers/songs</code>:</p>

<p><img src="http://balinterdi.com/images/posts/singleton-controllers/ember-inspector-radiohead-songs.png" alt="Ember Inspector - Radiohead songs" />
<img src="http://balinterdi.com/images/posts/singleton-controllers/ember-inspector-rhcp-songs.png" alt="Ember Inspector - RHCP songs" /></p>

<p>You can see that the controller is the same Ember object but the value of the <code>artist</code> property changes.</p>

<h3>Understanding the problem</h3>

<p>When the transition is made between the two artists, the artist object is
changed and consequently any data bound to the artist (and the <code>artist</code> property
of the <code>ArtistSongs</code> controller) is going to be rerendered but, since the
controller instance is not changed, unrelated data will stay unchanged on
screen.</p>

<p>What happens in the code? If you take a look at the template, you see that the
text input field is shown if <code>canCreateSong</code> is true:</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist/songs&quot;&gt;
  {{#if canCreateSong}}
    &lt;div class=&quot;list-group-item&quot;&gt;
      {{input type=&quot;text&quot; class=&quot;new-artist&quot; placeholder=newSongPlaceholder value=newTitle insert-newline=&quot;createSong&quot; }}
      &lt;button class=&quot;btn btn-primary btn-sm new-song-button&quot; {{action &quot;createSong&quot;}}&gt;Add&lt;/button&gt;
      (...)
    &lt;/div&gt;
  {{/if}}
&lt;/script&gt;</code></pre>
</div>


<p><code>canCreateSong</code> is defined in the controller and is true if either
<code>songCreationStarted</code> is true or if there are already songs. Since
<code>songCreationStarted</code> has just been set to true by the <code>enabledSongCreation</code>
action (and the controller instance is not changed) when the user clicked the
&#8220;create one&#8221; link for the first artist, <code>canCreateSong</code> stays true and the
text field stays visible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistSongsController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">songCreationStarted</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">canCreateSong</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">,</span> <span class="s1">&#39;length&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">enableSongCreation</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h3>A simple fix</h3>

<p>To fix this, the simplest solution is to manually reset the properties that we
do not want to persist.</p>

<p>One solution is to do this in the <code>setupController</code> of the route since that
always gets called when transitioning to a new route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistSongsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_super</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelFor</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;newTitle&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that totally works. However, I prefer placing this &#8220;resetting&#8221; code in the
controller, probably because it is strictly controller-related and also because
I can make the code really telling there:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistSongsController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">songCreationStarted</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">canCreateSong</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;length&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">property</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">,</span> <span class="s1">&#39;length&#39;</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">artistDidChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;newTitle&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;songCreationStarted&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}.</span><span class="nx">observes</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>observes</code> function property extension will run the <code>artistDidChange</code> code
every time the <code>artist</code> property of the controller changes and that is exactly
when we need to clear the title and allow the song creation process to be
restarted. Nice, clean and does exactly one thing.</p>

<p><em>Note: The latest version of the code that contains these changes is <a href="https://github.com/balinterdi/rock-and-roll/releases/tag/fix-start-song-creation-bug">available on Github</a>.</em></p>

<h3>Model Dependent State - UPDATE</h3>

<p>It turns out I stumbled into something substantial. As <a href="http://localhost:4000/2014/06/26/ember-gotcha-controllers-are-singletons.html#comment-1461013970">Luke Melia points out</a> below in the comments (thank you, Luke!),
the above problem has been under consideration for a while.</p>

<p>Alex Matchneer, a member of the Ember core team gave <a href="http://youtu.be/Syv_OTzHOr0">a presentation at EmberConf</a> in which he explains that there is a missing
primitive.</p>

<p>He calls it &#8220;Model Dependent State&#8221; and it is what would decide under what
conditions a certain controller property is &#8220;sticky&#8221; (whether it retains its
value when you change the model of a certain controller or not).</p>

<p><a href="http://youtu.be/Syv_OTzHOr0?t=14m18s">Here</a> is the part where he begins to talk about Model
Dependent State.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Indicating Progress - Loading Routes in Ember.js]]></title>
    <link href="http://balinterdi.com/2014/06/18/indicating-progress-loading-routes-in-ember-dot-js.html"/>
    <updated>2014-06-18T21:38:00+02:00</updated>
    <id>http://balinterdi.com/2014/06/18/indicating-progress-loading-routes-in-ember-dot-js</id>
    <content type="html"><![CDATA[<p>When an Ember app is being loaded at first, the user sees a blank screen. When
transitioning between two routes and loading data to render for the destination
template, there is no indication that something is happening and thus the user can
be perplexed. Ideally, loading data happens fast enough so that users barely
notice the blank screen or freeze, but web apps do not always behave ideally.</p>

<p>If you have read some of my other articles on Ember, you will not be surprised
to hear that there is a splendid solution for this problem and that it is based
on a convention.</p>

<h3>Unresolved promises</h3>

<p>The <code>model</code> hook of routes is the canonical place to fetch data needed
to render the corresponding template. When a promise is returned, execution is
blocked until that promise is resolved (or rejected). That is the period during
which the application seems unresponsive. When starting up the application,
this can even mean that the user only sees a blank screen. Since data is fetched
asyncronously, not even the spinner in the tab title is going to spin.</p>

<p>The user may just close the tab and go on with her life. We can&#8217;t let that
happen and unsurprisingly Ember has a convention-based solution that is easy to
work with and customize.</p>

<h3>Beautiful, reusable conventions</h3>

<p><a href="http://balinterdi.com/2014/02/26/a-common-resource-route-pattern-in-ember-dot-js.html">We saw</a> how each resource route (and thus each route level) creates an
outlet for the level below to render content in. Let&#8217;s take a look at the routes
of the application to see how that plays out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;artists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;:slug&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;songs&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The outlet defined in the (top-level) application template is going to be filled
in by the content rendered by the first-level templates (in this case, <code>artists</code>).</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot;&gt;
  &lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;page-header&quot;&gt;
      {{#link-to &quot;index&quot;}}
        &lt;h1&gt;Rock &amp; Roll&lt;small&gt; with Ember.js&lt;/small&gt;&lt;/h1&gt;
      {{/link-to}}
    &lt;/div&gt;
    &lt;div class=&quot;row&quot;&gt;
      {{outlet}}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>


<p>Next, the outlet in the <code>artists</code> template is populated by the routes below the
artists resource route:</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artists&quot;&gt;
  &lt;div class=&quot;col-md-4&quot;&gt;
    (list of artists)
  &lt;/div&gt;
  &lt;div class=&quot;col-md-8&quot;&gt;
    &lt;div class=&quot;list-group&quot;&gt;
      {{outlet}}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>


<p>The artist template also defines an outlet into which content is rendered by
the routes below the artist resource. In this case, there is no common markup
for a single artist so the template only defines the outlet:</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist&quot;&gt;
  {{outlet}}
&lt;/script&gt;</code></pre>
</div>


<p>Finally, there is a single route defined below the <code>artist</code> resource, <code>artist.songs</code>:</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist/songs&quot;&gt;
  (...)
  {{#each sortedSongs}}
    &lt;div class=&quot;list-group-item&quot;&gt;
      {{title}}
      {{star-rating ...}}
    &lt;/div&gt;
  {{/each}}
  (...)
&lt;/script&gt;</code></pre>
</div>


<h3>Loading routes build on the nested routes pattern</h3>

<p>The ingenious thing about indicating that loading data from the backend is
happening is that it leverages the &#8220;nested routes, nested templates&#8221;
architecture explained above.</p>

<p>When the model hook of a certain route returns a promise that is not resolved, a
so-called loading template <strong>at the same level as the route</strong> is going to be
rendered.</p>

<p>When loading the list of artists in the <code>artists</code> route, a loading route at the
same level is going to be activated. That, by default, means a top-level loading
template is rendered.</p>

<p>Consequently, all we need to do is to put into that template what we want the user to see
while data is being fetched. Currently that is what she sees in that scenario:</p>

<p><img src="http://balinterdi.com/images/posts/loading-routes/top-level-loading-indication-before.png" alt="Loading indication before" /></p>

<p>You think we can beat that?</p>

<h3>Top-level loading template</h3>

<p>The convention says that the loading route (and thus template) should be the
sibling of the route we define it for and should be called <code>loading</code>.</p>

<p>The loading template for the <code>artists</code> route should consequently be called
<code>loading</code>:</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;loading&quot;&gt;
  &lt;div class=&quot;loading-pane&quot;&gt;
    &lt;div class=&quot;loading-message&quot;&gt;
      Loading stuff, please have a cold beer.
      &lt;div class=&quot;spinner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>


<p>Let&#8217;s inspect what our app looks like while loading data from the backend:</p>

<p><img src="http://balinterdi.com/images/posts/loading-routes/top-level-loading-indication-after.png" alt="Loading indication before" /></p>

<p>Nice, but it gets nicer still.</p>

<h3>Loading route for the songs</h3>

<p>We can now descend a couple of levels and make a loading template for when the
songs of a certain artist are being fetched.</p>

<p>Let&#8217;s take a look at the &#8220;routing table&#8221; to see what that template should be
named:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;artists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;:slug&#39;</span> <span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;songs&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The loading route should be the sibling of the route under consideration.</p>

<p>In this particular case, this latter is <code>artist.songs</code> and thus the loading
template should be named <code>artist.loading</code>:</p>

<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;artist/loading&quot;&gt;
  &lt;div class=&quot;loading-pane&quot;&gt;
    &lt;div class=&quot;loading-message&quot;&gt;
      Loading the artist, please have an organic orange juice.
    &lt;/div&gt;
    &lt;div class=&quot;spinner&quot;&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>


<p><img src="http://balinterdi.com/images/posts/loading-routes/artist-loading-indication.png" alt="Indicating loading artist" /></p>

<h3>Customizing loading route behavior</h3>

<p>More precisely, what happens when entering a route where one of the model hooks
returns an unresolved promise is that a <code>loading</code> event is fired on the
route.</p>

<p>We saw above that the default implementation is to look up a route at the same
level as the route itself and render the corresponding template.</p>

<p>However, this behavior is customizable. For example, we can pop up an alert box
in 1993-style, telling the user she needs to wait.</p>

<p>Below, I do that for the top-level <code>artists</code> route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">someDataThatTakesTooLongToFetch</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">loading</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Loading data, go make some coffee.&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It works:</p>

<p><img src="http://balinterdi.com/images/posts/loading-routes/top-level-loading-with-alert.png" alt="1993-style loading indication" /></p>

<p>Another thing we can do is to render another loading template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">LoadingRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">renderTemplate</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="s1">&#39;working&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<div>
  <pre><code class='html'>&lt;script type=&quot;text/x-handlebars&quot; data-template-name=&quot;working&quot;&gt;
  &lt;div class=&quot;loading-pane&quot;&gt;
    &lt;div class=&quot;loading-message&quot;&gt;
      I work hard while you play hard.
      &lt;div class=&quot;spinner&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/script&gt;</code></pre>
</div>


<p>Which also just works:</p>

<p><img src="http://balinterdi.com/images/posts/loading-routes/top-level-different-template.png" alt="Rendering a different template" /></p>

<p>Since handling the loading state happens in the route, the most powerful piece
of Ember architecture, the possibilities are many.</p>

<h3>Why I love this solution and why you should, too</h3>

<p>In summary, let&#8217;s see what Ember&#8217;s solution of indicating the loading of data
brings to the table:</p>

<ol>
<li>It uses a convention to eliminate boilerplate and spare you from having to
come up with your own solution.</li>
<li>It allows different markup and text for the different &#8220;slow&#8221; parts. By
default, each loading template will be rendered exactly where the data would
be rendered.</li>
<li>If this default behavior does not suit your taste or needs, there are several
ways to tweak it, in well-defined ways.</li>
</ol>


<p><em>Note: The latest version of the code that contains these changes is <a href="https://github.com/balinterdi/rock-and-roll/releases/tag/loading-routes">available on Github</a>.</em></p>
]]></content>
  </entry>
  
</feed>
