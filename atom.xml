<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Balint Erdi]]></title>
  <link href="http://balinterdi.com/atom.xml" rel="self"/>
  <link href="http://balinterdi.com/"/>
  <updated>2014-01-15T12:37:54+01:00</updated>
  <id>http://balinterdi.com/</id>
  <author>
    <name><![CDATA[Balint Erdi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How real-time updates work in Discourse]]></title>
    <link href="http://balinterdi.com/2014/01/10/how-real-time-updates-work-in-discourse.html"/>
    <updated>2014-01-10T11:06:00+01:00</updated>
    <id>http://balinterdi.com/2014/01/10/how-real-time-updates-work-in-discourse</id>
    <content type="html"><![CDATA[<p>Given that I started engaging with web sites in the early 2000s there are still
some things today that I constantly marvel at. One of these things is real-live
update, the absolutely wonderful experience that I&#8217;m looking at a page and
it displays a change due to an action of another user right in front of my eyes,
without me hitting refresh.</p>

<p><a href="http://www.discourse.org/">Discourse</a>, being a state-of-the-art forum software does this, too,
and, provided my enthusiasm with all things that bring the web alive, I wanted to
understand how that works. More specifically I wanted to understand how
displaying new posts for the topic I am looking at can work its magic.</p>

<p>In the following post, I want to lead you through the whole process so that you
see exactly how the pieces fit together. In fact, that may be the thing I
enjoy most as a developer. Being able to take apart a complex application and
gain the comprehension of how the individual pieces function and how they are
orchestrated to make a complex system work.</p>

<h3>Tools</h3>

<p>Discourse is built on <a href="http://rubyonrails.org/">Ruby on Rails</a> and <a href="http://emberjs.com">Ember.js</a>, two fantasic
frameworks. Given my recent fascination with front-end development, and Ember.js
in particular, I&#8217;ll focus on the front-end part here and only talk about the
back-end mechanism as much as it is needed to see the whole picture.</p>

<p><em>Consequently, some knowledge about Ember.js is assumed. You can go through the <a href="http://emberjs.com/guides/getting-ember/">Getting Started</a> guide on the official Ember.js site or -if you prefer
showing to telling- <a href="http://emberjs.balinterdi.com">sign up to my mailing list</a> to watch a series
of screencasts to get a basic grip on Ember.js architecture as we go through the
building of an application.</em></p>

<h3>Message bus</h3>

<p>Discourse uses a ruby gem (library) called <a href="message_bus">message_bus</a> that
enables listeners to subscribe to any channel of their liking and get notified
about events happening on that channel.</p>

<p>It also includes a <a href="https://github.com/SamSaffron/message_bus/blob/master/assets/message-bus.js">javascript lib</a> to allow connecting to the
message bus from the client-side application. That&#8217;s what Discourse uses from
the Ember.js app. Let&#8217;s see how.</p>

<h3>Subscribing to new posts on a topic</h3>

<p>When the user navigates to a topic page, the topic route gets activated and its
hooks run. After resolving the model, the <code>setupController</code> which, as its name
indicates, sets up the controller belonging to the model. It, among other
things, calls the subscribe method on the controller, see below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Discourse</span><span class="p">.</span><span class="nx">TopicRoute</span> <span class="o">=</span> <span class="nx">Discourse</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">setupController</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">controller</span><span class="p">,</span> <span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(...)</span>
</span><span class='line'>    <span class="nx">controller</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">();</span>
</span><span class='line'>    <span class="p">(...)</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller for the model is Discourse.TopicController, so next we will look into
that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Discourse</span><span class="p">.</span><span class="nx">TopicController</span> <span class="o">=</span> <span class="nx">Discourse</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(...,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">subscribe</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Unsubscribe before subscribing again</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">unsubscribe</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">bus</span> <span class="o">=</span> <span class="nx">Discourse</span><span class="p">.</span><span class="nx">MessageBus</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">topicController</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">bus</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span><span class="s2">&quot;/topic/&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)),</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">(...)</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Add the new post into the stream</span>
</span><span class='line'>      <span class="nx">topicController</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;postStream&#39;</span><span class="p">).</span><span class="nx">triggerNewPostInStream</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The controller subscribes to the channel <code>/topic/&lt;topic_id&gt;</code>. The client polls
the message bus for potential new messages every 15 seconds. You can see the XHR
calls in the console of your browser:</p>

<p><img src="http://balinterdi.com/images/posts/discourse-real-updates/xhr-polls.png" alt="Polling the message bus" /></p>

<p>When something is published to that channel, the callback function gets called
back with the data related to that event. The data, in that case, is going to be
the new post record. When the callback is fired, we call the
triggerNewPostInStream method on the postStream with the id of the post. What
does triggerNewPostInStream do, then? We can check that in the PostStream model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  We use this class to keep on top of streaming and filtering posts within a topic.</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="nx">Discourse</span><span class="p">.</span><span class="nx">PostStream</span> <span class="o">=</span> <span class="nx">Em</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">    Finds and adds a post to the stream by id. Typically this would happen if we receive a message</span>
</span><span class='line'><span class="cm">    from the message bus indicating there&#39;s a new post. We&#39;ll only insert it if we currently</span>
</span><span class='line'><span class="cm">    have no filters.</span>
</span><span class='line'><span class="cm">  **/</span>
</span><span class='line'>  <span class="nx">triggerNewPostInStream</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">postId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(...)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">loadedAllPosts</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;loadedAllPosts&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">).</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">postId</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;stream&#39;</span><span class="p">).</span><span class="nx">addObject</span><span class="p">(</span><span class="nx">postId</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">loadedAllPosts</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">appendMore</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The docstring is quite revealing. If the post id is already in the stream, we
don&#8217;t do anything. If it is not, we add it to the stream (an Ember array). If
the loading of posts has finished, we are ready to append the new posts to the
stream.</p>

<p>Notice we are adding post <em>ids</em>, not actual post records so the next
investigation step is to explore how ids get turned into records.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  Appends the next window of posts to the stream. Call it when scrolling downwards.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  @method appendMore</span>
</span><span class='line'><span class="cm">  @returns {Ember.Deferred} a promise that&#39;s resolved when the posts have been added.</span>
</span><span class='line'><span class="cm">**/</span>
</span><span class='line'><span class="nx">appendMore</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Make sure we can append more posts</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">self</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;canAppendMore&#39;</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">postIds</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;nextWindow&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">Ember</span><span class="p">.</span><span class="nx">isEmpty</span><span class="p">(</span><span class="nx">postIds</span><span class="p">))</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">resolve</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">self</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;loadingBelow&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">stopLoading</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">self</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;loadingBelow&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">self</span><span class="p">.</span><span class="nx">findPostsByIds</span><span class="p">(</span><span class="nx">postIds</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">posts</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">posts</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">self</span><span class="p">.</span><span class="nx">appendPost</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="nx">stopLoading</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span> <span class="nx">stopLoading</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above <code>appendMore</code> method is responsible for retrieving the post ids that
have to be added below the currently visible posts and turning these ids into
actual post records.</p>

<p>We are getting close now, but let me speed things up a bit by only explaining the
process but not showing all the code which makes it so that the new post objects
are finally pushed to the <code>posts</code> array from where they will be finally
displayed. (If you are such a code untangler as I am, and would like to see the
code, it is <a href="https://github.com/discourse/discourse/blob/0fd193fac314610d7a93d7b4af84a4bc1e52d03e/app/assets/javascripts/discourse/models/post_stream.js">right here</a>)</p>

<p>What happens is that the new posts get displayed in windows, not one by one.
This window is kept updated in the <code>nextWindow</code> property, from the stream we
pushed post ids into.  It is the slice in this stream that starts at the last
loaded post id and has a maximum length of <code>posts_per_page</code>, a configuration
setting.  This construct also makes it possible, quite ingeniously, for this
same code to load the next batch of posts to the page as the user scrolls down.</p>

<p>The window still contains ids and to fetch the related post records an identity
map (yes, Discourse has its <a href="http://balinterdi.com/2013/12/03/roll-your-own-ember-dot-js-identity-map.html">identity map implementation</a>,
too!) is used via the <code>findPostsByIds</code> method. Once the records are retrieved ,
they are each passed to the <code>appendPost</code> method that just pushes them to the
<code>posts</code> array.</p>

<h3>Displaying the new post in the topic stream</h3>

<p>The only thing remains to be seen for the whole picture to be clear is how the
stream of posts is displayed in the browser. The template that renders the
topic, along with its posts, is <a href="https://github.com/discourse/discourse/blob/0fd193fac314610d7a93d7b4af84a4bc1e52d03e/app/assets/javascripts/discourse/templates/topic.js.handlebars">the topic template</a>.</p>

<p>The relevant part of the template is below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="p"></span>
</span><span class='line'>    <span class="p"></span>
</span><span class='line'>  <span class="p"></span>
</span></code></pre></td></tr></table></div></figure>


<p>If the post stream is not loading, we render the posts through the cloaked
collection. I will not go into details about what
<a href="https://github.com/eviltrout/ember-cloaking">cloaked-collection</a> does, (but I highly recommend <a href="http://eviltrout.com/2014/01/04/hiding-offscreen-ember.html">a blog
 post on it by its author, @eviltrout</a>), the important thing in the
current discussion is that it renders the <code>post</code> template (cloakView=&#8221;post&#8221;) for
each post from <code>postStream.posts</code> (content=postStream.posts).</p>

<p>That is where the two parts come together. Since a binding is established with
the above handlebars line to the posts property of the postStream, every time
new posts are added (see how in the first part of the walkthrough), the
collection is going to be rerendered and consequently the posts appear in
&#8220;real-time&#8221;. The magic of Ember.js bindings.</p>

<h3>In parting</h3>

<p>I skipped over a couple of things so that this post does not turn into a
chapter of a novel, but I hope that my walkthrough could let you peek behind
the curtains and see how such a miraculous feature is made possible.</p>

<p>The key takeaway is that building with the right tools (namely the message bus and
the solid foundations of Ember.js), which a lot of people have put an enormous
amount of time into, makes such a killer feature within your reach. Not easy,
but definitely doable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At Your Service: Publicly Available API for the Rock and Roll Ember.js App]]></title>
    <link href="http://balinterdi.com/2013/12/31/at-your-service-publicly-available-api-for-the-rock-and-roll-emberjs-app.html"/>
    <updated>2013-12-31T09:38:00+01:00</updated>
    <id>http://balinterdi.com/2013/12/31/at-your-service-publicly-available-api-for-the-rock-and-roll-emberjs-app</id>
    <content type="html"><![CDATA[<p>So far, if you wanted to code along <a href="http://emberjs.balinterdi.com">my developing an example Ember.js
application</a>, Rock &amp; Roll, you had to run the server side
component. That required ruby to be installed on your machine, and you had to
<a href="https://github.com/balinterdi/rock-and-roll-api">clone the repository</a>, and start the server each time you wanted to
make some progress with the application.</p>

<p>I realized that might be cumbersome and thus I made the server publicly
available at <a href="http://rock-and-roll-api.herokuapp.com/">http://rock-and-roll-api.herokuapp.com</a>.</p>

<p>I have also updated <a href="https://github.com/balinterdi/rock-and-roll/commit/remote-api">the client-side component to connect to that remote
api.</a>. All backend requests now go through App.Adapter.ajax which
basically just delegates to <code>Ember.$.ajax</code> prefixing urls with the backend host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Adapter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ajax</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">(</span><span class="s1">&#39;http://rock-and-roll-api.herokuapp.com&#39;</span> <span class="o">+</span> <span class="nx">path</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you work with an earlier version of the client app, you might have to
rewrite urls in multiple places but I figured it is still less work than running
the server yourself.</p>

<p>I hope that facilitates your working along with the Rock &amp; Roll app and makes
your journey to Ember.js proficiency smoother. If you want to see the
screencast series in which I develop said application, you can <a href="http://emberjs.balinterdi.com">sign up to my
mailing list</a> and have each episode auto-delivered to your inbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing the URL type of your Ember.js app]]></title>
    <link href="http://balinterdi.com/2013/12/17/change-the-url-type-of-your-ember-app.html"/>
    <updated>2013-12-17T09:32:00+01:00</updated>
    <id>http://balinterdi.com/2013/12/17/change-the-url-type-of-your-ember-app</id>
    <content type="html"><![CDATA[<p>By default, Ember.js uses the hashchange event in the browser to change URLs.
This is the most widely supported way but it feels like a hack and there is a
better way, introduced in HTML5: <a href="http://diveintohtml5.info/history.html">the History API</a>.</p>

<p>Bear in mind that the <a href="http://caniuse.com/history">History API has a lower browser support
rate</a> than <a href="http://caniuse.com/hashchange">the hashchange
event</a> does (~70% vs.  89%), so there is a tradeoff
involved that you should decide to make or not to make.</p>

<p>Ember.js makes it really easy to change the URL type. All you have to do is
add the following lines to your client app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">reopen</span><span class="p">({</span>
</span><span class='line'> <span class="nx">location</span><span class="o">:</span> <span class="s1">&#39;history&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Seems too good to be true (that is just the way Ember is), but provided you did
not assemble any routes manually and only used Ember&#8217;s tools to transition
between routes (e.g link-to, transitionTo, etc.), that is all the client-side
code changes you had to make.</p>

<p>The server side needs to be adjusted, too, though, since the server now gets
sent the client-side routes, too. How to do this can vary depending on the
application server you use.</p>

<p>In the case of the Rock &amp; Roll app, here is what <code>config.ru</code> looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">run</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Extract the requested path from the request</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Utils</span><span class="o">.</span><span class="n">unescape</span><span class="p">(</span><span class="n">env</span><span class="o">[</span><span class="s1">&#39;PATH_INFO&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">path</span><span class="o">.</span><span class="n">start_with?</span><span class="p">(</span><span class="s2">&quot;/artists&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">path</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">index_file</span> <span class="o">=</span> <span class="vi">@root</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">/index.html&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">index_file</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># Return the index</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/html&#39;</span><span class="p">},</span> <span class="o">[</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">index_file</span><span class="p">)</span><span class="o">]]</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="c1"># Pass the request to the directory app</span>
</span><span class='line'>    <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Directory</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@root</span><span class="p">)</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I only had to add the <code>path.start_with?</code> condition to make sure the server
serves the Ember application on that route. It is not an ideal solution because
anytime you add a top-level route to the Ember app, you would also have to
modify the server config but this is the bare minimum that got the job done.</p>

<p>Hooray for clean URLs:
<img src="http://balinterdi.com/images/posts/change-the-url-type/rock-and-roll-history-api-urls.png" alt="History API
URLs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build an Ember.js app with Firebase]]></title>
    <link href="http://balinterdi.com/2013/12/11/build-an-ember-dot-js-app-with-firebase.html"/>
    <updated>2013-12-11T08:42:46+01:00</updated>
    <id>http://balinterdi.com/2013/12/11/build-an-ember-dot-js-app-with-firebase</id>
    <content type="html"><![CDATA[<p>Ember.js is an outstanding client-side framework for building single-page
applications. To make your application truly come to life, Firebase, being a
real-time backend, is a natural choice as the server-side component.</p>

<p>Sending data between the server and the client is a task all web applications
have to address. However, if one uses the Firebase-Ember.js stack, this
problem is largely abstracted away by these wonderful frameworks.</p>

<p>To make them work together, the Firebase team released their official
Ember.js bindings, <a href="https://github.com/firebase/emberFire">emberFire</a>.</p>

<h3>How does it work?</h3>

<p>Before we look at the making of the actual application it is important to
understand how the emberFire library works.</p>

<p>It is built on two primitives, <code>EmberFire.Object</code> and <code>EmberFire.Array</code>. These
extend <code>Ember.ObjectProxy</code> and <code>Ember.ArrayProxy</code>, respectively. These proxy
objects delegate any <code>get</code> and <code>setProperty</code> calls that are not defined on the
proxy to an underlying content object.</p>

<p>What this means is that we can work with Firebase references in our
application as if they were Ember objects. In the case of a single object,
setting a property will cause a child with that name to be written with the
passed value. When working with an array, the usual array methods (e.g
<code>pushObject</code>) can be used and they will do the right thing in the underlying
Firebase reference (e.g <code>push</code> the new node).</p>

<h3>Setting up the environment</h3>

<p>To set up the necessary dependencies, it is easiest to download the <a href="http://emberjs.com/">latest Ember
starter kit</a> and add the following script tags to the main
template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;https://cdn.firebase.com/v0/firebase.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&#39;https://cdn.firebase.com/v0/firebase-simple-login.js&#39;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://firebase.github.io/emberFire/emberfire-latest.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that in place, we can start developing. For the sake of focusing on one
single issue at a time, the code snippets in this post do not always exactly
match those in the actual application. If you want to see them in their
entirety, you can always <a href="https://github.com/balinterdi/ideavote-emberfire">check the source code on Github</a>.</p>

<h3>The Idealist</h3>

<p>The application we are going to build is an &#8220;Idealist&#8221;. Users can submit ideas
and vote on existing ones.</p>

<p>When one loads the application it looks like the following:</p>

<p><img src="https://raw.github.com/balinterdi/ideavote-emberfire/master/public/img/screenshots/ideavote-screenshot-3-640.png" alt="Ideavote screenshot" /></p>

<p>A list of ideas is displayed along with the number of votes for that idea and a
button to vote that idea up.</p>

<p>To get the existing ideas from Firebase, we use the <code>model</code> hook of the
appropriate route:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dbRoot</span> <span class="o">=</span> <span class="s2">&quot;https://emberfire-ideavote.firebaseio.com&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ideasPath</span> <span class="o">=</span> <span class="nx">dbRoot</span> <span class="o">+</span> <span class="s2">&quot;/ideas&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">IdeasRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">EmberFire</span><span class="p">.</span><span class="nb">Array</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">ref</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Firebase</span><span class="p">(</span><span class="nx">ideasPath</span><span class="p">)</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This loads the ideas in an <code>EmberFire.Array</code> and then iterates through them in the <code>ideas</code> template:</p>

<div><script src='https://gist.github.com/7906523.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7906523&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>So how does adding a new idea happen? If we take a look at the <code>ideas/new</code>
template, we can see that clicking on the &#8220;Send my idea&#8221; button triggers the
<code>sendIdea</code> action:</p>

<div><script src='https://gist.github.com/7906543.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7906543&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>The triggered <code>sendIdea</code> action is then handled on the controller:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">IdeasNewController</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">sendIdea</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">newIdeaRef</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Firebase</span><span class="p">(</span><span class="nx">ideasPath</span><span class="p">).</span><span class="nx">push</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">newIdea</span> <span class="o">=</span> <span class="nx">EmberFire</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">({</span> <span class="nx">ref</span><span class="o">:</span> <span class="nx">newIdeaRef</span> <span class="p">});</span>
</span><span class='line'>      <span class="nx">newIdea</span><span class="p">.</span><span class="nx">setProperties</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="nx">newIdeaRef</span><span class="p">.</span><span class="nx">name</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">title</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">submittedBy</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;auth.currentUser.id&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">timestamp</span><span class="o">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span>
</span><span class='line'>        <span class="nx">voteCount</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We get a reference with a unique id by using Firebase&#8217;s push operation. We
create an <code>EmberFire.Object</code> with that reference and that enables us to do our
magic with the help of Firebase. When we then set any property on the object,
it is going to be persisted on our backend and synchronized to all clients.</p>

<h3>Extending the EmberFire classes</h3>

<p>Up until this point, we did not need to create our own model classes. The basic
EmberFire classes were sufficient for our needs. However, if we need to define
additional behavior for our models, we have to extend these primitives.</p>

<p>Suppose, for example, that each user has a certain number of votes and we want
to prevent further voting when she does not have any votes left, as shown on the
next mockup:</p>

<p><img src="https://raw.github.com/balinterdi/ideavote-emberfire/master/public/img/screenshots/ideavote-screenshot-2-640.png" alt="Ideavote screenshot" /></p>

<p>We can define a computed property on the user that would tell whether she has
any votes left. Computed properties in Ember are properties that depend on
other -computed or &#8220;normal&#8221;- properties and get automatically updated when one of
the dependent properties change.</p>

<p>To do that, we need to define our User model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">User</span> <span class="o">=</span> <span class="nx">EmberFire</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">noVotesLeft</span><span class="o">:</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">computed</span><span class="p">.</span><span class="nx">lte</span><span class="p">(</span><span class="s1">&#39;votesLeft&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above is a computed macro definition that defines <code>noVotesLeft</code> as true if
the <code>votesLeft</code> property of the user is less than or equal to zero.</p>

<p>Then, in the template that renders each idea, we disable the button if that
computed property is true and also give it a grey hue to indicate its disabled
state:</p>

<div><script src='https://gist.github.com/7906552.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7906552&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Keep in mind that the context of the template is an idea and our computed
property is defined on the user, hence the need for
<code>auth.currentUser.noVotesLeft</code>.</p>

<h3>Wait, there is more</h3>

<p>Taking things a step further, I have also integrated Firebase&#8217;s SimpleLogin
authentication service and prevented the same user to vote on the same idea
multiple times. If you wish to see how these are implemented, I encourage you to
check out <a href="https://github.com/balinterdi/ideavote-emberfire">the source code of the project</a>.</p>

<p>I hope I got you interested in learning more about how to build real-time web
applications and gave you a basic example of how to use state-of-the-art tools
to do so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roll your own Ember.js identity map]]></title>
    <link href="http://balinterdi.com/2013/12/03/roll-your-own-ember-dot-js-identity-map.html"/>
    <updated>2013-12-03T11:41:00+01:00</updated>
    <id>http://balinterdi.com/2013/12/03/roll-your-own-ember-dot-js-identity-map</id>
    <content type="html"><![CDATA[<p>If you followed along my <a href="http://emberjs.balinterdi.com">Build an Ember app screencast series</a> and maybe
played around <a href="https://github.com/balinterdi/rock-and-roll/releases/tag/episode-7">with the app</a> on your own, you might have
noticed a subtle bug in the application.</p>

<p>When you load the application on the <code>/artists/</code> route and then choose one of
the artists, the artist link gets highlighted correctly:</p>

<p><img src="http://balinterdi.com/images/posts/roll-your-own-store/active-highlight-works.png" alt="Correct active highlight" /></p>

<p>However, when you reload the app on one of these artists routes (e.g
<code>/artists/pearl-jam</code>), the artist link does not get the active highlight:</p>

<p><img src="http://balinterdi.com/images/posts/roll-your-own-store/active-highlight-does-not-work.png" alt="Incorrect active highlight" /></p>

<h3>Understanding what is wrong</h3>

<p>The first step of any debugging process is to understand where the bug lies. In
order to do that we have to understand how highlighting a link as active works
in Ember.js.</p>

<p>I wrote about this topic in detail in <a href="http://blog.safaribooksonline.com/2013/10/29/marking-links-as-active-in-ember-js-markdown/">a guest post</a> so let
me just quickly summarize it here.</p>

<p>The artist links are rendered using the <code>link-to</code> helper. When active routes
change (that includes the moment when the app is loaded from scratch) the
<code>isActive</code> property for each link is recomputed. If it is found to be
active, the activeClass is added to the view&#8217;s tag and that enables it to be
displayed differently.</p>

<p>When is a link-to active? When its route name matches one of the current route
names. This is pretty straightforward for static links but what about dynamic ones
with context objects? In those cases, all the context objects have to match in
order for the link to be considered active.</p>

<p>Let&#8217;s see our particular case. We have the following routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">resource</span><span class="p">(</span><span class="s1">&#39;artists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">&#39;songs&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;:slug&#39;</span> <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the following template that renders each artist link:</p>

<div><script src='https://gist.github.com/7708568.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/7708568&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>


<p>Each link is rendered with an artist object that comes from the model hook of
the <code>ArtistsRoute</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artistObjects</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">A</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;http://localhost:9393/artists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artists</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">artistObjects</span><span class="p">.</span><span class="nx">pushObject</span><span class="p">(</span><span class="nx">App</span><span class="p">.</span><span class="nx">Artist</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">artistObjects</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the artist object that serves as the context for the <code>artists.songs</code> link has
to be the exact same object as the one returned from the model hook of the
<code>ArtistsSongsRoute</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistsSongsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Artist</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:9393/artists/&#39;</span> <span class="o">+</span> <span class="nx">params</span><span class="p">.</span><span class="nx">slug</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">artist</span><span class="p">.</span><span class="nx">setProperties</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">id</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">songs</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Artist</span><span class="p">.</span><span class="nx">extractSongs</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">songs</span><span class="p">,</span> <span class="nx">artist</span><span class="p">)</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">artist</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Are they identical? Well, intuitively they are but Ember.js does not care about
our intuition and so we should not, either. They are different objects since
both were created by calls to <code>App.Artist.create</code> (<code>App.Artist.createRecord</code>
calls <code>App.Artist.create</code> under the hood) which returns a new object
every time. Bummer.</p>

<h3>Replacing intuition with reality</h3>

<p>Don&#8217;t be sad, it&#8217;s not bad.</p>

<p>What we need is to have the same model object to be returned for the same
identifier. In the matter at hand, given an artist slug (that serves as an
identifier) we want to get back the same <code>App.Artist</code> object every time we use it.</p>

<p>If you think about it, that&#8217;s what identity maps are for.</p>

<h3>Wiring it up with promises</h3>

<p>The identity map needs to be able to retrieve objects and also store them. Most
importantly, it has to return the object from its map if it has already created
it with the passed in id.</p>

<p>I will dump the code below and then explain what it does:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">IdentityMap</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">map</span><span class="o">:</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nx">findAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">identityMap</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">Ember</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="s1">&#39;http://localhost:9393/artists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">artists</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">artistObjects</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">A</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">artists</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Artist</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">identityMap</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="nx">artist</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;slug&#39;</span><span class="p">),</span> <span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">artistObjects</span><span class="p">.</span><span class="nx">pushObject</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">artistObjects</span><span class="p">);</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">find</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">identityMap</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">RSVP</span><span class="p">.</span><span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="nx">identityMap</span><span class="p">.</span><span class="nx">map</span><span class="p">[</span><span class="nx">identityMap</span><span class="p">.</span><span class="nx">_key</span><span class="p">(</span><span class="nx">type</span><span class="p">,</span> <span class="nx">id</span><span class="p">)];</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">artist</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="s1">&#39;http://localhost:9393/artists/&#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">Ember</span><span class="p">.</span><span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">artist</span> <span class="o">=</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Artist</span><span class="p">.</span><span class="nx">create</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">artist</span><span class="p">.</span><span class="nx">setProperties</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="nx">data</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">songs</span><span class="o">:</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Artist</span><span class="p">.</span><span class="nx">extractSongs</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">songs</span><span class="p">,</span> <span class="nx">artist</span><span class="p">)</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="nx">identityMap</span><span class="p">.</span><span class="nx">store</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>          <span class="nx">resolve</span><span class="p">(</span><span class="nx">artist</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I used promises for the retrieval methods of the API.</p>

<p>Promises are a huge improvement over callbacks and deserve their own
<del>article</del> book. They represent eventual values that are going to be
either resolved (meaning success) or rejected (meaning failure) and can be
passed around freely.</p>

<p>Ember.js relies on promises heavily in its <a href="http://emberjs.com/guides/routing/asynchronous-routing/#toc_a-word-on-promises">routing API</a> and uses
<a href="https://github.com/tildeio/rsvp.js">the rsvp promise library</a>. If a promise is returned from any <code>model</code> hook,
the route transition does not begin until <a href="http://emberjs.com/guides/routing/asynchronous-routing/#toc_the-router-pauses-for-promises">the promise is resolved</a>.</p>

<p>Leveraging that property of Ember routing I return promises from both the
<code>findAll</code> and <code>find</code> methods and then use them from the model hooks of
the appropriate routes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">IdentityMap</span><span class="p">.</span><span class="nx">findAll</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">ArtistsSongsRoute</span> <span class="o">=</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">IdentityMap</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;artist&#39;</span><span class="p">,</span> <span class="nx">params</span><span class="p">.</span><span class="nx">slug</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="p">(...)</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I call <code>App.IdentityMap.findAll</code> from the <code>ArtistsRoute</code> the rendering of
the <code>artists</code> template is stopped until the promise is resolved. That happens
when the AJAX call has returned with the data for all artists and I call
<code>resolve(artistObjects)</code>.</p>

<p>Next, the model hook for the <code>ArtistsSongsRoute</code> is evaluated. It returns a
promise that has to be resolved in order for the template to be rendered.</p>

<p>The artist is found in the identityMap because it has just been stored there
during the findAll in the previous model hook resolution (see the
<code>identityMap.store('artist', artist.get('slug'), artist);</code> line). Since it is
the same object that was used as the context for the artist link, the bug is
squashed.</p>

<p>The link now gets correctly highlighted as active:</p>

<p><img src="http://balinterdi.com/images/posts/roll-your-own-store/active-highlight-fixed.png" alt="Active highlight fixed" /></p>

<p>Notice we achieved something else, too. Instead of firing two AJAX calls, one
to fetch all artists and then one to fetch the one serialized in the URL we now
only have one call. We eliminated the second one by returning the object from
the identity map.</p>

<p>Furthermore, I also think our code has become better organized. The models for
our routes have now become one-liners and can quickly be read and understood at
a casual glance instead of being buried under the minutiae of AJAX calls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profile your Ember app with ember-renderspeed]]></title>
    <link href="http://balinterdi.com/2013/11/27/profile-your-ember-app-with-ember-renderspeed.html"/>
    <updated>2013-11-27T18:56:00+01:00</updated>
    <id>http://balinterdi.com/2013/11/27/profile-your-ember-app-with-ember-renderspeed</id>
    <content type="html"><![CDATA[<p>If your application has lots of things going on or you render a large list, you
might see your once snappy app lose some of that swiftness. Naturally, you want
to speed your application up and the first thing to do in these cases is to know
where the bottlenecks are.</p>

<p>One solution to this is to integrate <a href="https://github.com/eviltrout/ember-renderspeed">ember-renderspeed</a>, a very simple library
released by the Discourse team. It shows the rendering time of your templates
and views on your development console, in a nicely nested form. Don&#8217;t get
frightened by the verb &#8220;integrate&#8221;. It is as easy as <a href="https://raw.github.com/eviltrout/ember-renderspeed/master/ember-renderspeed.js">downloading the js file</a> and
adding a script tag to it.</p>

<p>Once you did that, open your Javascript console in your browser, reload the page
and observe the profile of your application. It is enabled by default on the
Ember discussion forum, so you can take a look there. You will see something
like the following:</p>

<p><img src="http://balinterdi.com/images/ember-renderspeed-screenshot.png" alt="ember-renderspeed screenshot" /></p>

<p>Under the hood, ember-renderspeed uses <a href="http://emberjs.com/api/classes/Ember.Instrumentation.html">Ember&#8217;s instrumentation facilities</a>, so
should ember-renderspeed not work for your problem, you can always roll your own
or use a third-party service, like <a href="http://caliper.io/">Caliper</a>.</p>

<p>That said, ember-renderspeed is a very quick and easy way to profile your app
and can be the first tool you reach for when the need arises.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Find and Replace in all files]]></title>
    <link href="http://balinterdi.com/2013/08/23/find-and-replace-in-all-files.html"/>
    <updated>2013-08-23T22:01:00+02:00</updated>
    <id>http://balinterdi.com/2013/08/23/find-and-replace-in-all-files</id>
    <content type="html"><![CDATA[<p>You want to change a string with another one in some directory in your project.</p>

<p>Here is a one liner to do that:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for spec_file in $(ag -g _spec.rb spec/); do sed -i.bak 's/john/jane/g' $spec_file; done</span></code></pre></td></tr></table></div></figure>


<p>A few caveats:</p>

<ul>
<li>The match should be case-insensitive. Unfortunately, <code>s/john/jane/gI</code> does not
work under OSX.</li>
<li>The -i tells sed to do an in-place replacement. Again, under OSX, however, you
must give an extension for the backup files. A <code>git clean -f</code> can get rid of
these in one fell swoop.</li>
<li>You can use <code>find spec/ -name '_spec.rb'</code> instead of the ag command. <a href="http://geoff.greer.fm/2011/12/27/the-silver-searcher-better-than-ack/">But why
would you?</a></li>
</ul>


<p>(If you know how to do the replacement with awk, or something similar, please
tell me in the comments.)</p>

<p>Your text editor might already have a <code>Find &amp; Replace in project</code> functionality.
But maybe it does not. And surely, the command line version is most flexible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The appeal of one paradigm languages]]></title>
    <link href="http://balinterdi.com/2013/06/19/the-appeal-of-one-paradigm-languages.html"/>
    <updated>2013-06-19T23:19:00+02:00</updated>
    <id>http://balinterdi.com/2013/06/19/the-appeal-of-one-paradigm-languages</id>
    <content type="html"><![CDATA[<p>As I was preparing for <a href="https://speakerdeck.com/balint/clojure-data-structures-part-one">my presentation on Clojure data structures</a> I flashed
back to a recent programming task I had to overcome. I don&#8217;t remember exactly
what it was but it involved grouping data by particular keys and having an array
of values for each key. When such a task rears its head I always have to play
around in the REPL (err, the browser console) to see the exact working of each
function I am about to rely on.</p>

<p>Which one changes the array I call it on? Which one returns the new value and
leaves the original intact? What about taking two arrays to make a third one?
Javascript being slightly OOish, may I possibly use the + operator to join them
together?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>      <span class="c1">// x = [1,2,3]; y = 3;</span>
</span><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">concat</span><span class="p">([</span><span class="mi">3</span><span class="p">]);</span>  <span class="c1">// x = [1,2]; y = [1,2,3]</span>
</span><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>    <span class="c1">// x = [1,2]; y = [1,2,3]</span>
</span><span class='line'><span class="nx">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">];</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">];</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="p">;</span> <span class="c1">// z = &quot;1,23&quot; WAT?</span>
</span></code></pre></td></tr></table></div></figure>


<p>I spend a considerable amount of time trying these out and since I discover no
overarching design behind how they operate I come away none-the-wiser and so
repeat the same process on a slighly different problem some time later. (slice
vs. splice, anyone?)</p>

<p>Before I bash on javascript some more, I find it important to state that
it&#8217;s an enormous feat <a href="http://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript">to design and implement a language in ten days</a>,
hat tip to Brendan Eich.</p>

<p>The point I want to get across is that not having a solid design principle
behind a language is actually a hindrance. It slows you down by having to try
the pieces (functions, in this case) individually unless you have memorized
them.</p>

<p>On the other hand, when you work with a language that has a design philosophy
you gain the benefit of faster development. In Clojure, in the case of
collection types, that principle is immutability. You don&#8217;t have to read the
docs or fiddle around in the REPL. The original never changes, you get the
&#8220;modified&#8221; version in the returned value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">x</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span> <span class="p">(</span><span class="k">def </span><span class="nv">y</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">x</span> <span class="mi">3</span><span class="p">))</span> <span class="c1">; x = [1,2]; y=[1,2,3]</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">x</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">])</span> <span class="p">(</span><span class="k">def </span><span class="nv">y</span> <span class="p">(</span><span class="nb">concat </span><span class="nv">x</span> <span class="p">[</span><span class="mi">3</span><span class="p">])</span><span class="c1">; x [1,2]; y=[1,2,3]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s look at another language, Ruby.</p>

<p>Called on an array, <code>push</code>, <code>concat</code>, <code>shift</code>, <code>pop</code> and <code>unshift</code> all modify
their caller. <code>Push</code>, <code>concat</code> and <code>unshift</code> return the modified array, while
<code>shift</code> and <code>pop</code> return the removed element.  So the rule seems to be that
methods that expand the array return the new array, methods that take away an
element return that element. So far so good.</p>

<p>What about <code>take</code> and <code>drop</code>? They both take away a number of elements, from the
beginning or from the end, and the number of elements being passed in as a
parameter. I&#8217;d totally expect these methods to change the original in place.
After all, few names sound more destructive than <code>drop</code>.  We&#8217;re in for a
surprise. Both of them leave the original intact and return the taken (or
dropped elements). In fact, you can pass in a number to both <code>shift</code> and <code>pop</code>
which makes them identical to <code>take</code> and <code>drop</code> with the important distinction
of whether they mutate or not the array they are called on.</p>

<p>To add to the confusion, there is <code>delete</code> which deletes all occurrences of the
element that is given as the parameter and there is <code>compact</code> which does exactly
the same for a special case, nil. (So <code>compact</code> takes no parameter). However,
it turns out that <code>delete</code> is mutating, but <code>compact</code> is not, preferring to return
the array with no nils. <code>compact!</code> comes to the rescue which does mutation and so
<code>x.compact!</code> is the same <code>x.delete(nil)</code>.</p>

<p>To give an analogy from natural languages, learning operations on collections in
Ruby and Javascript is like learning the article for each noun in German (der,
die or das). There are rules but they are hard to remember in the first place
and are often violated.</p>

<p>Learning the same thing in Clojure is like learning articles in English: there
is one true way to do it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Ruby 2.0.0 with rbenv (ruby-build) on Mountain Lion]]></title>
    <link href="http://balinterdi.com/2013/06/02/install-ruby-2-dot-0-0-with-rbenv-ruby-build-on-mountain-lion.html"/>
    <updated>2013-06-02T22:58:00+02:00</updated>
    <id>http://balinterdi.com/2013/06/02/install-ruby-2-dot-0-0-with-rbenv-ruby-build-on-mountain-lion</id>
    <content type="html"><![CDATA[<ol>
<li>You need to <a href="http://www.ruby-lang.org/en/news/2013/05/14/ruby-2-0-0-p195-is-released/">download the source</a>, or use <a href="https://github.com/sstephenson/ruby-build">ruby-build</a> to install it for you. I will subsequently suppose the latter.</li>
<li>You need to configure it, compile it and copy files to the proper location:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>RUBY_CONFIGURE_OPTS=--with-openssl-dir=`brew --prefix openssl` CONFIGURE_OPTS=--with-gcc=clang rbenv install 2.0.0-p195</span></code></pre></td></tr></table></div></figure>


<p>You can see I installed openssl through homebrew. The ruby-build recipe
downloads an openssl lib for you so only use that if you have it
installed as I do.</p>

<p>I got the clang compiler frontend through <a href="https://developer.apple.com">Apple&#8217;s Command Line
Tools</a> so I&#8217;m not sure that&#8217;s needed if you have the whole Xcode
package.</p>

<p>It really feels faster -maybe due to the improved GC-, rails starts >2
as fast as compared to plain 1.9.3, using <a href="https://github.com/jonleighton/spring">spring</a> in both cases.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Rogues - Discourse with Jeff Atwood]]></title>
    <link href="http://balinterdi.com/2013/05/30/ruby-rogues-discourse-with-jeff-atwood.html"/>
    <updated>2013-05-30T21:23:00+02:00</updated>
    <id>http://balinterdi.com/2013/05/30/ruby-rogues-discourse-with-jeff-atwood</id>
    <content type="html"><![CDATA[<p><a href="http://itunes.apple.com/us/podcast/ruby-rogues/id436260381">Ruby Rogues</a> is one of the handful of podcasts I usually listen to. This week featured Jeff Atwood who talked about
Discourse, a phenomenal forum platform. Jeff&#8217;s thoughts on several things really struck home so I wanted to jot them down.
You might find these thought-provoking, too. The full transcription is available <a href="http://rubyrogues.com/106-rr-discourse-with-jeff-atwood/#more-1341">here</a></p>

<ul>
<li>Installing a binary app per device is a huge step backward from the web world where you don&#8217;t have to download and upgrade anything. You just go to the website and it works.</li>
<li>Betting on Javascript is a very safe bet. The competition has been the fiercest among browser performances, that is Javascript engines on the client. The engines are guaranteed to improve.</li>
<li>Desktop computers are -in most cases- more performant than the server the application is hosted on. So it makes sense to push computations to the clients, and spread it out among them.</li>
<li>[Discourse] using postgres is a way to force hosting providers move out of the &#8220;server herpes&#8221; (PHP + MySQL). As Discourse becomes more popular, this will give more leverage to remove the herpes from servers.</li>
<li>Why was it [the server side] built in Ruby/Rails? <a href="http://eviltrout.com/">Robin Ward</a> made a game about forums and Jeff contacted him to build Discourse. Robin had used Ruby and thus this decided the Ruby or Python question.</li>
<li>Rule of 3. Kind of a philoshopical belief for Jeff. A component (e.g a datepicker) is proven to be reusable if it was successfully used in three different contexts. Having three major partners for Discourse will really be a tipping point. Etc.</li>
<li>Since Discourse is mainly a rich, client-side app, [Ember] plays a much bigger role in its success (or failure) then Ruby. The question is how will Rubyists adapt to Ember, whether they will like it or not.</li>
</ul>


<p>Discourse is built on Ember, and <a href="http://discuss.emberjs.com/">Ember uses Discourse as a forum</a>. For one, I welcome our new rich-client overlords.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons learned from solving 4Clojure problems]]></title>
    <link href="http://balinterdi.com/2012/12/29/lessons-learned-from-solving-4clojure-problems.html"/>
    <updated>2012-12-29T14:55:00+01:00</updated>
    <id>http://balinterdi.com/2012/12/29/lessons-learned-from-solving-4clojure-problems</id>
    <content type="html"><![CDATA[<p>A few days ago I completed the last problem on the <a href="http://4clojure.com">4Clojure</a> site. If you
want to learn Clojure, solving these problems is a great way to do it. Several
of its features -that I&#8217;ll highlight below- make it a great learning tool. Other
features probably arise from <a href="http://clojure.org/">Clojure</a> being a
(pragmatic) functional programming language. Coming from mostly an OO background
these were also new to me and thus deserve their own paragraph.</p>

<p>I hope that after reading through the list you&#8217;ll end up being persuaded of the
merits and want to solve (some of) the problems yourself. If you do, please let
me know how it went and what you learned from it.</p>

<p>If you really get stuck, there is a <a href="https://groups.google.com/forum/?fromgroups#!forum/4clojure">Google group dedicated to the 4Clojure
problems</a>. You can also leave a comment here so I can help or go directly to
check <a href="https://gist.github.com/raw/4008944/9c0577566b9a87e8db03332bf71b6d0b1140748e/4clojure.clj">my solutions</a>. Let&#8217;s jump in.</p>

<h2>Why is 4Clojure a great learning tool?</h2>

<h3>Looking at others&#8217; solutions</h3>

<p>After solving a problem, you can check how the users you follow solved it.
That&#8217;s arguably the most important feature when it comes to learning since it
is essentially a code reading exercise when the functionality of the code is
well-known (since it solves the same problem you&#8217;ve solved) and the authors are
probably more proficient.</p>

<p>On several occasions I saw solutions that were both more concise and clearer
than mine (especially when tackling a hard problem). Dealing with the
inferiority complex on the very short term is dwarved by how much wisdom you
gain from these. For what it&#8217;s worth, the users I learned most from are
<a href="http://www.4clojure.com/user/hypirion">hypirion</a>,
<a href="http://www.4clojure.com/user/jafingerhut">jafingerhut</a> and
<a href="http://www.4clojure.com/user/chouser">chouser</a>.</p>

<p>(If you&#8217;d like to follow me, I&#8217;m <a href="http://www.4clojure.com/user/balint">balint</a>
there.)</p>

<h3>Executable, well thought-out test cases</h3>

<p>To submit your solution, you paste your code into a textbox and click a button.
The test cases, which are visible, are then checked one by one. If all the
lamps become green, your solution is accepted. If not, you get an error
message and have to try again.</p>

<p>This method has several advantages. First of all, it eliminates the imprecisions
you might have had after reading the description of the problem. Second, it
gives you a set of examples to work against. Third, they force you to think
deeper about the problem since they are constructed to reject a partial
solution.</p>

<h3>Timeouts</h3>

<p>Your solution can be functional and pass all the test cases but if it does not
finish in a certain time, it will get rejected. I bumped into this on several
occasions. Most of the time it was because I came up with the brute force
solution to a hard problem and hoped I&#8217;d get away with it. In other cases it was
because of a technical issue, like allocating too much memory.</p>

<p>In the first case, it made me think again about the problem (see Hammock-Driven
Development) and come up with a more ingenious solution. In the second case, I
learned something about a technical aspect of the language. In both cases, I
grew a bit wiser about optimization -which is a &#8220;real-world&#8221; coding skill- so
I&#8217;m happy the authors of 4clojure chose to implement this constraint.</p>

<h2>What does one learn about (functional) programming?</h2>

<h3>Hammock-Driven Development</h3>

<p>Also known as “step-away from the computer to solve hard problems”, Hammock-Driven
Development is a term coined by Rich Hickey, the creator of Clojure, in a <a href="http://www.youtube.com/watch?v=f84n5oFoZBc">keynote
speech</a>.</p>

<p>Apparently ridiculing Test Driven Development (TDD), HDD holds that the most
important activity to solve a hard problem is to think deeply about it without
any distractions. Most of the time sitting in front of the computer is a
distraction in itself since it begs to be typed on and prevents actual deep thinking
to happen.</p>

<p>This one is really hard to get used to because whenever we write code we feel like
we&#8217;re getting closer to a solution. Thinking, on the other hand, does not
provide any tangible output.</p>

<p>However, HDD has rung ever more true with me as I progressed. When tackling hard
problems, I tended to think about them for some time and then started to type in
actual code. The problem was, when I felt that the solution became convoluted I
did not go back to the proverbial hammock but carried on with the implementation.
Most of the time it either turned out to be a dead-end or a solution I&#8217;d much
better hide.</p>

<p>Even more importantly, a cleaner solution is one that is easier for
others to understand. Since code is mainly for others to read and occasionally
for computers to execute, more thinking up-front results in less time spent
developing and maintaining the code down the line.</p>

<h3>The REPL is a powerful developer tool</h3>

<p>The power of the REPL is one those realizations most of us coming from OO will
come to. Since FP languages have <a href="http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey">very little state</a> and side-effects and
thus a lot of idempotency, trying things at the REPL is taken to the next
level. You launch a REPL once and then copy-paste the building blocks of your
solution between your editor and the REPL (and there are <a href="https://github.com/jpalardy/vim-slime">better</a>
<a href="https://github.com/kingtim/nrepl.el">solutions</a> then copy-pasting).</p>

<h3>Use higher level functions</h3>

<p>FP languages strive to have a small set of data structures and a high number of
functions that operate on them. Clojure is no exception. Though it&#8217;s not hard to
assemble the higher-level function you need yourself, in the majority of cases,
it&#8217;s just extra work: it&#8217;s probably already defined in the core.</p>

<p>This is something that I learned by reading others&#8217; solutions and learning
about awesome functions (<a href="http://clojuredocs.org/clojure_core/clojure.core/frequencies">frequencies</a>, <a href="http://clojuredocs.org/clojure_core/clojure.core/merge-with">merge-with</a>, <a href="http://clojuredocs.org/clojure_core/clojure.core/condp">condp</a> come to mind).
After a while I looked up the high-level function myself from <a href="http://clojure.org/cheatsheet">the
cheatsheet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switch to Command Line Vim on iTerm]]></title>
    <link href="http://balinterdi.com/2012/03/30/switch-to-command-line-vim-on-iterm.html"/>
    <updated>2012-03-30T12:04:00+02:00</updated>
    <id>http://balinterdi.com/2012/03/30/switch-to-command-line-vim-on-iterm</id>
    <content type="html"><![CDATA[<p>Switching between applications is more of a mental context switch than just switching between the panes in the same window. Or at least that&#8217;s what I told myself when I decided I switch from using macvim to the simple command line version. It also brings me pretty close to using tmux which I would primarily use to send commands between panes. Most of the posts about using tmux only briefly touch on switching to command line vim so I thought I&#8217;d fill in the gap somewhat.</p>

<p>I use iTerm2 on a MacBook Pro and run 10.6.8 (Snow Leopard), although I think it should run
fine under Lion, too.</p>

<p>First, you&#8217;ll have to install a fairly recent vim. Homebrew has a policy of not having packages which the operating system already provides, but fortunately there is a <a href="https://github.com/Homebrew/homebrew-dupes">homebrew-dupes</a> repository that has vim:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ brew install --HEAD https://raw.github.com/Homebrew/homebrew-dupes/master/vim.rb</span></code></pre></td></tr></table></div></figure>


<p>This will configure, make and install vim.</p>

<p>Next, I looked for a theme that looks good on both a light and a dark background and has iTerm support (a colorscheme for the terminal emulator). I&#8217;ve found <a href="http://ethanschoonover.com/solarized">Ethan Schoonover&#8217;s solarized theme</a> really cool. Just follow the steps in the <a href="https://github.com/altercation/ethanschoonover.com/tree/master/projects/solarized">README of the repository</a> to download both the vim and the iTerm colorscheme.</p>

<p>To install the iTerm colorscheme, go to Preferences -> Profiles to select your
profile and then click the Colors tab. There is a &#8220;Load Presets&#8221; dropdown from
which you have to choose Import and find the solarized itermcolors file.</p>

<p>To use the vim colorscheme you have to add the colors file to somewhere where
vim finds it. There are many ways to do this, so check out the <a href="https://github.com/altercation/ethanschoonover.com/tree/master/projects/solarized">README</a> to
find the method that suits you.</p>

<p>Once, done you have to set the colorscheme in your vimrc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>colorscheme solarized</span></code></pre></td></tr></table></div></figure>


<p>(vim finds out the appropriate background automatically, so you don&#8217;t have to
explicitly set the background)</p>

<p>I was all set up and most things worked just like in the GUI version. One thing that bugged me was that my cursor keys stopped working. I don&#8217;t use them for moving and text input but I do for cycling in the command history or flipping between file matches for Command-T. It took me a while to find out that iTerm sends a wrong escape sequence for the arrow keys. I could fix that by selecting another set of key presets for the terminal&#8217;s profile. In iTerm, go to Preferences -> Profiles and select your profile. Select Keys, then Load Preset and select xTerm with Numeric Keypad.</p>

<p>There is one more trick I find handy. If you set</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set clipboard=unnamed</span></code></pre></td></tr></table></div></figure>


<p>in your config, then anything you copy from vim by the usual vim commands (y, d, x, etc.) will be available on your system clipboard and thus pastable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Annotated Assortment on Mockist Testing]]></title>
    <link href="http://balinterdi.com/2011/11/30/an-annotated-assortment-on-mockist-testing.html"/>
    <updated>2011-11-30T21:30:00+01:00</updated>
    <id>http://balinterdi.com/2011/11/30/an-annotated-assortment-on-mockist-testing</id>
    <content type="html"><![CDATA[<p>Most of us read blog posts every day. We read them, take an idea out of
them and then, most of the time, forget about them. Some of them are stashed
away in the back of our minds, ready to jump out if we face a related
problem.</p>

<p>A precious few of them, however, we keep thinking back to without a specific
reason.</p>

<p>I&#8217;ve bitten by the &#8220;mockist&#8221; testing bug when I read <a href="http://jamesgolick.com/2010/3/14/crazy-heretical-and-awesome-the-way-i-write-rails-apps.html">this one</a> a while ago. It expresses a contrarian opinion
about how to test Rails applications which struck me as odd at the time.
That&#8217;s probably the reason I read it several times.</p>

<p>A few weeks ago I watched Gregory Moeck&#8217;s <a href="http://confreaks.net/videos/659-rubyconf2011-why-you-don-t-get-mock-objects">Why You Don&#8217;t Get Mock Objects</a> and I was stung by the same bug only more deeply,
this time.</p>

<p>Using that video as a starting point I then roamed Gregory&#8217;s blog for
more and felt like I was beginning to grasp it. Now, obviously, I&#8217;m at the
beginning of this journey and still have a lot of teeth-cutting to do.
Nevertheless, I want to share with you the gems I&#8217;ve found so far.</p>

<p>Gregory&#8217;s blog has a very good primer on the difference between stubs
and mocks: <a href="http://gmoeck.github.com/2011/10/26/stubbing-is-not-enough">&#8220;Stubbing is Not Enough&#8221;</a>. I&#8217;d even go
as far as to claim that it explains its subject better than Martin
Fowler&#8217;s classic <a href="http://martinfowler.com/articles/mocksArentStubs.html">&#8220;Stubs Are Not Mocks&#8221;</a>, although that
latter goes into more detail and is a definite must-read, too.</p>

<p>James Golick has another great piece that drives home the point better
than his first post I mentioned: <a href="http://jamesgolick.com/2010/3/10/on-mocks-and-mockist-testing.html">&#8220;On Mocks and Mockist Testing&#8221;</a>.</p>

<p>Along comes Avdi Grimm with his strict sounding <a href="http://avdi.org/devblog/2011/07/05/demeter-its-not-just-a-good-idea-its-the-law/">&#8220;Demeter: It’s not just a good idea. It’s the law.&#8221;</a>
, with a very interesting discussion in the comments. The same gentleman
wrote <a href="http://avdi.org/devblog/2011/09/06/making-a-mockery-of-tdd/">&#8220;Making a Mockery of TDD&#8221;</a> in which he
touches on the concept of using mocks as a design tool.</p>

<p>Nick Kallen&#8217;s <a href="http://magicscalingsprinkles.wordpress.com/2010/02/08/why-i-love-everything-you-hate-about-java/">&#8220;Why I love everything you hate about Java&#8221;</a> is clearly provocative
and definitely worth to contemplate on. It is also the only one of the bunch that
does not use Ruby (but Scala) for the code examples.</p>

<p>Finally it seems like the fountainhead in the matter is the <a href="growing">&#8220;Growing Object-Oriented Software, Guided by Tests&#8221;</a>
book by Steve Freeman and Nat Pryce. I&#8217;ve only gotten until putting it
on my reading list so please chime in if you did read it.</p>

<p>Please, also pipe in if there are any materials in the subject you&#8217;d
recommend. It would also be cool to see open source projects that extensively use mocks for testing, the only
one I found so far is <a href="https://github.com/jamesgolick/friendly">friendly</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Event loop primer]]></title>
    <link href="http://balinterdi.com/2011/10/19/event_loop_primer.html"/>
    <updated>2011-10-19T00:06:00+02:00</updated>
    <id>http://balinterdi.com/2011/10/19/event_loop_primer</id>
    <content type="html"><![CDATA[<p>I recently got into developing a web application with node.js (aka <a href="http://teddziuba.com/2011/10/node-js-is-cancer.html">cancer</a>).
Coming from a synchronous world, it took (and to be honest, still takes)
quite a while to grok how writing asynchronous code differs from my
previous experiences (AJAX calls with jQuery only go that far).</p>

<p>As with many fine technologies or methods (TDD, NoSQL, functional
programming come to mind) it&#8217;s your whole
thinking that has to change. In this post I want to share an example
from <a href="http://pragprog.com/book/tbcoffee/coffeescript">Trevor Burnham&#8217;s excellent Coffeescript book</a> that gave me one
of those aha moments.</p>

<div><script src='https://gist.github.com/1297011.js'></script>
<noscript><pre><code>countdown = 10
h = setInterval -&gt;
 countdown--
, 100
do (-&gt;) until countdown is 0
clearInterval h
console.log 'Surprise!'</code></pre></noscript></div>


<p>(If you don&#8217;t read Coffeescript code, you can go to the <a href="http://jashkenas.github.com/coffee-script/">Coffeescript web site</a>
and paste the above example in to get compiled Javascript)</p>

<p>The example above is broken. It gets stuck at the <code>until countdown is 0</code>
row. In an event loop system events (callbacks) only get run after the &#8220;main line&#8221;
of execution (or, in other words, all other code) has completed.
So the until loop blocks out the callback of the setInterval,
countdown never gets decremented and thus an endless loop ensues.</p>

<p>I&#8217;m sure that there are many ways to fix this, I came up with the
following (and wonder if there is one closer to the original):</p>

<div><script src='https://gist.github.com/1297018.js'></script>
<noscript><pre><code>countdown = 10
h = setInterval -&gt;
  countdown--
  if countdown is 0
    console.log 'Surprise'
    clearInterval h
, 100</code></pre></noscript></div>


<p>And that&#8217;s it. I hope this simple example pushes you up on that pesky learning curve.</p>

<p>(The snippet was published by the kind permission of the author.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Five wasted years - on the futility of university education]]></title>
    <link href="http://balinterdi.com/2011/09/28/five-wasted-years-futility-of-university-education.html"/>
    <updated>2011-09-28T00:00:00+02:00</updated>
    <id>http://balinterdi.com/2011/09/28/five-wasted-years-futility-of-university-education</id>
    <content type="html"><![CDATA[<p>I graduated from the Technical University of Budapest to earn a M.Sc. in
Software Engineering. Albeit it is supposed to be an asset on my CV I&#8217;ll
argue below that the long years of university education was just not worth it.</p>

<p>When trying to summarize what advantage university education
brought me there is precious little I can think of. Five years is a lot of
time to spend without actually getting something out of it for one&#8217;s
professional career.</p>

<p>Obviously I&#8217;ve formed my opinion based on my university experience which
might not (and probably <em>is</em> not) be applicable to all higher education.
Philosophy, economics and law all require different formation
and practice might be harder (or outright dangerous) to attain in some
areas (think medicine).</p>

<p>Also, there is a great variance between countries although even the famously high-standard
US education system seems to yield not actual but rather
looks-good-on-my-CV benefits, say some <a href="http://techcrunch.com/2011/04/10/peter-thiel-were-in-a-bubble-and-its-not-the-internet-its-higher-education/" title="Peter Thiel: Education Bubble">smart</a> <a href="http://www.economist.com/node/18750658" title="Stephen Wolfram">guys</a>.</p>

<h2>Learn to learn?</h2>

<p>Tech is changing extremely rapidly. Today&#8217;s hotness could be a thing of
the past in a few years. Consequently universities should not try to keep up with the
pace and teach students state-of-the-art stuff. Higher education needs to transcend
short-term utility and provide a base one can build on for the rest of
his career. So we were told or made to believe.</p>

<p>What is probably considered the essence of higher education is &#8220;learn to
learn&#8221;. It is the idea that universities need to teach future-engineers
how to quickly adapt to new fields and techniques (programming
languages, databases, architectures, etc.).</p>

<p>This is appealing but universities don&#8217;t do that. I had to sit through
long hours of material not even vaguely related to software engineering.
The practical stuff (e.g programming languages) was taught with stone age style methods
(programming on paper).  The other subjects, those that were supposed to provide us the broad
vision, I suppose, were way too much in volume and failed to achieve that goal.</p>

<h2>Make to learn</h2>

<p>In my current job I&#8217;m lucky to work with some guys who dropped out of
college and started to work. They might not
know about <a href="http://en.wikipedia.org/wiki/Prim's_algorithm" title="Prim's algorithm">Prim&#8217;s algorithm</a> or the <a href="http://en.wikipedia.org/wiki/Intermediate_value_theorem" title="Intermediate value theorem">intermediate value theorem</a>,
but I think the result of the time they spent making things greatly surpass the time I
spent learning the above.</p>

<p>Programming (or, in its more CV-friendly, hire-me name: software
engineering) is a task that could be the modern equivalent of wood carving.
You can learn all that you want about the craft, the only thing that
really matters is doing it, a lot. Only, programming is way better.
There is virtually no waste (unless you publish what you make :) ) and
the tools are more accessible and cheaper.</p>

<p>Take it from someone who, unlike most kiddos at the university, started
programming late: it feels awkward and weird at first. And then the
second and third time, too. Slowly, though, you start to feel like it&#8217;s actually
fun and sometimes more than that. You&#8217;re building something which you&#8217;ll
look at ashamedly a few months later but at least your program does something extraordinary,
like sorting a list of numbers. That&#8217;s science!</p>

<p><a href="http://en.wikipedia.org/wiki/B-tree" title="B-tree">Math data constructs</a>, probability theory and cryptography notwithstanding,
have you got this feeling of coolness (dare I say, awe) out of university lectures?</p>

<h2>Total waste, really?</h2>

<p>In fairness, and as a measure to counter my arrogance, I had to consider arguments
on the pro-education side, too. Here is what I came up with:</p>

<h3>Math</h3>

<p>When faced with a programming challenge I
can recall on some occasions an algorithm used to resolve a similar problem.
That&#8217;s not to say you can&#8217;t google up a solution if you have a vague
idea what to look for. Nevertheless if you can mentally page through the solutions
for a given problem from your university classes, their time and space
needs and their constraints then you surely save a lot of time.
I forgot all the relevant facts about any algorithm and have to look it
up every single time, but it could be me.</p>

<h3>Deciding on one&#8217;s vocation</h3>

<p>Most kids don&#8217;t know what to do with their life when they are 18. Real
life still seems distant and most want a few more years of canteen,
beers and idling. Whether it is beneficial for them or society
(taxpayers) as a whole to be allowed to do that is another matter.
Nevertheless, I&#8217;m convinced that a high number of students can have a
clearer picture about whether they want to do &#8220;computer science&#8221; for the
rest of their lives after a couple of years.</p>

<h3>Outstanding teachers</h3>

<p>Even though I reckon you can learn everything you need to know on your
own (from the Internet), having a good teacher can squeeze your
learning curve. Although I believe this is more attainable with a small
group (and even more in a one-to-one, mentoring relationship) it&#8217;s
definitely possible for an outstanding teacher to speed up absorbing
knowledge with a bigger group, too. Unfortunately, with one notable
exception, my teachers were not of this type, but
that&#8217;s a weak argument against college education in general.</p>

<p>Even if all these pro-education arguments are valid, however, a couple
of years is surely enough to derive all the advantages they bring.
Then, you still have 3 years to go and carve wood.</p>

<h2>On navigation</h2>

<p>Let me finally share a quote I&#8217;ve just found in Walden by H.D. Thoreau and that
summarizes my intent with this post in one swell sentence:</p>

<blockquote><p>To my astonishment I was informed on leaving college that I had studied<br/>navigation! &#8211; why, if I had taken one turn down the harbor I should<br/>have known more about it.</p><footer><strong>Henry David Thoreau</strong> <cite>Walden</cite></footer></blockquote>


<h2>Please defend the status quo (or indulge in bashing it)</h2>

<p>As I stated in the introduction, my opinion is just a drop in the ocean,
a tiny slice in a big cake, a lone voice in the NY Stock Exchange (you
get my point).</p>

<p>If you <a href="http://www.codigoergosum.com/2011/09/28/five-wasted-years-futility-of-university-education.html" title="Comments">share your opinion</a>, there will be two voices already and we&#8217;ll
have more information to decide about whether we should advise our children to go
to college, for example. Then three. We may even reach four voices.</p>

<p>Joking aside, if you went to college to learn computer science in Hungary
or in another country, I&#8217;m interested to <a href="http://www.codigoergosum.com/2011/09/28/five-wasted-years-futility-of-university-education.html" title="Comments">hear your opinion</a>. If you
studied something else, don&#8217;t be discouraged, please <a href="http://www.codigoergosum.com/2011/09/28/five-wasted-years-futility-of-university-education.html" title="Comments">share also</a>. My
points are mostly valid for computer science but I&#8217;m curious to hear
which other fields they hold true in (or in which fields they don&#8217;t).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Powered by Octopress]]></title>
    <link href="http://balinterdi.com/2011/09/05/powered-by-octopress.html"/>
    <updated>2011-09-05T21:22:00+02:00</updated>
    <id>http://balinterdi.com/2011/09/05/powered-by-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a blogging engine on top of Jekyll. It got my attention
since it provides themes and a layout that looks great on mobile
devices, too.</p>

<p>I had been playing with the idea to do my own simplistic theming long enough
to realize that I would never do it. The other feature I like is its plugin system:
some I&#8217;ll use right away (e.g Github style codeblock) but I also like
the idea that I can write a plugin for any specific need that might
arise later.</p>

<p>I had had my blog on Jekyll so migration was not really hard. I hit a
few minor roadblocks on the way but <a href="http://octopress.org/docs/">documentation</a> is great and the author,
Brandon Mathis was really helpful on the <a href="https://convore.com/octopress/">support forum</a> so
I could eventually sort them out.</p>

<p>If you like to <a href="http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html">blog like a hacker</a>, want to own your
content and don&#8217;t want to be bothered with styling, I encourage you to
join <a href="https://github.com/imathis/octopress/wiki/Octopress-Sites">the squid team</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git rebase to fix your local commits]]></title>
    <link href="http://balinterdi.com/2011/07/19/git-rebase-to-fix-your-local-commits.html"/>
    <updated>2011-07-19T00:00:00+02:00</updated>
    <id>http://balinterdi.com/2011/07/19/git-rebase-to-fix-your-local-commits</id>
    <content type="html"><![CDATA[<p>Let&#8217;s say you have the following three commits in your local repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git log -3 --oneline
</span><span class='line'>b648f1a Fix propagating errors in findOrInitialize. (28 seconds ago)
</span><span class='line'>8789cd1 Non-destructive filtering for bumblebees. (12 hours ago)
</span><span class='line'>1a35285 Propagate errors the node.js way. (14 hours ago)</span></code></pre></td></tr></table></div></figure>


<p>The last commit, b648f1a conceptually belongs to the first one, 1a35285.
It only came later because say you haven&#8217;t run the tests before
committing it and only realized later you introduced a bug. Or some
other misdemeanor. Whatever the background is, it would be great if
there was a way to squash the two related commits together. Turns out
there is: interactive rebase.</p>

<p>The syntax of the git-rebase is the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git rebase [-i | --interactive] [options] [--onto &lt;newbase>]
</span><span class='line'>             &lt;upstream> [&lt;branch>]</span></code></pre></td></tr></table></div></figure>


<p>What happens when you do git rebase is that the commits that are on the current
branch but are not in upstream are saved. The current branch is reset to
upstream and then the saved commits are replayed on top of this.</p>

<p>It&#8217;s worth to mention that you should only do this if you have not
pushed out these changesets to a remote where others might have pulled
from it. Rebase creates new commits and if your collaborators pull the
new commits, chaos can ensue. (See &#8220;Perils of Rebase&#8221; in the <a href="http://progit.org/book/ch3-6.html">ProGit
book</a>)</p>

<p>This can be used to achieve what we want:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git rebase -i HEAD~3</span></code></pre></td></tr></table></div></figure>


<p>Since the commits that are on the current branch but not on the commit
three commits from here are the last three commits, here is what we get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick 1a35285 Propagate errors the node.js way.
</span><span class='line'>pick 8789cd1 Non-destructive filtering for bumblebees.
</span><span class='line'>pick b648f1a Fix propagating errors in findOrInitialize.</span></code></pre></td></tr></table></div></figure>


<p>We want to meld the &#8220;fix&#8221; commit into the &#8220;propagate&#8221; commit since
that&#8217;s how it should have been in the first place. So we move b648f1a up and
squash it into the previous commit:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pick 1a35285 Propagate errors the node.js way.
</span><span class='line'>squash b648f1a Fix propagating errors in findOrInitialize.
</span><span class='line'>pick 8789cd1 Non-destructive filtering for scales.</span></code></pre></td></tr></table></div></figure>


<p>After a successful rebase this is how the new log looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>% git log -3 --oneline
</span><span class='line'>73eed18 Non-destructive filtering for bumblebees. (9 seconds ago)
</span><span class='line'>1e63d17 Propagate errors the node.js way. (39 seconds ago)
</span><span class='line'>1b24891 Minor fixes in Bumblebee buzzing. (16 hours ago)</span></code></pre></td></tr></table></div></figure>


<p>Note that the three commits we had before have now been nicely compacted
into two, and the propagation commit is now consistent and fixed. It can
now be pushed.</p>

<p>ps. You might wonder what we use bumblebees for in our project. Actually
they are faux. They serve to obfuscate real names in propietary code.
I hope I can one day write code where bumblebees will be first-class
citizens, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Don't Tell Michelle, Facebook privacy as it should be]]></title>
    <link href="http://balinterdi.com/2010/10/10/dont-tell-michelle-facebook-privacy-as-it-should-be.html"/>
    <updated>2010-10-10T00:00:00+02:00</updated>
    <id>http://balinterdi.com/2010/10/10/dont-tell-michelle-facebook-privacy-as-it-should-be</id>
    <content type="html"><![CDATA[<p>It&#8217;s been a quiet four months over here. My excuse is that I&#8217;ve been working. I joined a startup, <a href="http://secretsaucepartners.com">Secret Sauce Partners</a> in June and we have started to build our first product a couple of weeks later. Now I am proud (actually, quite proud) to announce that we have released a first version last week.</p>

<h2>The problem we are solving</h2>

<p>I&#8217;m sure you have a Facebook account. You probably have around <a href="http://www.facebook.com/press/info.php?statistics">130 &#8220;friends&#8221;</a>. Chances are you want to share lots of things but on several occasions you don&#8217;t want to tell everybody. Sure, you can create friend lists and post to them based on what you want to say. Or, you can pick individual friends for your message (good luck with that if you would like to speak to more than 3 friends). It would definitely make sense (and would hugely improve the state of the world!) if you only showed your Farmville achievements to your friends who play Farmville and nobody else. Especially not your colleagues during work hours.</p>

<p>Wouldn&#8217;t it be cool if you did not have to fiddle with setting the proper audience of your posts every single time you share something? If the people whom you post to would be determined from the content and the context of your message? Better still, if friends that join later could not see your posts prior to that?</p>

<h2>The solution</h2>

<p>Let&#8217;s go back to Farmville-land (I know, I know, but bear with me for a few more minutes). If you only want to show your Farmville posts to selected people the only way to achieve it is to set your default privacy to that list of selected friends prior to diving in to FarmVille. Then you set it back to your default posting setting. Not quite comfortable.</p>

<p>That&#8217;s where our application comes into the picture. To solve the above problem, you set up a rule that says:
&#8220;Hide posts from Farmville posted during Work Hours from my Co-Workers&#8221;. You lay back, go feed your piggies, and water your sunflowers safe in the knowledge that your colleagues will not know about it. Suppose you don&#8217;t want your mom to know where you spend your weekends. Here is your rule: &#8220;Hide All posts from Foursquare from Family&#8221;. Feeling the urge to swear like a sailor some times and don&#8217;t want your little cousins or nieces to know about it? &#8220;Always hide posts with Swear Words from Kids&#8221;. Don&#8217;t want to spam your Twitter followers on Facebook? &#8220;Always hide posts from Twitter from Twitter followers&#8221;. Then, there are the &#8220;Show&#8221; rules*. For example, an even more sensible rule for Farmville posts could be: &#8220;Always show posts from Farmville to Players&#8221;.
(* &#8220;Show rules&#8221; are the next feature we are going to work on.)</p>

<p>You see, the possibilities are endless, so why don&#8217;t you <a href="http://donttellmichelle.com/">set up your own rules and give it a try</a>? I bet you will never want to go back to (broken) standard Facebook privacy setting.</p>

<p>Ah, and if you don&#8217;t want your wife to know how much high-cholesterol food you eat, then <a href="http://blogs.suntimes.com/sweet/2010/03/dont_tell_michelle_obama_says.html">&#8220;Don&#8217;t Tell Michelle&#8221;</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It's a spec, not a test]]></title>
    <link href="http://balinterdi.com/2010/06/03/its-a-spec-not-a-test.html"/>
    <updated>2010-06-03T00:00:00+02:00</updated>
    <id>http://balinterdi.com/2010/06/03/its-a-spec-not-a-test</id>
    <content type="html"><![CDATA[<p>You must have heard the question several times on the Rails mailing list and different IRC channels: &#8220;Should I test validates_uniqueness_of&#8221;? The standard answer to that one is &#8220;No, you definitely should not. It&#8217;s Rails framework code, and it&#8217;s already thoroughly tested. If you followed this path, you should also test whether objects are properly persisted in the database.&#8221;</p>

<p>I think, however, that the question is wrong and thus you can not give a correct answer. It is wrong because validates_uniqueness_of is the implementation, not the requirement. If you approach it from this angle, the question turns into whether you should test the specific implementation or whether you should verify that (business) requirements are met.</p>

<p>That, in turn, comes down to tests vs. specs (short for specifications) and this is again an opportunity for specs to shine. If you write specs instead of tests (or, to put it in a more mind-warping way: if your tests are actually specs), then the above question is a no-brainer: it&#8217;s part of the specification that no two users can have the same email address, so you must have a spec for it:</p>

<figure class='code'><figcaption><span>user_spec.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;has a unique email address&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;jeff@topnotch.com&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">lambda</span> <span class="p">{</span> <span class="no">Factory</span><span class="p">(</span><span class="ss">:user</span><span class="p">,</span> <span class="ss">:email</span> <span class="o">=&gt;</span> <span class="s2">&quot;jeff@topnotch.com&quot;</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">should</span>
</span><span class='line'>     <span class="n">raise_error</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the other hand, if you stick with calling your tests tests (how orthodox! ;) ) then not only you have to think (which consumes a lot of resources), but you can also come to the wrong conclusion and emit a strong business requirement from your test suite. And then you might not remember to have the implementation for it after modifying the code for whatever reason. And then bad things might happen.</p>

<p>(This thought came to me when coming to work in the subway this morning. I was never quite comfortable with the name &#8220;specs&#8221; but now it&#8217;s starting to make a lot of sense to me. You are encouraged to disagree. Dissent is what makes the world progress.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remove'em trailing whitespaces!]]></title>
    <link href="http://balinterdi.com/2010/02/16/remove-trailing-whitespaces.html"/>
    <updated>2010-02-16T00:00:00+01:00</updated>
    <id>http://balinterdi.com/2010/02/16/remove-trailing-whitespaces</id>
    <content type="html"><![CDATA[<p>Some of you reading this probably use TextMate. It is an excellent editor with two caveats. The first is that you can only see one file in the editing window (no screen split), the other is that there is no save hook. This latter gave me headaches since I can&#8217;t stand any trailing whitespace in source code and the easiest solution would have been to run a script to remove those when the file is saved.</p>

<p>Without further ado I&#8217;ll paste my solution below. Obviously this is not a difficult task to accomplish so the goal is to share not to show off. I use Git for SCM and the following solution parses out the files that have been modified and runs the whitespace eraser script for those. If you use something else (why do you?) you should obviously change the first building block:</p>

<figure class='code'><figcaption><span>parse_modified_files_from_git_status.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby -wn</span>
</span><span class='line'><span class="n">modified_file_pattern</span> <span class="o">=</span> <span class="sr">/^#\s+(?:modified|new file):\s+(.*)$/</span>
</span><span class='line'><span class="nb">puts</span> <span class="vg">$1</span>  <span class="k">if</span> <span class="n">modified_file_pattern</span> <span class="o">=~</span> <span class="vg">$_</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>rm_trailing_whitespace.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/env ruby -wn</span>
</span><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;trailing_whitespace_eraser&quot;</span>
</span><span class='line'><span class="no">TrailingWhiteSpaceEraser</span><span class="o">.</span><span class="n">rm_trailing_whitespace!</span><span class="p">(</span><span class="vg">$_</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>trailing_whitespace_eraser.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">class</span> <span class="nc">TrailingWhiteSpaceEraser</span>
</span><span class='line'>  <span class="no">FILE_TYPES</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;rb&quot;</span><span class="p">,</span> <span class="s2">&quot;feature&quot;</span><span class="p">,</span> <span class="s2">&quot;yml&quot;</span><span class="p">,</span> <span class="s2">&quot;erb&quot;</span><span class="p">,</span> <span class="s2">&quot;haml&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">rm_trailing_whitespace_from_file!</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">trimmed</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">readlines</span><span class="p">(</span><span class="n">file</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>      <span class="n">line</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[\t ]+$/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s2">&quot;w&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">trimmed</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">rm_trailing_whitespace!</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>    <span class="n">root</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
</span><span class='line'>    <span class="n">files</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">root</span><span class="p">)</span> <span class="p">?</span> <span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/**/*.{</span><span class="si">#{</span><span class="no">FILE_TYPES</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">}&quot;</span><span class="p">)</span> <span class="p">:</span> <span class="o">[</span><span class="n">root</span><span class="o">]</span>
</span><span class='line'>    <span class="n">files</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span> <span class="n">rm_trailing_whitespace_from_file!</span><span class="p">(</span><span class="n">file</span><span class="o">.</span><span class="n">chomp</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then you run it by typing:</p>

<figure class='code'><figcaption><span>rtwsp.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>git status | parse_modified_files_from_git_status.rb | rm_trailing_whitespace.rb
</span></code></pre></td></tr></table></div></figure>


<p>If you decide to use this, it is more convenient to <a href="http://gist.github.com/raw/305654/568290aa63ee3b0b3748b5041654f94ce45f4e5b/erase_trailing_whitespace.rb">download the raw source</a></p>

<p>Hopefully I did my tiny bit to have less trailing whitespace in OS code.</p>
]]></content>
  </entry>
  
</feed>
